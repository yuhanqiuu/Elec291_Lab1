0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   
0000             27   ORG 0x0000
0000 0203EB      28            ljmp main
0003             29   
0003             30   ;                     1234567890123456    <- This helps determine the location of the counter
0003 2A2A2A20    31   test_message:     db '*** ADC TEST ***', 0
     41444320
     54455354
     202A2A2A
     00
0014 56287069    32   value_message:    db 'V(pin 14)=      ', 0
     6E203134
     293D2020
     20202020
     00
0025             33   cseg
0025             34   ; These 'equ' must match the hardware wiring
0025             35   LCD_RS equ P1.3
0025             36   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0025             37   LCD_E  equ P1.4
0025             38   LCD_D4 equ P0.0
0025             39   LCD_D5 equ P0.1
0025             40   LCD_D6 equ P0.2
0025             41   LCD_D7 equ P0.3
0025             42   
                 44   	$LIST
00D9             46   
00D9             47   ; These register definitions needed by 'math32.inc'
0030             48   DSEG at 30H
0030             49   x:   ds 4
0034             50   y:   ds 4
0038             51   bcd: ds 5
003D             52   
0000             53   BSEG
0000             54   mf: dbit 1
0001             55   
                546   $LIST
                 57   $LIST
0349             59   
0349             60   Init_All:
0349             61            ; Configure all the pins for biderectional I/O
0349 75AC00      62            mov     P3M1, #0x00
034C 75AD00      63            mov     P3M2, #0x00
034F 75B300      64            mov     P1M1, #0x00
0352 75B400      65            mov     P1M2, #0x00
0355 75B100      66            mov     P0M1, #0x00
0358 75B200      67            mov     P0M2, #0x00
035B             68            
035B 438E10      69            orl     CKCON, #0x10 ; CLK is the input for timer 1
035E 438780      70            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0361 759852      71            mov     SCON, #0x52
0364 53C4DF      72            anl     T3CON, #0b11011111
0367 53890F      73            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
036A 438920      74            orl     TMOD, #0x20 ; Timer 1 Mode 2
036D 758DF7      75            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0370 D28E        76            setb TR1
0372             77            
0372             78            ; Using timer 0 for delay functions.  Initialize here:
0372 C28C        79            clr     TR0 ; Stop timer 0
0374 438E08      80            orl     CKCON,#0x08 ; CLK is the input for timer 0
0377 5389F0      81            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
037A 438901      82            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
037D             83            
037D             84            ; Initialize the pin used by the ADC (P1.1) as input.
037D 43B302      85            orl     P1M1, #0b00000010
0380 53B4FD      86            anl     P1M2, #0b11111101
0383             87            
0383             88            ; Initialize and start the ADC:
0383 53E8F0      89            anl ADCCON0, #0xF0
0386 43E807      90            orl ADCCON0, #0x07 ; Select channel 7
0389             91            ; AINDIDS select if some pins are analog inputs or digital I/O:
0389 75F600      92            mov AINDIDS, #0x00 ; Disable all analog inputs
038C 43F680      93            orl AINDIDS, #0b10000000 ; P1.1 is analog input
038F 43E101      94            orl ADCCON1, #0x01 ; Enable ADC
0392             95            
0392 22          96            ret
0393             97            
0393             98   wait_1ms:
0393 C28C        99            clr     TR0 ; Stop timer 0
0395 C28D       100            clr     TF0 ; Clear overflow flag
0397 758CBF     101            mov     TH0, #high(TIMER0_RELOAD_1MS)
039A 758A28     102            mov     TL0,#low(TIMER0_RELOAD_1MS)
039D D28C       103            setb TR0
039F 308DFD     104            jnb     TF0, $ ; Wait for overflow
03A2 22         105            ret
03A3            106   
03A3            107   ; Wait the number of miliseconds in R2
03A3            108   waitms:
03A3 120393     109            lcall wait_1ms
03A6 DAFB       110            djnz R2, waitms
03A8 22         111            ret
03A9            112   
03A9            113   ; We can display a number any way we want.  In this case with
03A9            114   ; four decimal places.
03A9            115   Display_formated_BCD:
03A9 C0E0       116            push acc
03AB 740A       116            mov a, #10
03AD 14         116            dec a
03AE 1200BC     116            lcall ?Set_Cursor_2 ; Select column and row
03B1 D0E0       116            pop acc
03B3 C000       117            push ar0
03B5 A83A       117            mov r0, bcd+2
03B7 1200C3     117            lcall ?Display_BCD
03BA D000       117            pop ar0
03BC C0E0       118            push acc
03BE 742E       118            mov a, #'.'
03C0 120074     118            lcall ?WriteData
03C3 D0E0       118            pop acc
03C5 C000       119            push ar0
03C7 A839       119            mov r0, bcd+1
03C9 1200C3     119            lcall ?Display_BCD
03CC D000       119            pop ar0
03CE C000       120            push ar0
03D0 A838       120            mov r0, bcd+0
03D2 1200C3     120            lcall ?Display_BCD
03D5 D000       120            pop ar0
03D7 C0E0       121            push acc
03D9 740A       121            mov a, #10
03DB 14         121            dec a
03DC 1200BC     121            lcall ?Set_Cursor_2 ; Select column and row
03DF D0E0       121            pop acc
03E1 C0E0       122            push acc
03E3 743D       122            mov a, #'='
03E5 120074     122            lcall ?WriteData
03E8 D0E0       122            pop acc
03EA 22         123            ret
03EB            124            
03EB            125   main:
03EB 75817F     126            mov sp, #0x7f
03EE 120349     127            lcall Init_All
03F1 12007E     128       lcall LCD_4BIT
03F4            129       
03F4            130       ; initial messages in LCD
03F4 C0E0       131            push acc
03F6 7401       131            mov a, #1
03F8 14         131            dec a
03F9 1200BE     131            lcall ?Set_Cursor_1 ; Select column and row
03FC D0E0       131            pop acc
03FE C083       132            push dph
0400 C082       132            push dpl
0402 C0E0       132            push acc
0404 900003     132            mov dptr, #test_message
0407 1200B1     132            lcall ?Send_Constant_String
040A D0E0       132            pop acc
040C D082       132            pop dpl
040E D083       132            pop dph
0410 C0E0       133            push acc
0412 7401       133            mov a, #1
0414 14         133            dec a
0415 1200BC     133            lcall ?Set_Cursor_2 ; Select column and row
0418 D0E0       133            pop acc
041A C083       134            push dph
041C C082       134            push dpl
041E C0E0       134            push acc
0420 900014     134            mov dptr, #value_message
0423 1200B1     134            lcall ?Send_Constant_String
0426 D0E0       134            pop acc
0428 D082       134            pop dpl
042A D083       134            pop dph
042C            135            
042C            136   Forever:
042C C2EF       137            clr ADCF
042E D2EE       138            setb ADCS ;  ADC start trigger signal
0430 30EFFD     139       jnb ADCF, $ ; Wait for conversion complete
0433            140       
0433            141       ; Read the ADC result and store in [R1, R0]
0433 E5C3       142       mov a, ADCRH   
0435 C4         143       swap a
0436 C0E0       144       push acc
0438 540F       145       anl a, #0x0f
043A F9         146       mov R1, a
043B D0E0       147       pop acc
043D 54F0       148       anl a, #0xf0
043F 45C2       149       orl a, ADCRL
0441 F8         150       mov R0, A
0442            151       
0442            152       ; Convert to voltage
0442 8830       153            mov x+0, R0
0444 8931       154            mov x+1, R1
0446 753200     155            mov x+2, #0
0449 753300     156            mov x+3, #0
044C 75347C     157            mov y+0, #low (50300 % 0x10000) 
044F 7535C4     157            mov y+1, #high(50300 % 0x10000) 
0452 753600     157            mov y+2, #low (50300 / 0x10000) 
0455 753700     157            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured
0458 120253     158            lcall mul32
045B 7534FF     159            mov y+0, #low (4095 % 0x10000) 
045E 75350F     159            mov y+1, #high(4095 % 0x10000) 
0461 753600     159            mov y+2, #low (4095 / 0x10000) 
0464 753700     159            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0467 1202E0     160            lcall div32
046A            161            
046A            162            ; Convert to BCD and display
046A 1200D9     163            lcall hex2bcd
046D 1203A9     164            lcall Display_formated_BCD
0470            165            
0470            166            ; Wait 500 ms between conversions
0470 7AFA       167            mov R2, #250
0472 1203A3     168            lcall waitms
0475 7AFA       169            mov R2, #250
0477 1203A3     170            lcall waitms
047A            171            
047A B297       172            cpl P1.7 ; Blinking LED...
047C            173   
047C 02042C     174            ljmp Forever
047F            175            
047F            176   END
