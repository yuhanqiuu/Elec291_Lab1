                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE)))
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   EQU P1.7 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 020994      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204E4      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
002B            114   org 0x002B
002B 020511     115            ljmp Timer2_ISR
002E            116   
002E            117   ;---------------------------------;
002E            118   ; Define any constant string here ;
002E            119   ;---------------------------------;
002E            120   ;                          1234567890123456    <- This helps determine the location of the counter
002E 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
003F 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0050 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
005E 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
006C 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
007A 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
0088 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
0096 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
00A7 484F5400   129   Hot_temp: db 'HOT',0
00AB            130   ;---------------------------------------------
00AB            131   cseg
00AB            132   
00AB            133   LCD_RS equ P1.3
00AB            134   LCD_E  equ P1.4
00AB            135   LCD_D4 equ P0.0
00AB            136   LCD_D5 equ P0.1
00AB            137   LCD_D6 equ P0.2
00AB            138   LCD_D7 equ P0.3
00AB            139   
                141   $LIST
017D            143   
017D            144   ;---------------------------------;
017D            145   ; Define variables here           ;
017D            146   ;---------------------------------;
017D            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03ED            185   
03ED            186   ;---------------------------------;
03ED            187   ; Define special chars here       ;
03ED            188   ;---------------------------------;
03ED            189   fire:
03ED 7440       190            mov   A,#40H         ;Load the location where we want to store
03EF 1200FF     191       lcall ?WriteCommand    ;Send the command
03F2 7409       192       mov   A,#09H         ;Load row 1 data
03F4 1200FA     193       lcall ?WriteData   ;Send the data
03F7 7400       194       mov   A,#00H         ;Load row 2 data
03F9 1200FA     195       lcall ?WriteData   ;Send the data
03FC 7414       196       mov   A,#14H         ;Load row 3 data
03FE 1200FA     197       lcall ?WriteData   ;Send the data
0401 7406       198       mov   A,#06H         ;Load row 4 data
0403 1200FA     199       lcall ?WriteData   ;Send the data
0406 740F       200       mov   A,#0FH         ;Load row 5 data
0408 1200FA     201       lcall ?WriteData   ;Send the data
040B 741B       202       mov   A,#1BH         ;Load row 6 data
040D 1200FA     203       lcall ?WriteData   ;Send the data
0410 7411       204       mov   A,#11H         ;Load row 7 data
0412 11FA       205       acall ?WriteData   ;Send the data
0414 740E       206       mov   A,#0EH         ;Load row 8 data
0416 1200FA     207       lcall ?WriteData   ;Send the data
0419 22         208       ret                  ;Return from routine
041A            209   
041A            210   double_eighth:
041A 7448       211       mov   A,#48H         ;Load the location where we want to store
041C 1200FF     212       lcall ?WriteCommand    ;Send the command
041F 7400       213       mov   A,#00H         ;Load row 1 data
0421 1200FA     214       lcall ?WriteData   ;Send the data
0424 740F       215       mov   A,#0FH         ;Load row 2 data
0426 1200FA     216       lcall ?WriteData   ;Send the data
0429 7409       217       mov   A,#09H         ;Load row 3 data
042B 1200FA     218       lcall ?WriteData   ;Send the data
042E 7409       219       mov   A,#09H         ;Load row 4 data
0430 1200FA     220       lcall ?WriteData   ;Send the data
0433 741B       221       mov   A,#1BH         ;Load row 5 data
0435 1200FA     222       lcall ?WriteData   ;Send the data
0438 741B       223       mov   A,#1BH         ;Load row 6 data
043A 1200FA     224       lcall ?WriteData   ;Send the data
043D 7400       225       mov   A,#00H         ;Load row 7 data
043F 11FA       226       acall ?WriteData   ;Send the data
0441 7400       227       mov   A,#00H         ;Load row 8 data
0443 1200FA     228       lcall ?WriteData   ;Send the data
0446 22         229       ret                  ;Return from routine
0447            230       
0447            231   eighth:
0447 7450       232       mov   A,#50H         ;Load the location where we want to store
0449 1200FF     233       lcall ?WriteCommand    ;Send the command
044C 7404       234       mov   A,#04H         ;Load row 1 data
044E 1200FA     235       lcall ?WriteData   ;Send the data
0451 7406       236       mov   A,#06H         ;Load row 2 data
0453 1200FA     237       lcall ?WriteData   ;Send the data
0456 7405       238       mov   A,#05H         ;Load row 3 data
0458 1200FA     239       lcall ?WriteData   ;Send the data
045B 7404       240       mov   A,#04H         ;Load row 4 data
045D 1200FA     241       lcall ?WriteData   ;Send the data
0460 740C       242       mov   A,#0CH         ;Load row 5 data
0462 1200FA     243       lcall ?WriteData   ;Send the data
0465 7414       244       mov   A,#14H         ;Load row 6 data
0467 1200FA     245       lcall ?WriteData   ;Send the data
046A 7408       246       mov   A,#08H         ;Load row 7 data
046C 11FA       247       acall ?WriteData   ;Send the data
046E 7400       248       mov   A,#00H         ;Load row 8 data
0470 1200FA     249       lcall ?WriteData   ;Send the data
0473 22         250       ret                  ;Return from routine
0474            251   
0474            252   heart:
0474 7458       253       mov   A,#58H         ;Load the location where we want to store
0476 1200FF     254       lcall ?WriteCommand    ;Send the command
0479 7400       255       mov   A,#00H         ;Load row 1 data
047B 1200FA     256       lcall ?WriteData   ;Send the data
047E 740A       257       mov   A,#0AH         ;Load row 2 data
0480 1200FA     258       lcall ?WriteData   ;Send the data
0483 7415       259       mov   A,#15H         ;Load row 3 data
0485 1200FA     260       lcall ?WriteData   ;Send the data
0488 7411       261       mov   A,#11H         ;Load row 4 data
048A 1200FA     262       lcall ?WriteData   ;Send the data
048D 7411       263       mov   A,#11H         ;Load row 5 data
048F 1200FA     264       lcall ?WriteData   ;Send the data
0492 740A       265       mov   A,#0AH         ;Load row 6 data
0494 1200FA     266       lcall ?WriteData   ;Send the data
0497 7404       267       mov   A,#04H         ;Load row 7 data
0499 11FA       268       acall ?WriteData   ;Send the data
049B 7400       269       mov   A,#00H         ;Load row 8 data
049D 1200FA     270       lcall ?WriteData   ;Send the data
04A0 22         271       ret                  ;Return from routine
04A1            272   bell:
04A1 7460       273       mov   A,#60H         ;Load the location where we want to store
04A3 1200FF     274       lcall ?WriteCommand    ;Send the command
04A6 7400       275       mov   A,#00H         ;Load row 1 data
04A8 1200FA     276       lcall ?WriteData   ;Send the data
04AB 7404       277       mov   A,#04H          ;Load row 2 data
04AD 1200FA     278       lcall ?WriteData   ;Send the data
04B0 740E       279       mov   A,#0eH          ;Load row 3 data
04B2 1200FA     280       lcall ?WriteData   ;Send the data
04B5 740E       281       mov   A,#0eH         ;Load row 4 data
04B7 1200FA     282       lcall ?WriteData   ;Send the data
04BA 740E       283       mov   A,#0eH         ;Load row 5 data
04BC 1200FA     284       lcall ?WriteData   ;Send the data
04BF 741F       285       mov   A,#1fH         ;Load row 6 data
04C1 1200FA     286       lcall ?WriteData   ;Send the data
04C4 7400       287       mov   A,#00H         ;Load row 7 data
04C6 11FA       288       acall ?WriteData   ;Send the data
04C8 7404       289       mov   A,#04H         ;Load row 8 data
04CA 1200FA     290       lcall ?WriteData   ;Send the data
04CD 22         291       ret                  ;Return from routine
04CE            292   
04CE            293   ;---------------------------------;
04CE            294   ; Routine to initialize the ISR   ;
04CE            295   ; for timer 0                     ;
04CE            296   ;---------------------------------;
04CE            297   Timer0_Init:
04CE 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04D1 E589       299            mov a, TMOD
04D3 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04D5 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04D7 F589       302            mov TMOD, a
04D9 758CF0     303            mov TH0, #high(TIMER0_RELOAD)
04DC 758A2C     304            mov TL0, #low(TIMER0_RELOAD)
04DF            305            ; Enable the timer and interrupts
04DF D2A9       306       setb ET0  ; Enable timer 0 interrupt
04E1 D28C       307       setb TR0  ; Start timer 0
04E3 22         308            ret
04E4            309   
04E4            310   ;---------------------------------;
04E4            311   ; ISR for timer 0.  Set to execute;
04E4            312   ; every 1/4096Hz to generate a    ;
04E4            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04E4            314   ;---------------------------------;
04E4            315   Timer0_ISR:
04E4            316            ;clr TF0  ; According to the data sheet this is done for us already.
04E4            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04E4 C28C       318            clr TR0
04E6 854D8C     319            mov TH0, Melody_Reload+1
04E9 854C8A     320            mov TL0, Melody_Reload+0
04EC D28C       321            setb TR0
04EE B297       322            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04F0 32         323            reti
04F1            324   
04F1            325   ;---------------------------------;
04F1            326   ; Routine to initialize the ISR   ;
04F1            327   ; for timer 2                     ;
04F1            328   ;---------------------------------;
04F1            329   Timer2_Init:
04F1 75C800     330            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04F4 75CDD7     331            mov TH2, #high(TIMER2_RELOAD)
04F7 75CC79     332            mov TL2, #low(TIMER2_RELOAD)
04FA            333            ; Set the reload value
04FA 75C9A0     334            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04FD 75CBD7     335            mov RCMP2H, #high(TIMER2_RELOAD)
0500 75CA79     336            mov RCMP2L, #low(TIMER2_RELOAD)
0503            337            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0503 E4         338            clr a
0504 F53D       339            mov Count1ms+0, a
0506 F53E       340            mov Count1ms+1, a
0508 754700     341            mov pwm, #0
050B            342            ; Enable the timer and interrupts
050B 439B80     343            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
050E D2CA       344       setb TR2  ; Enable timer 2
0510 22         345            ret
0511            346   
0511            347   ;---------------------------------;
0511            348   ; ISR for timer 2 ;
0511            349   ;---------------------------------;
0511            350   Timer2_ISR:
0511 C2CF       351            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0513 B284       352            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0515            353                    
0515            354            ; The two registers used in the ISR must be saved in the stack
0515 C0D0       355            push psw
0517 C0E0       356            push acc
0519 0546       357            inc pwm_counter
051B C3         358            clr c
051C E547       359            mov a, pwm
051E 9546       360            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0520 B3         361            cpl c
0521 9290       362            mov PWM_OUT, c
0523 E546       363            mov a, pwm_counter
0525            364   
0525 B46407     365            cjne a, #100, Timer2_ISR_done
0528 754600     366            mov pwm_counter, #0
052B 053F       367            inc seconds
052D D201       368            setb s_flag
052F            369            
052F            370   Timer2_ISR_done:
052F            371   
052F D0E0       372            pop acc
0531 D0D0       373            pop psw
0533 32         374            reti
0534            375   
0534            376   
0534            377   ;---------------------------------;
0534            378   ; Temperature senseor function    ;
0534            379   ;---------------------------------;
0534            380   Init_All:
0534            381            ; Configure all the pins for biderectional I/O
0534 75AC00     382            mov     P3M1, #0x00
0537 75AD00     383            mov     P3M2, #0x00
053A 75B300     384            mov     P1M1, #0x00
053D 75B400     385            mov     P1M2, #0x00
0540 75B100     386            mov     P0M1, #0x00
0543 75B200     387            mov     P0M2, #0x00
0546            388            
0546 438E10     389            orl     CKCON, #0x10 ; CLK is the input for timer 1
0549 438780     390            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
054C 759852     391            mov     SCON, #0x52
054F 53C4DF     392            anl     T3CON, #0b11011111
0552 53890F     393            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0555 438920     394            orl     TMOD, #0x20 ; Timer 1 Mode 2
0558 758D70     395            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
055B D28E       396            setb TR1
055D            397            
055D            398            ; Using timer 0 for delay functions.  Initialize here:
055D            399            ;clr    TR0 ; Stop timer 0
055D 438E08     400            orl     CKCON,#0x08 ; CLK is the input for timer 0
0560 5389F0     401            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0563 438901     402            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0566            403            
0566            404            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0566 43B382     405            orl     P1M1, #0b10000010
0569 53B47D     406            anl     P1M2, #0b01111101
056C            407            
056C            408            ; Initialize and start the ADC:
056C 53E8F0     409            anl ADCCON0, #0xF0
056F 43E807     410            orl ADCCON0, #0x07 ; Select channel 7
0572            411            ; AINDIDS select if some pins are analog inputs or digital I/O:
0572 75F600     412            mov AINDIDS, #0x00 ; Disable all analog inputs
0575 43F681     413            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0578 43E101     414            orl ADCCON1, #0x01 ; Enable ADC
057B            415            
057B 22         416            ret
057C            417   
057C            418   ;---------------------------------;
057C            419   ;         5_pushbuttons function               ;
057C            420   ;---------------------------------;
057C            421   LCD_PB:
057C            422            ; Set variables to 1: 'no push button pressed'
057C D202       423            setb PB0
057E D203       424            setb PB1
0580 D204       425            setb PB2
0582 D205       426            setb PB3
0584 D206       427            setb PB4
0586            428            ; The input pin used to check set to '1'
0586 D295       429            setb P1.5
0588            430            
0588            431            ; Check if any push button is pressed
0588 C280       432            clr P0.0
058A C281       433            clr P0.1
058C C282       434            clr P0.2
058E C283       435            clr P0.3
0590 C293       436            clr P1.3
0592 20954D     437            jb P1.5, LCD_PB_Done
0595            438   
0595            439            ; Debounce
0595 C002       440            push AR2
0597 7A32       440            mov R2, #50
0599 1200B5     440            lcall ?Wait_Milli_Seconds
059C D002       440            pop AR2
059E 209541     441            jb P1.5, LCD_PB_Done
05A1            442   
05A1            443            ; Set the LCD data pins to logic 1
05A1 D280       444            setb P0.0
05A3 D281       445            setb P0.1
05A5 D282       446            setb P0.2
05A7 D283       447            setb P0.3
05A9 D293       448            setb P1.3
05AB            449            
05AB            450            ; Check the push buttons one by one
05AB C293       451            clr P1.3
05AD A295       452            mov c, P1.5
05AF 9206       453            mov PB4, c
05B1 D293       454            setb P1.3
05B3 300636     455            jnb PB4,increment_soak_temp
05B6            456   
05B6 C280       457            clr P0.0
05B8 A295       458            mov c, P1.5
05BA 9205       459            mov PB3, c
05BC D280       460            setb P0.0
05BE 300537     461            jnb PB3, increment_soak_time
05C1            462            
05C1 C281       463            clr P0.1
05C3 A295       464            mov c, P1.5
05C5 9204       465            mov PB2, c
05C7 D281       466            setb P0.1
05C9 300438     467            jnb PB2, increment_reflow_temp
05CC            468            
05CC C282       469            clr P0.2
05CE A295       470            mov c, P1.5
05D0 9203       471            mov PB1, c
05D2 D282       472            setb P0.2
05D4 300339     473            jnb PB1, increment_reflow_time
05D7            474            
05D7 C283       475            clr P0.3
05D9 A295       476            mov c, P1.5
05DB 9202       477            mov PB0, c
05DD D283       478            setb P0.3
05DF 30023A     479            jnb PB0, start_stop
05E2            480   
05E2            481   LCD_PB_Done:
05E2 C002       482            push AR2
05E4 7A19       482            mov R2, #25
05E6 1200B5     482            lcall ?Wait_Milli_Seconds
05E9 D002       482            pop AR2                 
05EB 22         483            ret
05EC            484   
05EC            485   increment_soak_temp:
05EC 0545       486            inc soak_temp
05EE E545       487            mov a, soak_temp
05F0 B4F0EF     488            cjne a, #0xF0, LCD_PB_Done
05F3 754500     489            mov soak_temp, #0x00
05F6 80EA       490            sjmp LCD_PB_Done
05F8            491   increment_soak_time:
05F8 0544       492            inc soak_time
05FA E544       493            mov a, soak_time
05FC B478E3     494            cjne a, #0x78, LCD_PB_Done
05FF 754400     495            mov soak_time, #0x00
0602 80DE       496            sjmp LCD_PB_Done
0604            497   increment_reflow_temp: 
0604 0543       498            inc reflow_temp
0606 E543       499            mov a, reflow_temp
0608 B4F0D7     500            cjne a, #0xF0, LCD_PB_Done
060B 754300     501            mov reflow_temp, #0x00
060E 80D2       502            sjmp LCD_PB_Done
0610            503   increment_reflow_time:
0610 0542       504            inc reflow_time
0612 E542       505            mov a, reflow_time
0614 B44BCB     506            cjne a, #0x4B, LCD_PB_Done
0617 754200     507            mov reflow_time, #0x00
061A 80C6       508            sjmp LCD_PB_Done
061C            509   
061C            510   start_stop:
061C B208       511            cpl start_stop_flag
061E 80C2       512            sjmp LCD_PB_Done
0620            513   
0620            514   ; We can display a number any way we want.  In this case with
0620            515   ; four decimal places.
0620            516   Display_formated_BCD:
0620 C0E0       517            push acc
0622 7404       517            mov a, #4
0624 14         517            dec a
0625 120144     517            lcall ?Set_Cursor_1 ; Select column and row
0628 D0E0       517            pop acc ; display To
062A C000       518            push ar0
062C A83B       518            mov r0, bcd+3
062E 120149     518            lcall ?Display_BCD
0631 D000       518            pop ar0
0633 C000       519            push ar0
0635 A83A       519            mov r0, bcd+2
0637 120149     519            lcall ?Display_BCD
063A D000       519            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
063C            520            
063C            521            ;send the BCD value to the MATLAB script
063C C000       522            push ar0
063E A83B       522            mov r0, bcd+3
0640 120167     522            lcall ?Send_BCD
0643 D000       522            pop ar0
0645 C000       523            push ar0
0647 A83A       523            mov r0, bcd+2
0649 120167     523            lcall ?Send_BCD
064C D000       523            pop ar0
064E 742E       524            mov a, #'.'
0650 12015F     525            lcall putchar
0653 C000       526            push ar0
0655 A839       526            mov r0, bcd+1
0657 120167     526            lcall ?Send_BCD
065A D000       526            pop ar0
065C 740D       527            mov a, #'\r'
065E 12015F     528            lcall putchar
0661 740A       529            mov a, #'\n'
0663 12015F     530            lcall putchar
0666            531            ;Set_Cursor(1, 13)
0666            532            ;Send_Constant_String(#22) ; display Tj=22
0666            533            
0666 C0E0       534            push acc
0668 740E       534            mov a, #14
066A 14         534            dec a
066B 120142     534            lcall ?Set_Cursor_2 ; Select column and row
066E D0E0       534            pop acc
0670 E53F       535            mov a,seconds
0672 120676     536            lcall SendToLCD
0675            537            
0675 22         538            ret
0676            539   
0676            540   SendToLCD:
0676 75F064     541   mov b, #100
0679 84         542   div ab
067A 4430       543   orl a, #0x30 ; Convert hundreds to ASCII
067C 1200FA     544   lcall ?WriteData ; Send to LCD
067F E5F0       545   mov a, b ; Remainder is in register b
0681 75F00A     546   mov b, #10
0684 84         547   div ab
0685 4430       548   orl a, #0x30 ; Convert tens to ASCII
0687 1200FA     549   lcall ?WriteData; Send to LCD
068A E5F0       550   mov a, b
068C 4430       551   orl a, #0x30 ; Convert units to ASCII
068E 1200FA     552   lcall ?WriteData; Send to LCD
0691 22         553   ret
0692            554   
0692            555   ;-------------------------------------------------;
0692            556   ; Display values from the pushbutton to the LCD   ;
0692            557   ;-------------------------------------------------;
0692            558   
0692            559   Display_PushButtons_LCD:
0692 C0E0       560            push acc
0694 7402       560            mov a, #2
0696 14         560            dec a
0697 120142     560            lcall ?Set_Cursor_2 ; Select column and row
069A D0E0       560            pop acc
069C E545       561            mov a, soak_temp
069E 120676     562            lcall SendToLCD
06A1            563            
06A1 C0E0       564            push acc
06A3 7406       564            mov a, #6
06A5 14         564            dec a
06A6 120142     564            lcall ?Set_Cursor_2 ; Select column and row
06A9 D0E0       564            pop acc
06AB E544       565            mov a, soak_time
06AD 120676     566            lcall SendToLCD
06B0            567       
06B0 C0E0       568            push acc
06B2 740A       568            mov a, #10
06B4 14         568            dec a
06B5 120142     568            lcall ?Set_Cursor_2 ; Select column and row
06B8 D0E0       568            pop acc
06BA E543       569       mov a, reflow_temp
06BC 120676     570            lcall SendToLCD
06BF            571       
06BF C0E0       572            push acc
06C1 740E       572            mov a, #14
06C3 14         572            dec a
06C4 120142     572            lcall ?Set_Cursor_2 ; Select column and row
06C7 D0E0       572            pop acc
06C9 E542       573       mov a, reflow_time
06CB 120676     574            lcall SendToLCD
06CE            575            
06CE 22         576            ret
06CF            577   
06CF            578   
06CF            579   ;-------------------------------------------------;
06CF            580   ; Display all values and temperatures to the LCD  ;
06CF            581   ;-------------------------------------------------;
06CF            582   Display_Data:
06CF C2EF       583            clr ADCF
06D1 D2EE       584            setb ADCS ;  ADC start trigger signal
06D3 30EFFD     585       jnb ADCF, $ ; Wait for conversion complete
06D6            586       
06D6            587       ; Read the ADC result and store in [R1, R0]
06D6 E5C3       588       mov a, ADCRH   
06D8 C4         589       swap a
06D9 C0E0       590       push acc
06DB 540F       591       anl a, #0x0f
06DD F9         592       mov R1, a
06DE D0E0       593       pop acc
06E0 54F0       594       anl a, #0xf0
06E2 45C2       595       orl a, ADCRL
06E4 F8         596       mov R0, A
06E5            597       
06E5            598       ; Convert to voltage
06E5 8830       599            mov x+0, R0
06E7 8931       600            mov x+1, R1
06E9            601            ; Pad other bits with zero
06E9 753200     602            mov x+2, #0
06EC 753300     603            mov x+3, #0
06EF            604            
06EF            605            ;lcall div32 ; Get V_out
06EF            606            ; ; Calculate Temp based on V_out
06EF            607            ; Load_y(27300) ; The reference temp K
06EF            608            ; lcall sub32 ; Get Temp*0.01
06EF            609            ; ; Change Temp*0.01 to Temp
06EF            610            ; Load_y(100)
06EF            611            ; lcall mul32
06EF            612   
06EF 75347C     613            mov y+0, #low (50300 % 0x10000) 
06F2 7535C4     613            mov y+1, #high(50300 % 0x10000) 
06F5 753600     613            mov y+2, #low (50300 / 0x10000) 
06F8 753700     613            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
06FB 1202F7     614            lcall mul32 ;multiplying ADC * Vref
06FE 7534FF     615            mov y+0, #low (4095 % 0x10000) 
0701 75350F     615            mov y+1, #high(4095 % 0x10000) 
0704 753600     615            mov y+2, #low (4095 / 0x10000) 
0707 753700     615            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
070A 120384     616            lcall div32 ;now doing (ADC*Vref)/(4095)
070D            617            
070D 7534E8     618            mov y+0, #low (1000 % 0x10000) 
0710 753503     618            mov y+1, #high(1000 % 0x10000) 
0713 753600     618            mov y+2, #low (1000 / 0x10000) 
0716 753700     618            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0719 1202F7     619            lcall mul32 ;multiplying volts
071C            620            
071C 75340A     621            mov y+0, #low (10 % 0x10000) 
071F 753500     621            mov y+1, #high(10 % 0x10000) 
0722 753600     621            mov y+2, #low (10 / 0x10000) 
0725 753700     621            mov y+3, #high(10 / 0x10000) 
0728 1202F7     622            lcall mul32
072B            623            
072B            624            ;convert to temperature
072B 7534D0     625            mov y+0, #low (21200 % 0x10000) 
072E 753552     625            mov y+1, #high(21200 % 0x10000) 
0731 753600     625            mov y+2, #low (21200 / 0x10000) 
0734 753700     625            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0737 120384     626            lcall div32 
073A 753429     627            mov y+0, #low (41 % 0x10000) 
073D 753500     627            mov y+1, #high(41 % 0x10000) 
0740 753600     627            mov y+2, #low (41 / 0x10000) 
0743 753700     627            mov y+3, #high(41 / 0x10000) ;load y = 41
0746 120384     628            lcall div32 ;divide by 41
0749            629            
0749 753410     630            mov y+0, #low (10000 % 0x10000) 
074C 753527     630            mov y+1, #high(10000 % 0x10000) 
074F 753600     630            mov y+2, #low (10000 / 0x10000) 
0752 753700     630            mov y+3, #high(10000 / 0x10000) 
0755 1202F7     631            lcall mul32
0758            632            
0758 753460     633            mov y+0, #low (220000 % 0x10000) 
075B 75355B     633            mov y+1, #high(220000 % 0x10000) 
075E 753603     633            mov y+2, #low (220000 / 0x10000) 
0761 753700     633            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0764 120242     634            lcall add32
0767            635            
0767 7534A0     636            mov y+0, #low (2500000 % 0x10000) 
076A 753525     636            mov y+1, #high(2500000 % 0x10000) 
076D 753626     636            mov y+2, #low (2500000 / 0x10000) 
0770 753700     636            mov y+3, #high(2500000 / 0x10000) 
0773 1202E3     637            lcall x_gteq_y
0776            638   
0776 20001A     639            jb mf, too_fucking_hot
0779            640   
0779            641   ; Convert to BCD and display
0779 12017D     642            lcall hex2bcd
077C 120620     643            lcall Display_formated_BCD
077F 22         644            ret
0780            645   returned:
0780 12017D     646            lcall hex2bcd
0783 C0E0       647            push acc
0785 740E       647            mov a, #14
0787 14         647            dec a
0788 120142     647            lcall ?Set_Cursor_2 ; Select column and row
078B D0E0       647            pop acc
078D E53F       648            mov a,seconds
078F 120676     649            lcall SendToLCD
0792            650   
0792 22         651            ret
0793            652            
0793            653   too_fucking_hot:
0793 C0E0       654            push acc
0795 7404       654            mov a, #4
0797 14         654            dec a
0798 120144     654            lcall ?Set_Cursor_1 ; Select column and row
079B D0E0       654            pop acc
079D C083       655            push dph
079F C082       655            push dpl
07A1 C0E0       655            push acc
07A3 9000A7     655            mov dptr, #Hot_temp
07A6 120137     655            lcall ?Send_Constant_String
07A9 D0E0       655            pop acc
07AB D082       655            pop dpl
07AD D083       655            pop dph
07AF 1203ED     656            lcall fire
07B2 7486       657            mov a, #0x86
07B4 1200FF     658            lcall ?WriteCommand
07B7 7400       659            mov a, #0H
07B9 1200FA     660            lcall ?WriteData
07BC            661            
07BC 80C2       662            sjmp returned
07BE            663   
07BE            664   ;-----------------------------------------------------------------------------;
07BE            665   ;Grabs the value in register a and then compares it to the current temperature;
07BE            666   ;-----------------------------------------------------------------------------;
07BE            667   
07BE            668   Display_temp:
07BE C2EF       669            clr ADCF
07C0 D2EE       670            setb ADCS ;  ADC start trigger signal
07C2 30EFFD     671       jnb ADCF, $ ; Wait for conversion complete
07C5            672       
07C5            673       ; Read the ADC result and store in [R1, R0]
07C5 E5C3       674       mov a, ADCRH   
07C7 C4         675       swap a
07C8 C0E0       676       push acc
07CA 540F       677       anl a, #0x0f
07CC F9         678       mov R1, a
07CD D0E0       679       pop acc
07CF 54F0       680       anl a, #0xf0
07D1 45C2       681       orl a, ADCRL
07D3 F8         682       mov R0, A
07D4            683       
07D4            684       ; Convert to voltage
07D4 8830       685            mov x+0, R0
07D6 8931       686            mov x+1, R1
07D8            687            ; Pad other bits with zero
07D8 753200     688            mov x+2, #0
07DB 753300     689            mov x+3, #0
07DE            690            
07DE            691            ;lcall div32 ; Get V_out
07DE            692            ; ; Calculate Temp based on V_out
07DE            693            ; Load_y(27300) ; The reference temp K
07DE            694            ; lcall sub32 ; Get Temp*0.01
07DE            695            ; ; Change Temp*0.01 to Temp
07DE            696            ; Load_y(100)
07DE            697            ; lcall mul32
07DE            698   
07DE 75347C     699            mov y+0, #low (50300 % 0x10000) 
07E1 7535C4     699            mov y+1, #high(50300 % 0x10000) 
07E4 753600     699            mov y+2, #low (50300 / 0x10000) 
07E7 753700     699            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
07EA 1202F7     700            lcall mul32 ;multiplying ADC * Vref
07ED 7534FF     701            mov y+0, #low (4095 % 0x10000) 
07F0 75350F     701            mov y+1, #high(4095 % 0x10000) 
07F3 753600     701            mov y+2, #low (4095 / 0x10000) 
07F6 753700     701            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07F9 120384     702            lcall div32 ;now doing (ADC*Vref)/(4095)
07FC            703            
07FC 7534E8     704            mov y+0, #low (1000 % 0x10000) 
07FF 753503     704            mov y+1, #high(1000 % 0x10000) 
0802 753600     704            mov y+2, #low (1000 / 0x10000) 
0805 753700     704            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0808 1202F7     705            lcall mul32 ;multiplying volts
080B            706            
080B 75340A     707            mov y+0, #low (10 % 0x10000) 
080E 753500     707            mov y+1, #high(10 % 0x10000) 
0811 753600     707            mov y+2, #low (10 / 0x10000) 
0814 753700     707            mov y+3, #high(10 / 0x10000) 
0817 1202F7     708            lcall mul32
081A            709            
081A            710            ;convert to temperature
081A 7534D0     711            mov y+0, #low (21200 % 0x10000) 
081D 753552     711            mov y+1, #high(21200 % 0x10000) 
0820 753600     711            mov y+2, #low (21200 / 0x10000) 
0823 753700     711            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0826 120384     712            lcall div32 
0829 753429     713            mov y+0, #low (41 % 0x10000) 
082C 753500     713            mov y+1, #high(41 % 0x10000) 
082F 753600     713            mov y+2, #low (41 / 0x10000) 
0832 753700     713            mov y+3, #high(41 / 0x10000) ;load y = 41
0835 120384     714            lcall div32 ;divide by 41
0838            715            
0838 753410     716            mov y+0, #low (10000 % 0x10000) 
083B 753527     716            mov y+1, #high(10000 % 0x10000) 
083E 753600     716            mov y+2, #low (10000 / 0x10000) 
0841 753700     716            mov y+3, #high(10000 / 0x10000) 
0844 1202F7     717            lcall mul32
0847            718            
0847 753460     719            mov y+0, #low (220000 % 0x10000) 
084A 75355B     719            mov y+1, #high(220000 % 0x10000) 
084D 753603     719            mov y+2, #low (220000 / 0x10000) 
0850 753700     719            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0853 120242     720            lcall add32
0856            721   
0856            722   ; Convert to BCD and display
0856 12017D     723            lcall hex2bcd
0859 12085D     724            lcall Display_temperature
085C            725   
085C 22         726            ret
085D            727   
085D            728   Display_temperature:
085D C0E0       729            push acc
085F 7404       729            mov a, #4
0861 14         729            dec a
0862 120144     729            lcall ?Set_Cursor_1 ; Select column and row
0865 D0E0       729            pop acc ; display To
0867 C000       730            push ar0
0869 A83B       730            mov r0, bcd+3
086B 120149     730            lcall ?Display_BCD
086E D000       730            pop ar0
0870 C000       731            push ar0
0872 A83A       731            mov r0, bcd+2
0874 120149     731            lcall ?Display_BCD
0877 D000       731            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
0879 22         732            ret
087A            733   
087A            734   Compare_temp:
087A 853A48     735            mov temp+0, bcd+2
087D 853B49     736            mov temp+1, bcd+3
0880 854838     737            mov bcd+0, temp+0
0883 854939     738            mov bcd+1, temp+1
0886 753A00     739            mov bcd+2,#0
0889 753B00     740            mov bcd+3,#0
088C 753C00     741            mov bcd+4,#0
088F            742            
088F 120206     743            lcall bcd2hex
0892            744            
0892 853034     745            mov y+0,x+0
0895 853135     746            mov y+1,x+1
0898 853236     747            mov y+2,x+2
089B 853337     748            mov y+3,x+3
089E            749            
089E F530       750            mov x+0,a
08A0 753100     751            mov x+1,#0
08A3 753200     752            mov x+2,#0
08A6 753300     753            mov x+3,#0
08A9            754            
08A9 12017D     755            lcall hex2bcd
08AC 1202ED     756            lcall x_lteq_y
08AF            757   
08AF 22         758            ret
08B0            759   
08B0            760   check_stop:
08B0 D206       761            setb PB4
08B2            762            ; The input pin used to check set to '1'
08B2 D295       763            setb P1.5
08B4 C283       764            clr P0.3
08B6 209519     765            jb P1.5, stop_PB_Done
08B9            766            ; Debounce
08B9 C002       767            push AR2
08BB 7A32       767            mov R2, #50
08BD 1200B5     767            lcall ?Wait_Milli_Seconds
08C0 D002       767            pop AR2
08C2 20950D     768            jb P1.5, stop_PB_Done
08C5 D283       769            setb P0.3
08C7 C283       770            clr P0.3
08C9 A295       771            mov c, P1.5
08CB 9202       772            mov PB0, c
08CD D283       773            setb P0.3
08CF 300201     774            jnb PB0, start_stop_timer
08D2            775   
08D2            776   stop_PB_Done:
08D2 22         777            ret
08D3            778   start_stop_timer:
08D3 B208       779            cpl start_stop_flag
08D5 80FB       780            sjmp stop_PB_Done
08D7            781   
08D7            782   
08D7            783   Display_special_char1:
08D7 120474     784            lcall heart
08DA 7481       785            mov a, #0x81
08DC 1200FF     786            lcall ?WriteCommand
08DF 7403       787            mov a, #3H
08E1 1200FA     788            lcall ?WriteData
08E4            789   
08E4 120447     790            lcall eighth
08E7 74C4       791            mov a, #0xC4
08E9 1200FF     792            lcall ?WriteCommand
08EC 7402       793            mov a, #2H
08EE 1200FA     794            lcall ?WriteData
08F1            795   
08F1 1204A1     796            lcall bell
08F4 7487       797            mov a, #0x87
08F6 1200FF     798            lcall ?WriteCommand
08F9 7404       799            mov a, #4H
08FB 1200FA     800            lcall ?WriteData
08FE            801   
08FE 12041A     802            lcall double_eighth
0901 74CA       803            mov a, #0xCA
0903 1200FF     804            lcall ?WriteCommand
0906 7401       805            mov a, #1H
0908 1200FA     806            lcall ?WriteData
090B            807   
090B 120474     808            lcall heart
090E 748D       809            mov a, #0x8D
0910 1200FF     810            lcall ?WriteCommand
0913 7403       811            mov a, #3H
0915 1200FA     812            lcall ?WriteData
0918 32         813            reti
0919            814            
0919            815   Display_special_char2:
0919 120474     816            lcall heart
091C 74C0       817            mov a, #0xC0
091E 1200FF     818            lcall ?WriteCommand
0921 7403       819            mov a, #3H
0923 1200FA     820            lcall ?WriteData
0926            821   
0926 120447     822            lcall eighth
0929 7483       823            mov a, #0x83
092B 1200FF     824            lcall ?WriteCommand
092E 7402       825            mov a, #2H
0930 1200FA     826            lcall ?WriteData
0933            827   
0933 1204A1     828            lcall bell
0936 74C7       829            mov a, #0xC7
0938 1200FF     830            lcall ?WriteCommand
093B 7404       831            mov a, #4H
093D 1200FA     832            lcall ?WriteData
0940            833   
0940 12041A     834            lcall double_eighth
0943 748B       835            mov a, #0x8B
0945 1200FF     836            lcall ?WriteCommand
0948 7401       837            mov a, #1H
094A 1200FA     838            lcall ?WriteData
094D            839   
094D 120474     840            lcall heart
0950 74CE       841            mov a, #0xCE
0952 1200FF     842            lcall ?WriteCommand
0955 7403       843            mov a, #3H
0957 1200FA     844            lcall ?WriteData
095A 32         845            reti
095B            846   
095B            847   clear_screen_func:
095B            848       
095B C0E0       849            push acc
095D 7401       849            mov a, #1
095F 14         849            dec a
0960 120144     849            lcall ?Set_Cursor_1 ; Select column and row
0963 D0E0       849            pop acc
0965 C083       850            push dph
0967 C082       850            push dpl
0969 C0E0       850            push acc
096B 900096     850            mov dptr, #clear_screen
096E 120137     850            lcall ?Send_Constant_String
0971 D0E0       850            pop acc
0973 D082       850            pop dpl
0975 D083       850            pop dph
0977 C0E0       851            push acc
0979 7401       851            mov a, #1
097B 14         851            dec a
097C 120142     851            lcall ?Set_Cursor_2 ; Select column and row
097F D0E0       851            pop acc
0981 C083       852            push dph
0983 C082       852            push dpl
0985 C0E0       852            push acc
0987 900096     852            mov dptr, #clear_screen
098A 120137     852            lcall ?Send_Constant_String
098D D0E0       852            pop acc
098F D082       852            pop dpl
0991 D083       852            pop dph
0993 32         853       reti
0994            854       
0994            855   main:
0994 75817F     856            mov sp, #0x7f
0997 75B100     857       mov P0M1, #0x00
099A 75B200     858       mov P0M2, #0x00
099D 75B300     859       mov P1M1, #0x00
09A0 75B400     860       mov P1M2, #0x00
09A3 75AD00     861       mov P3M2, #0x00
09A6 75AD00     862       mov P3M2, #0x00
09A9            863       
09A9 120534     864            lcall Init_All
09AC 120104     865       lcall LCD_4BIT
09AF 1204CE     866            lcall Timer0_Init
09B2 1204F1     867       lcall Timer2_Init
09B5            868            
09B5 D2AF       869       setb EA   ; Enable Global interrupts
09B7            870       ; initial messages in LCD
09B7 C0E0       871            push acc
09B9 7401       871            mov a, #1
09BB 14         871            dec a
09BC 120144     871            lcall ?Set_Cursor_1 ; Select column and row
09BF D0E0       871            pop acc
09C1 C083       872            push dph
09C3 C082       872            push dpl
09C5 C0E0       872            push acc
09C7 90002E     872            mov dptr, #To_Message
09CA 120137     872            lcall ?Send_Constant_String
09CD D0E0       872            pop acc
09CF D082       872            pop dpl
09D1 D083       872            pop dph
09D3 C0E0       873            push acc
09D5 7401       873            mov a, #1
09D7 14         873            dec a
09D8 120142     873            lcall ?Set_Cursor_2 ; Select column and row
09DB D0E0       873            pop acc
09DD C083       874            push dph
09DF C082       874            push dpl
09E1 C0E0       874            push acc
09E3 90003F     874            mov dptr, #Time_temp_display
09E6 120137     874            lcall ?Send_Constant_String
09E9 D0E0       874            pop acc
09EB D082       874            pop dpl
09ED D083       874            pop dph
09EF 754B00     875       mov FSM_state,#0
09F2 753F00     876            mov seconds, #0x00
09F5 75458C     877            mov soak_temp, #0x8C ;140
09F8 75443C     878            mov soak_time, #0x3C ; 60
09FB 7543E6     879            mov reflow_temp, #0xE6 ; 230
09FE 75421E     880            mov reflow_time, #0x1E ; 30
0A01 753800     881            mov bcd,#0
0A04 D2CA       882            setb TR2
0A06            883            
0A06 C208       884            clr start_stop_flag
0A08 C207       885            clr FSM_start_flag
0A0A            886       
0A0A            887   ;---------------------------------;
0A0A            888   ;                FSM     funtion                               ;
0A0A            889   ;---------------------------------;
0A0A            890   FSM:
0A0A E54B       891       mov a, FSM_state
0A0C            892   FSM_state0: ;initial state
0A0C B40036     893       cjne a, #0, FSM_state1
0A0F 754700     894       mov pwm, #0 ; power variable
0A12 12057C     895            lcall LCD_PB ; calls and checks the pushbuttons
0A15 120692     896            lcall Display_PushButtons_LCD ;Displays values in pushbuttons
0A18 1207BE     897            lcall Display_temp
0A1B 300824     898       jnb start_stop_flag, FSM_state0_done
0A1E D207       899       setb FSM_start_flag
0A20 753F00     900       mov seconds, #0x00     ; set time to 0
0A23 754B01     901       mov FSM_state, #1   ; set FSM_state to 1, next state is state1
0A26 C0E0       902            push acc
0A28 7401       902            mov a, #1
0A2A 14         902            dec a
0A2B 120142     902            lcall ?Set_Cursor_2 ; Select column and row
0A2E D0E0       902            pop acc
0A30 C083       903            push dph
0A32 C082       903            push dpl
0A34 C0E0       903            push acc
0A36 900050     903            mov dptr, #Ramp_to_soak
0A39 120137     903            lcall ?Send_Constant_String
0A3C D0E0       903            pop acc
0A3E D082       903            pop dpl
0A40 D083       903            pop dph
0A42            904   
0A42            905   
0A42            906   FSM_state0_done:
0A42 020A0A     907       ljmp FSM   ;jump back to FSM and reload FSM_state to a
0A45            908   
0A45            909   FSM_state1: ;ramp to soak
0A45 B4014D     910       cjne a, #1, FSM_state2
0A48 754764     911       mov pwm, #100
0A4B C3         912       clr c
0A4C 1208B0     913            lcall check_stop
0A4F 300834     914       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0A52 743C       915       mov a, #0x3C
0A54 953F       916       subb a, seconds
0A56 401A       917       jc abort
0A58            918   continue:
0A58 C3         919       clr c   ; ! i don't know what is c
0A59 300113     920            jnb s_flag, FSM_state1_done
0A5C C201       921            clr s_flag
0A5E 1206CF     922            lcall Display_Data
0A61 E545       923            mov a, soak_temp    ; set a to soak temp
0A63 12087A     924            lcall Compare_temp
0A66 300006     925       jnb mf, FSM_state1_done
0A69 753F00     926       mov seconds, #0x00     ; set time to 0
0A6C 754B02     927       mov FSM_state, #2
0A6F            928   FSM_state1_done:
0A6F 020A0A     929       ljmp FSM
0A72            930   abort:
0A72 7432       931       mov a, #0x32  ; set a to 50 degree
0A74 3001F8     932            jnb s_flag, FSM_state1_done
0A77 1206CF     933            lcall Display_Data
0A7A 12087A     934            lcall Compare_temp
0A7D 2000D8     935            jb mf, continue ; if temp is larger then 50 degree, go back to continue
0A80 754B00     936       mov FSM_state, #0   ; abort the FSM
0A83 020994     937            ljmp main
0A86            938   
0A86            939   stop_state:
0A86 C2CA       940       clr TR2
0A88 300805     941       jnb start_stop_flag, stop
0A8B D2CA       942            setb TR2
0A8D 020A0A     943            ljmp FSM
0A90            944   
0A90            945   stop:
0A90 1208B0     946            lcall check_stop
0A93 80F1       947       sjmp stop_state
0A95            948   
0A95            949   FSM_state2: ;preheat/soak
0A95 B4023D     950       cjne a, #2, FSM_state3
0A98 754714     951       mov pwm, #20
0A9B C0E0       952            push acc
0A9D 7401       952            mov a, #1
0A9F 14         952            dec a
0AA0 120142     952            lcall ?Set_Cursor_2 ; Select column and row
0AA3 D0E0       952            pop acc
0AA5 C083       953            push dph
0AA7 C082       953            push dpl
0AA9 C0E0       953            push acc
0AAB 90005E     953            mov dptr, #Soak_display
0AAE 120137     953            lcall ?Send_Constant_String
0AB1 D0E0       953            pop acc
0AB3 D082       953            pop dpl
0AB5 D083       953            pop dph
0AB7 C3         954       clr c   ; ! i don't know what is c 
0AB8 300117     955            jnb s_flag, FSM_state2_done
0ABB C201       956            clr s_flag
0ABD 1206CF     957            lcall Display_Data
0AC0 1208B0     958            lcall check_stop
0AC3 3008C0     959       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0AC6 E544       960            mov a, soak_time    ; set a to soak time
0AC8 953F       961       subb a, seconds    ; temp is our currect sec
0ACA 5006       962       jnc FSM_state2_done
0ACC 753F00     963       mov seconds, #0x00     ; set time to 0
0ACF 754B03     964       mov FSM_state, #3
0AD2            965   FSM_state2_done:
0AD2 020A0A     966       ljmp FSM
0AD5            967   
0AD5            968   FSM_state3: ;ramp to peak
0AD5 B40342     969       cjne a, #3, FSM_state4
0AD8 754764     970       mov pwm, #100
0ADB C0E0       971            push acc
0ADD 7401       971            mov a, #1
0ADF 14         971            dec a
0AE0 120142     971            lcall ?Set_Cursor_2 ; Select column and row
0AE3 D0E0       971            pop acc
0AE5 C083       972            push dph
0AE7 C082       972            push dpl
0AE9 C0E0       972            push acc
0AEB 90006C     972            mov dptr, #Ramp_to_peak
0AEE 120137     972            lcall ?Send_Constant_String
0AF1 D0E0       972            pop acc
0AF3 D082       972            pop dpl
0AF5 D083       972            pop dph
0AF7 C3         973       clr c   ; ! i don't know what is c 
0AF8 1208B0     974            lcall check_stop
0AFB 300888     975       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0AFE 300113     976            jnb s_flag, FSM_state3_done
0B01 C201       977            clr s_flag
0B03 1206CF     978            lcall Display_Data
0B06 E543       979            mov a, reflow_temp    ; set a to reflow temp
0B08 12087A     980            lcall Compare_temp
0B0B 300006     981       jnb mf, FSM_state3_done
0B0E 753F00     982       mov seconds, #0x00     ; set time to 0
0B11 754B04     983       mov FSM_state, #4
0B14            984   FSM_state3_done:
0B14 020A0A     985       ljmp FSM
0B17            986       
0B17            987   intermediate_stop_jump:
0B17 020A86     988            ljmp stop_state
0B1A            989   
0B1A            990   FSM_state4:;reflow
0B1A B4043D     991       cjne a, #4, FSM_state5
0B1D 754714     992       mov pwm, #20
0B20 C0E0       993            push acc
0B22 7401       993            mov a, #1
0B24 14         993            dec a
0B25 120142     993            lcall ?Set_Cursor_2 ; Select column and row
0B28 D0E0       993            pop acc
0B2A C083       994            push dph
0B2C C082       994            push dpl
0B2E C0E0       994            push acc
0B30 90007A     994            mov dptr, #Reflow_display
0B33 120137     994            lcall ?Send_Constant_String
0B36 D0E0       994            pop acc
0B38 D082       994            pop dpl
0B3A D083       994            pop dph
0B3C C3         995       clr c   ; ! i don't know what is c 
0B3D 300117     996            jnb s_flag, FSM_state4_done
0B40 C201       997            clr s_flag
0B42 1206CF     998            lcall Display_Data
0B45 1208B0     999            lcall check_stop
0B48 3008CC    1000       jnb start_stop_flag, intermediate_stop_jump; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B4B E542      1001            mov a, reflow_time    ; set a to reflow time
0B4D 953F      1002       subb a, seconds    ; temp is our currect sec
0B4F 5006      1003       jnc FSM_state4_done
0B51 753F00    1004       mov seconds, #0x00     ; set time to 0
0B54 754B05    1005       mov FSM_state, #5
0B57           1006   FSM_state4_done:
0B57 020A0A    1007       ljmp FSM
0B5A           1008   
0B5A           1009   FSM_state5:;cooling
0B5A B40542    1010       cjne a, #5, FSM_state6
0B5D 754700    1011       mov pwm, #0
0B60           1012       
0B60 C0E0      1013            push acc
0B62 7401      1013            mov a, #1
0B64 14        1013            dec a
0B65 120142    1013            lcall ?Set_Cursor_2 ; Select column and row
0B68 D0E0      1013            pop acc
0B6A C083      1014            push dph
0B6C C082      1014            push dpl
0B6E C0E0      1014            push acc
0B70 900088    1014            mov dptr, #Cooling_display
0B73 120137    1014            lcall ?Send_Constant_String
0B76 D0E0      1014            pop acc
0B78 D082      1014            pop dpl
0B7A D083      1014            pop dph
0B7C C3        1015       clr c
0B7D 1208B0    1016            lcall check_stop
0B80 300894    1017       jnb start_stop_flag, intermediate_stop_jump ; checks the flag if 0, then means stop was pressed, if 1 keep on going 
0B83 300113    1018            jnb s_flag, FSM_state5_done
0B86 C201      1019            clr s_flag
0B88 1206CF    1020            lcall Display_Data
0B8B 743C      1021            mov a, #0x3C    ; set a to 60
0B8D 12087A    1022            lcall Compare_temp
0B90           1023   
0B90 200006    1024       jb mf, FSM_state5_done
0B93 753F00    1025       mov seconds, #0x00     ; set time to 0
0B96 754B06    1026       mov FSM_state, #6
0B99           1027   FSM_state5_done: 
0B99 020A0A    1028       ljmp FSM
0B9C           1029   
0B9C           1030   intermediate_state_0:
0B9C 020A0A    1031            ljmp FSM
0B9F           1032            
0B9F           1033   FSM_state6:
0B9F B406FA    1034            cjne a, #6, intermediate_state_0
0BA2 C2CA      1035            clr TR2
0BA4 D2A9      1036            setb ET0
0BA6           1037   
0BA6 1208D7    1038       lcall Display_special_char1
0BA9 C28C      1039       clr TR0 
0BAB 754D7C    1040            mov Melody_Reload+1, #high(B3_KEY)
0BAE 754CBD    1041            mov Melody_Reload+0, #low(B3_KEY)
0BB1 D28C      1042       setb TR0
0BB3 C002      1043            push AR2
0BB5 7A78      1043            mov R2, #120
0BB7 1200B5    1043            lcall ?Wait_Milli_Seconds
0BBA D002      1043            pop AR2
0BBC           1044   
0BBC 754D6C    1045            mov Melody_Reload+1, #high(A3_KEY)
0BBF 754CA1    1046            mov Melody_Reload+0, #low(A3_KEY)
0BC2 C002      1047            push AR2
0BC4 7A78      1047            mov R2, #120
0BC6 1200B5    1047            lcall ?Wait_Milli_Seconds
0BC9 D002      1047            pop AR2
0BCB           1048   
0BCB 754D63    1049            mov Melody_Reload+1, #high(Gs3_KEY)
0BCE 754CC0    1050            mov Melody_Reload+0, #low(Gs3_KEY)
0BD1 C002      1051            push AR2
0BD3 7A78      1051            mov R2, #120
0BD5 1200B5    1051            lcall ?Wait_Milli_Seconds
0BD8 D002      1051            pop AR2
0BDA           1052            
0BDA 754D6C    1053            mov Melody_Reload+1, #high(A3_KEY)
0BDD 754CA1    1054            mov Melody_Reload+0, #low(A3_KEY)
0BE0 C002      1055            push AR2
0BE2 7A78      1055            mov R2, #120
0BE4 1200B5    1055            lcall ?Wait_Milli_Seconds
0BE7 D002      1055            pop AR2
0BE9           1056   
0BE9 12095B    1057            lcall clear_screen_func
0BEC           1058   ;----------------------------------------
0BEC 120919    1059            lcall Display_special_char2
0BEF           1060   
0BEF 754D84    1061            mov Melody_Reload+1, #high(C4_KEY)
0BF2 754C05    1062            mov Melody_Reload+0, #low(C4_KEY)
0BF5 C002      1063            push AR2
0BF7 7AF0      1063            mov R2, #240
0BF9 1200B5    1063            lcall ?Wait_Milli_Seconds
0BFC D002      1063            pop AR2
0BFE C002      1064            push AR2
0C00 7AF0      1064            mov R2, #240
0C02 1200B5    1064            lcall ?Wait_Milli_Seconds
0C05 D002      1064            pop AR2
0C07           1065            
0C07 12095B    1066       lcall clear_screen_func
0C0A 1208D7    1067       lcall Display_special_char1
0C0D           1068       
0C0D 754D84    1069            mov Melody_Reload+1, #high(D4_KEY)
0C10 754C05    1070            mov Melody_Reload+0, #low(D4_KEY)
0C13 C002      1071            push AR2
0C15 7A78      1071            mov R2, #120
0C17 1200B5    1071            lcall ?Wait_Milli_Seconds
0C1A D002      1071            pop AR2
0C1C           1072   
0C1C 754D84    1073            mov Melody_Reload+1, #high(C4_KEY)
0C1F 754C05    1074            mov Melody_Reload+0, #low(C4_KEY)
0C22 C002      1075            push AR2
0C24 7A78      1075            mov R2, #120
0C26 1200B5    1075            lcall ?Wait_Milli_Seconds
0C29 D002      1075            pop AR2
0C2B           1076   
0C2B 754DBE    1077            mov Melody_Reload+1, #high(B4_KEY)
0C2E 754C5F    1078            mov Melody_Reload+0, #low(B4_KEY)
0C31 C002      1079            push AR2
0C33 7A78      1079            mov R2, #120
0C35 1200B5    1079            lcall ?Wait_Milli_Seconds
0C38 D002      1079            pop AR2
0C3A           1080   
0C3A 754DC2    1081            mov Melody_Reload+1, #high(C5_KEY)
0C3D 754C12    1082            mov Melody_Reload+0, #low(C5_KEY)
0C40 C002      1083            push AR2
0C42 7A78      1083            mov R2, #120
0C44 1200B5    1083            lcall ?Wait_Milli_Seconds
0C47 D002      1083            pop AR2
0C49           1084   
0C49 12095B    1085            lcall clear_screen_func
0C4C 120919    1086       lcall Display_special_char2
0C4F           1087            
0C4F 754DCE    1088            mov Melody_Reload+1, #high(E5_KEY)
0C52 754CD7    1089            mov Melody_Reload+0, #low(E5_KEY)
0C55 C002      1090            push AR2
0C57 7AF0      1090            mov R2, #240
0C59 1200B5    1090            lcall ?Wait_Milli_Seconds
0C5C D002      1090            pop AR2
0C5E C002      1091            push AR2
0C60 7AF0      1091            mov R2, #240
0C62 1200B5    1091            lcall ?Wait_Milli_Seconds
0C65 D002      1091            pop AR2
0C67           1092   
0C67 12095B    1093            lcall clear_screen_func
0C6A 1208D7    1094       lcall Display_special_char1
0C6D           1095   ;-----------------------------------------
0C6D 754DD1    1096            mov Melody_Reload+1, #high(F5_KEY)
0C70 754C96    1097            mov Melody_Reload+0, #low(F5_KEY)
0C73 C002      1098            push AR2
0C75 7A78      1098            mov R2, #120
0C77 1200B5    1098            lcall ?Wait_Milli_Seconds
0C7A D002      1098            pop AR2
0C7C           1099   
0C7C 754DCE    1100            mov Melody_Reload+1, #high(E5_KEY)
0C7F 754CD7    1101            mov Melody_Reload+0, #low(E5_KEY)
0C82 C002      1102            push AR2
0C84 7A78      1102            mov R2, #120
0C86 1200B5    1102            lcall ?Wait_Milli_Seconds
0C89 D002      1102            pop AR2
0C8B           1103   
0C8B 754DCB    1104            mov Melody_Reload+1, #high(Ds5_KEY)
0C8E 754CEB    1105            mov Melody_Reload+0, #low(Ds5_KEY)
0C91 C002      1106            push AR2
0C93 7A78      1106            mov R2, #120
0C95 1200B5    1106            lcall ?Wait_Milli_Seconds
0C98 D002      1106            pop AR2
0C9A           1107   
0C9A 754DCE    1108            mov Melody_Reload+1, #high(E5_KEY)
0C9D 754CD7    1109            mov Melody_Reload+0, #low(E5_KEY)
0CA0 C002      1110            push AR2
0CA2 7A78      1110            mov R2, #120
0CA4 1200B5    1110            lcall ?Wait_Milli_Seconds
0CA7 D002      1110            pop AR2
0CA9           1111   
0CA9 12095B    1112            lcall clear_screen_func
0CAC 120919    1113       lcall Display_special_char2
0CAF           1114   ;-----------------------------------------
0CAF 754DDF    1115            mov Melody_Reload+1, #high(B5_KEY)
0CB2 754C30    1116            mov Melody_Reload+0, #low(B5_KEY)
0CB5 C002      1117            push AR2
0CB7 7A78      1117            mov R2, #120
0CB9 1200B5    1117            lcall ?Wait_Milli_Seconds
0CBC D002      1117            pop AR2
0CBE           1118   
0CBE 754DDB    1119            mov Melody_Reload+1, #high(A5_KEY)
0CC1 754C29    1120            mov Melody_Reload+0, #low(A5_KEY)
0CC4 C002      1121            push AR2
0CC6 7A78      1121            mov R2, #120
0CC8 1200B5    1121            lcall ?Wait_Milli_Seconds
0CCB D002      1121            pop AR2
0CCD           1122   
0CCD 754DD8    1123            mov Melody_Reload+1, #high(Gs5_KEY)
0CD0 754CF7    1124            mov Melody_Reload+0, #low(Gs5_KEY)
0CD3 C002      1125            push AR2
0CD5 7A78      1125            mov R2, #120
0CD7 1200B5    1125            lcall ?Wait_Milli_Seconds
0CDA D002      1125            pop AR2
0CDC           1126   
0CDC 754DDB    1127            mov Melody_Reload+1, #high(A5_KEY)
0CDF 754C29    1128            mov Melody_Reload+0, #low(A5_KEY)
0CE2 C002      1129            push AR2
0CE4 7A78      1129            mov R2, #120
0CE6 1200B5    1129            lcall ?Wait_Milli_Seconds
0CE9 D002      1129            pop AR2
0CEB           1130   
0CEB 12095B    1131            lcall clear_screen_func
0CEE 1208D7    1132       lcall Display_special_char1
0CF1           1133   ;--------------------------------------
0CF1 754DDF    1134            mov Melody_Reload+1, #high(B5_KEY)
0CF4 754C30    1135            mov Melody_Reload+0, #low(B5_KEY)
0CF7 C002      1136            push AR2
0CF9 7A78      1136            mov R2, #120
0CFB 1200B5    1136            lcall ?Wait_Milli_Seconds
0CFE D002      1136            pop AR2
0D00           1137   
0D00 754DDB    1138            mov Melody_Reload+1, #high(A5_KEY)
0D03 754C29    1139            mov Melody_Reload+0, #low(A5_KEY)
0D06 C002      1140            push AR2
0D08 7A78      1140            mov R2, #120
0D0A 1200B5    1140            lcall ?Wait_Milli_Seconds
0D0D D002      1140            pop AR2
0D0F           1141   
0D0F 754DD8    1142            mov Melody_Reload+1, #high(Gs5_KEY)
0D12 754CF7    1143            mov Melody_Reload+0, #low(Gs5_KEY)
0D15 C002      1144            push AR2
0D17 7A78      1144            mov R2, #120
0D19 1200B5    1144            lcall ?Wait_Milli_Seconds
0D1C D002      1144            pop AR2
0D1E           1145   
0D1E 754DDB    1146            mov Melody_Reload+1, #high(A5_KEY)
0D21 754C29    1147            mov Melody_Reload+0, #low(A5_KEY)
0D24 C002      1148            push AR2
0D26 7A78      1148            mov R2, #120
0D28 1200B5    1148            lcall ?Wait_Milli_Seconds
0D2B D002      1148            pop AR2
0D2D           1149   
0D2D 12095B    1150            lcall clear_screen_func
0D30 120919    1151       lcall Display_special_char2
0D33           1152   
0D33 754DE1    1153            mov Melody_Reload+1, #high(C6_KEY)
0D36 754C05    1154            mov Melody_Reload+0, #low(C6_KEY)
0D39 C002      1155            push AR2
0D3B 7AF0      1155            mov R2, #240
0D3D 1200B5    1155            lcall ?Wait_Milli_Seconds
0D40 D002      1155            pop AR2
0D42 C002      1156            push AR2
0D44 7AF0      1156            mov R2, #240
0D46 1200B5    1156            lcall ?Wait_Milli_Seconds
0D49 D002      1156            pop AR2
0D4B           1157            
0D4B 12095B    1158            lcall clear_screen_func
0D4E 1208D7    1159       lcall Display_special_char1
0D51           1160   ;----------------------------------------
0D51 754DDB    1161            mov Melody_Reload+1, #high(A5_KEY)
0D54 754C29    1162            mov Melody_Reload+0, #low(A5_KEY)
0D57 C002      1163            push AR2
0D59 7AF0      1163            mov R2, #240
0D5B 1200B5    1163            lcall ?Wait_Milli_Seconds
0D5E D002      1163            pop AR2
0D60           1164   
0D60 754DE1    1165            mov Melody_Reload+1, #high(C6_KEY)
0D63 754C05    1166            mov Melody_Reload+0, #low(C6_KEY)
0D66 C002      1167            push AR2
0D68 7AF0      1167            mov R2, #240
0D6A 1200B5    1167            lcall ?Wait_Milli_Seconds
0D6D D002      1167            pop AR2
0D6F           1168   
0D6F 12095B    1169            lcall clear_screen_func
0D72 120919    1170       lcall Display_special_char2
0D75           1171   ;-----------------------------------------
0D75 754DDF    1172            mov Melody_Reload+1, #high(B5_KEY)
0D78 754C30    1173            mov Melody_Reload+0, #low(B5_KEY)
0D7B C002      1174            push AR2
0D7D 7AF0      1174            mov R2, #240
0D7F 1200B5    1174            lcall ?Wait_Milli_Seconds
0D82 D002      1174            pop AR2
0D84           1175   
0D84 754DDB    1176            mov Melody_Reload+1, #high(A5_KEY)
0D87 754C29    1177            mov Melody_Reload+0, #low(A5_KEY)
0D8A C002      1178            push AR2
0D8C 7AF0      1178            mov R2, #240
0D8E 1200B5    1178            lcall ?Wait_Milli_Seconds
0D91 D002      1178            pop AR2
0D93           1179   
0D93 12095B    1180            lcall clear_screen_func
0D96 1208D7    1181       lcall Display_special_char1
0D99           1182   
0D99 754DD6    1183            mov Melody_Reload+1, #high(G5_KEY)
0D9C 754C29    1184            mov Melody_Reload+0, #low(A5_KEY)
0D9F C002      1185            push AR2
0DA1 7AF0      1185            mov R2, #240
0DA3 1200B5    1185            lcall ?Wait_Milli_Seconds
0DA6 D002      1185            pop AR2
0DA8           1186   
0DA8 754DDB    1187            mov Melody_Reload+1, #high(A5_KEY)
0DAB 754C29    1188            mov Melody_Reload+0, #low(A5_KEY)
0DAE C002      1189            push AR2
0DB0 7AF0      1189            mov R2, #240
0DB2 1200B5    1189            lcall ?Wait_Milli_Seconds
0DB5 D002      1189            pop AR2
0DB7           1190   
0DB7 12095B    1191            lcall clear_screen_func
0DBA 120919    1192       lcall Display_special_char2
0DBD           1193   ;-----------------------------------------
0DBD 754DDF    1194            mov Melody_Reload+1, #high(B5_KEY)
0DC0 754C30    1195            mov Melody_Reload+0, #low(B5_KEY)
0DC3 C002      1196            push AR2
0DC5 7AF0      1196            mov R2, #240
0DC7 1200B5    1196            lcall ?Wait_Milli_Seconds
0DCA D002      1196            pop AR2
0DCC           1197   
0DCC 754DDB    1198            mov Melody_Reload+1, #high(A5_KEY)
0DCF 754C29    1199            mov Melody_Reload+0, #low(A5_KEY)
0DD2 C002      1200            push AR2
0DD4 7AF0      1200            mov R2, #240
0DD6 1200B5    1200            lcall ?Wait_Milli_Seconds
0DD9 D002      1200            pop AR2
0DDB           1201   
0DDB 12095B    1202            lcall clear_screen_func
0DDE 1208D7    1203       lcall Display_special_char1
0DE1           1204   
0DE1 754DD6    1205            mov Melody_Reload+1, #high(G5_KEY)
0DE4 754C29    1206            mov Melody_Reload+0, #low(A5_KEY)
0DE7 C002      1207            push AR2
0DE9 7AF0      1207            mov R2, #240
0DEB 1200B5    1207            lcall ?Wait_Milli_Seconds
0DEE D002      1207            pop AR2
0DF0           1208   
0DF0 754DDB    1209            mov Melody_Reload+1, #high(A5_KEY)
0DF3 754C29    1210            mov Melody_Reload+0, #low(A5_KEY)
0DF6 C002      1211            push AR2
0DF8 7AF0      1211            mov R2, #240
0DFA 1200B5    1211            lcall ?Wait_Milli_Seconds
0DFD D002      1211            pop AR2
0DFF           1212   
0DFF 12095B    1213            lcall clear_screen_func
0E02 120919    1214       lcall Display_special_char2
0E05           1215   ;-----------------------------------------
0E05 754DDF    1216            mov Melody_Reload+1, #high(B5_KEY)
0E08 754C30    1217            mov Melody_Reload+0, #low(B5_KEY)
0E0B C002      1218            push AR2
0E0D 7AF0      1218            mov R2, #240
0E0F 1200B5    1218            lcall ?Wait_Milli_Seconds
0E12 D002      1218            pop AR2
0E14           1219   
0E14 754DDB    1220            mov Melody_Reload+1, #high(A5_KEY)
0E17 754C29    1221            mov Melody_Reload+0, #low(A5_KEY)
0E1A C002      1222            push AR2
0E1C 7AF0      1222            mov R2, #240
0E1E 1200B5    1222            lcall ?Wait_Milli_Seconds
0E21 D002      1222            pop AR2
0E23           1223   
0E23 12095B    1224            lcall clear_screen_func
0E26 1208D7    1225       lcall Display_special_char1
0E29           1226   
0E29 754DD6    1227            mov Melody_Reload+1, #high(G5_KEY)
0E2C 754C29    1228            mov Melody_Reload+0, #low(A5_KEY)
0E2F C002      1229            push AR2
0E31 7AF0      1229            mov R2, #240
0E33 1200B5    1229            lcall ?Wait_Milli_Seconds
0E36 D002      1229            pop AR2
0E38           1230            
0E38 754DD4    1231            mov Melody_Reload+1, #high(Fs5_KEY)
0E3B 754C30    1232            mov Melody_Reload+0, #low(Fs5_KEY)
0E3E C002      1233            push AR2
0E40 7AF0      1233            mov R2, #240
0E42 1200B5    1233            lcall ?Wait_Milli_Seconds
0E45 D002      1233            pop AR2
0E47           1234   
0E47 12095B    1235            lcall clear_screen_func
0E4A 120919    1236       lcall Display_special_char2
0E4D           1237   
0E4D 754DCE    1238            mov Melody_Reload+1, #high(E5_KEY)
0E50 754CD7    1239            mov Melody_Reload+0, #low(E5_KEY)
0E53 C002      1240            push AR2
0E55 7AF0      1240            mov R2, #240
0E57 1200B5    1240            lcall ?Wait_Milli_Seconds
0E5A D002      1240            pop AR2
0E5C C002      1241            push AR2
0E5E 7AF0      1241            mov R2, #240
0E60 1200B5    1241            lcall ?Wait_Milli_Seconds
0E63 D002      1241            pop AR2
0E65           1242   
0E65 12095B    1243            lcall clear_screen_func
0E68 1208D7    1244       lcall Display_special_char1
0E6B 020994    1245       ljmp main
0E6E           1246   EN
