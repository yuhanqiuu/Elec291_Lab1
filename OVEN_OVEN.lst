                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE)))
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   equ p1.7 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 02099E      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204E2      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
002B            114   org 0x002B
002B 02050F     115            ljmp Timer2_ISR
002E            116   
002E            117   ;---------------------------------;
002E            118   ; Define any constant string here ;
002E            119   ;---------------------------------;
002E            120   ;                          1234567890123456    <- This helps determine the location of the counter
002E 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
003F 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0050 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
005E 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
006C 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
007A 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
0088 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
0096 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
00A7 484F5400   129   Hot_temp: db 'HOT',0
00AB            130   ;---------------------------------------------
00AB            131   cseg
00AB            132   
00AB            133   LCD_RS equ P1.3
00AB            134   LCD_E  equ P1.4
00AB            135   LCD_D4 equ P0.0
00AB            136   LCD_D5 equ P0.1
00AB            137   LCD_D6 equ P0.2
00AB            138   LCD_D7 equ P0.3
00AB            139   
                141   $LIST
017D            143   
017D            144   ;---------------------------------;
017D            145   ; Define variables here           ;
017D            146   ;---------------------------------;
017D            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03ED            185   
03ED            186   ;---------------------------------;
03ED            187   ; Define special chars here       ;
03ED            188   ;---------------------------------;
03ED            189   fire:
03ED 7440       190            mov   A,#40H         ;Load the location where we want to store
03EF 1200FF     191       lcall ?WriteCommand    ;Send the command
03F2 7409       192       mov   A,#09H         ;Load row 1 data
03F4 1200FA     193       lcall ?WriteData   ;Send the data
03F7 7400       194       mov   A,#00H         ;Load row 2 data
03F9 1200FA     195       lcall ?WriteData   ;Send the data
03FC 7414       196       mov   A,#14H         ;Load row 3 data
03FE 1200FA     197       lcall ?WriteData   ;Send the data
0401 7406       198       mov   A,#06H         ;Load row 4 data
0403 1200FA     199       lcall ?WriteData   ;Send the data
0406 740F       200       mov   A,#0FH         ;Load row 5 data
0408 1200FA     201       lcall ?WriteData   ;Send the data
040B 741B       202       mov   A,#1BH         ;Load row 6 data
040D 1200FA     203       lcall ?WriteData   ;Send the data
0410 7411       204       mov   A,#11H         ;Load row 7 data
0412 11FA       205       acall ?WriteData   ;Send the data
0414 740E       206       mov   A,#0EH         ;Load row 8 data
0416 1200FA     207       lcall ?WriteData   ;Send the data
0419 22         208       ret                  ;Return from routine
041A            209   
041A            210   double_eighth:
041A 7448       211       mov   A,#48H         ;Load the location where we want to store
041C 1200FF     212       lcall ?WriteCommand    ;Send the command
041F 7400       213       mov   A,#00H         ;Load row 1 data
0421 1200FA     214       lcall ?WriteData   ;Send the data
0424 740F       215       mov   A,#0FH         ;Load row 2 data
0426 1200FA     216       lcall ?WriteData   ;Send the data
0429 7409       217       mov   A,#09H         ;Load row 3 data
042B 1200FA     218       lcall ?WriteData   ;Send the data
042E 7409       219       mov   A,#09H         ;Load row 4 data
0430 1200FA     220       lcall ?WriteData   ;Send the data
0433 741B       221       mov   A,#1BH         ;Load row 5 data
0435 1200FA     222       lcall ?WriteData   ;Send the data
0438 741B       223       mov   A,#1BH         ;Load row 6 data
043A 1200FA     224       lcall ?WriteData   ;Send the data
043D 7400       225       mov   A,#00H         ;Load row 7 data
043F 11FA       226       acall ?WriteData   ;Send the data
0441 7400       227       mov   A,#00H         ;Load row 8 data
0443 1200FA     228       lcall ?WriteData   ;Send the data
0446 22         229       ret                  ;Return from routine
0447            230       
0447            231   eighth:
0447 7450       232       mov   A,#50H         ;Load the location where we want to store
0449 1200FF     233       lcall ?WriteCommand    ;Send the command
044C 7404       234       mov   A,#04H         ;Load row 1 data
044E 1200FA     235       lcall ?WriteData   ;Send the data
0451 7406       236       mov   A,#06H         ;Load row 2 data
0453 1200FA     237       lcall ?WriteData   ;Send the data
0456 7405       238       mov   A,#05H         ;Load row 3 data
0458 1200FA     239       lcall ?WriteData   ;Send the data
045B 7404       240       mov   A,#04H         ;Load row 4 data
045D 1200FA     241       lcall ?WriteData   ;Send the data
0460 740C       242       mov   A,#0CH         ;Load row 5 data
0462 1200FA     243       lcall ?WriteData   ;Send the data
0465 7414       244       mov   A,#14H         ;Load row 6 data
0467 1200FA     245       lcall ?WriteData   ;Send the data
046A 7408       246       mov   A,#08H         ;Load row 7 data
046C 11FA       247       acall ?WriteData   ;Send the data
046E 7400       248       mov   A,#00H         ;Load row 8 data
0470 1200FA     249       lcall ?WriteData   ;Send the data
0473 22         250       ret                  ;Return from routine
0474            251   
0474            252   heart:
0474 7458       253       mov   A,#58H         ;Load the location where we want to store
0476 1200FF     254       lcall ?WriteCommand    ;Send the command
0479 7400       255       mov   A,#00H         ;Load row 1 data
047B 1200FA     256       lcall ?WriteData   ;Send the data
047E 740A       257       mov   A,#0AH         ;Load row 2 data
0480 1200FA     258       lcall ?WriteData   ;Send the data
0483 7415       259       mov   A,#15H         ;Load row 3 data
0485 1200FA     260       lcall ?WriteData   ;Send the data
0488 7411       261       mov   A,#11H         ;Load row 4 data
048A 1200FA     262       lcall ?WriteData   ;Send the data
048D 7411       263       mov   A,#11H         ;Load row 5 data
048F 1200FA     264       lcall ?WriteData   ;Send the data
0492 740A       265       mov   A,#0AH         ;Load row 6 data
0494 1200FA     266       lcall ?WriteData   ;Send the data
0497 7404       267       mov   A,#04H         ;Load row 7 data
0499 11FA       268       acall ?WriteData   ;Send the data
049B 7400       269       mov   A,#00H         ;Load row 8 data
049D 1200FA     270       lcall ?WriteData   ;Send the data
04A0 22         271       ret                  ;Return from routine
04A1            272   bell:
04A1 7460       273       mov   A,#60H         ;Load the location where we want to store
04A3 1200FF     274       lcall ?WriteCommand    ;Send the command
04A6 7400       275       mov   A,#00H         ;Load row 1 data
04A8 1200FA     276       lcall ?WriteData   ;Send the data
04AB 7404       277       mov   A,#04H          ;Load row 2 data
04AD 1200FA     278       lcall ?WriteData   ;Send the data
04B0 740E       279       mov   A,#0eH          ;Load row 3 data
04B2 1200FA     280       lcall ?WriteData   ;Send the data
04B5 740E       281       mov   A,#0eH         ;Load row 4 data
04B7 1200FA     282       lcall ?WriteData   ;Send the data
04BA 740E       283       mov   A,#0eH         ;Load row 5 data
04BC 1200FA     284       lcall ?WriteData   ;Send the data
04BF 741F       285       mov   A,#1fH         ;Load row 6 data
04C1 1200FA     286       lcall ?WriteData   ;Send the data
04C4 7400       287       mov   A,#00H         ;Load row 7 data
04C6 11FA       288       acall ?WriteData   ;Send the data
04C8 7404       289       mov   A,#04H         ;Load row 8 data
04CA 1200FA     290       lcall ?WriteData   ;Send the data
04CD 22         291       ret                  ;Return from routine
04CE            292   
04CE            293   ;---------------------------------;
04CE            294   ; Routine to initialize the ISR   ;
04CE            295   ; for timer 0                     ;
04CE            296   ;---------------------------------;
04CE            297   Timer0_Init:
04CE 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04D1 E589       299            mov a, TMOD
04D3 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04D5 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04D7 F589       302            mov TMOD, a
04D9 758C7C     303            mov TH0, #high(B3_KEY)
04DC 758ABD     304            mov TL0, #low(B3_KEY)
04DF            305            ; Enable the timer and interrupts
04DF            306       ;setb ET0  ; Enable timer 0 interrupt
04DF D28C       307       setb TR0  ; Start timer 0
04E1 22         308            ret
04E2            309   
04E2            310   ;---------------------------------;
04E2            311   ; ISR for timer 0.  Set to execute;
04E2            312   ; every 1/4096Hz to generate a    ;
04E2            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04E2            314   ;---------------------------------;
04E2            315   Timer0_ISR:
04E2            316            ;clr TF0  ; According to the data sheet this is done for us already.
04E2            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04E2 C28C       318            clr TR0
04E4            319            ;mov TH0, #high(TIMER0_RELOAD)
04E4            320            ;mov TL0, #low(TIMER0_RELOAD)
04E4 854D8C     321            mov TH0, Melody_Reload+1
04E7 854C8A     322            mov TL0, Melody_Reload+0
04EA D28C       323            setb TR0
04EC B297       324            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04EE 32         325            reti
04EF            326   
04EF            327   ;---------------------------------;
04EF            328   ; Routine to initialize the ISR   ;
04EF            329   ; for timer 2                     ;
04EF            330   ;---------------------------------;
04EF            331   Timer2_Init:
04EF 75C800     332            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04F2 75CDD7     333            mov TH2, #high(TIMER2_RELOAD)
04F5 75CC79     334            mov TL2, #low(TIMER2_RELOAD)
04F8            335            ; Set the reload value
04F8 75C9A0     336            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04FB 75CBD7     337            mov RCMP2H, #high(TIMER2_RELOAD)
04FE 75CA79     338            mov RCMP2L, #low(TIMER2_RELOAD)
0501            339            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0501 E4         340            clr a
0502 F53D       341            mov Count1ms+0, a
0504 F53E       342            mov Count1ms+1, a
0506 754700     343            mov pwm, #0
0509            344            ; Enable the timer and interrupts
0509 439B80     345            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
050C D2CA       346       setb TR2  ; Enable timer 2
050E 22         347            ret
050F            348   
050F            349   ;---------------------------------;
050F            350   ; ISR for timer 2 ;
050F            351   ;---------------------------------;
050F            352   Timer2_ISR:
050F C2CF       353            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0511 B284       354            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0513            355                    
0513            356            ; The two registers used in the ISR must be saved in the stack
0513 C0D0       357            push psw
0515 C0E0       358            push acc
0517 0546       359            inc pwm_counter
0519 C3         360            clr c
051A E547       361            mov a, pwm
051C 9546       362            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
051E B3         363            cpl c
051F 9290       364            mov PWM_OUT, c
0521 E546       365            mov a, pwm_counter
0523            366   
0523 B46407     367            cjne a, #100, Timer2_ISR_done
0526 754600     368            mov pwm_counter, #0
0529 053F       369            inc seconds
052B D201       370            setb s_flag
052D            371            
052D            372   Timer2_ISR_done:
052D            373   
052D D0E0       374            pop acc
052F D0D0       375            pop psw
0531 32         376            reti
0532            377   
0532            378   
0532            379   ;---------------------------------;
0532            380   ; Temperature senseor function    ;
0532            381   ;---------------------------------;
0532            382   Init_All:
0532            383            ; Configure all the pins for biderectional I/O
0532 75AC00     384            mov     P3M1, #0x00
0535 75AD00     385            mov     P3M2, #0x00
0538 75B300     386            mov     P1M1, #0x00
053B 75B400     387            mov     P1M2, #0x00
053E 75B100     388            mov     P0M1, #0x00
0541 75B200     389            mov     P0M2, #0x00
0544            390            
0544 438E10     391            orl     CKCON, #0x10 ; CLK is the input for timer 1
0547 438780     392            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
054A 759852     393            mov     SCON, #0x52
054D 53C4DF     394            anl     T3CON, #0b11011111
0550 53890F     395            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0553 438920     396            orl     TMOD, #0x20 ; Timer 1 Mode 2
0556 758D70     397            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0559 D28E       398            setb TR1
055B            399            
055B            400            ; Using timer 0 for delay functions.  Initialize here:
055B C28C       401            clr     TR0 ; Stop timer 0
055D 438E08     402            orl     CKCON,#0x08 ; CLK is the input for timer 0
0560 5389F0     403            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0563 438901     404            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0566            405            
0566            406            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0566 43B382     407            orl     P1M1, #0b10000010
0569 53B47D     408            anl     P1M2, #0b01111101
056C            409            
056C            410            ; Initialize and start the ADC:
056C 53E8F0     411            anl ADCCON0, #0xF0
056F 43E807     412            orl ADCCON0, #0x07 ; Select channel 7
0572            413            ; AINDIDS select if some pins are analog inputs or digital I/O:
0572 75F600     414            mov AINDIDS, #0x00 ; Disable all analog inputs
0575 43F681     415            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0578 43E101     416            orl ADCCON1, #0x01 ; Enable ADC
057B            417            
057B 22         418            ret
057C            419   
057C            420   wait_1ms:
057C C28C       421            clr     TR0 ; Stop timer 0
057E C28D       422            clr     TF0 ; Clear overflow flag
0580 758CBF     423            mov     TH0, #high(TIMER0_RELOAD_1MS)
0583 758A28     424            mov     TL0,#low(TIMER0_RELOAD_1MS)
0586 D28C       425            setb TR0
0588 308DFD     426            jnb     TF0, $ ; Wait for overflow
058B 22         427            ret
058C            428   
058C            429   ; Wait the number of miliseconds in R2
058C            430   waitms:
058C 12057C     431            lcall wait_1ms
058F DAFB       432            djnz R2, waitms
0591 22         433            ret
0592            434   
0592            435   ;---------------------------------;
0592            436   ;         5_pushbuttons function               ;
0592            437   ;---------------------------------;
0592            438   LCD_PB:
0592            439            ; Set variables to 1: 'no push button pressed'
0592 D202       440            setb PB0
0594 D203       441            setb PB1
0596 D204       442            setb PB2
0598 D205       443            setb PB3
059A D206       444            setb PB4
059C            445            ; The input pin used to check set to '1'
059C D295       446            setb P1.5
059E            447            
059E            448            ; Check if any push button is pressed
059E C280       449            clr P0.0
05A0 C281       450            clr P0.1
05A2 C282       451            clr P0.2
05A4 C283       452            clr P0.3
05A6 C293       453            clr P1.3
05A8 209549     454            jb P1.5, LCD_PB_Done
05AB            455   
05AB            456            ; Debounce
05AB 7A32       457            mov R2, #50
05AD 12058C     458            lcall waitms
05B0 209541     459            jb P1.5, LCD_PB_Done
05B3            460   
05B3            461            ; Set the LCD data pins to logic 1
05B3 D280       462            setb P0.0
05B5 D281       463            setb P0.1
05B7 D282       464            setb P0.2
05B9 D283       465            setb P0.3
05BB D293       466            setb P1.3
05BD            467            
05BD            468            ; Check the push buttons one by one
05BD C293       469            clr P1.3
05BF A295       470            mov c, P1.5
05C1 9206       471            mov PB4, c
05C3 D293       472            setb P1.3
05C5 300632     473            jnb PB4,increment_soak_temp
05C8            474   
05C8 C280       475            clr P0.0
05CA A295       476            mov c, P1.5
05CC 9205       477            mov PB3, c
05CE D280       478            setb P0.0
05D0 300533     479            jnb PB3, increment_soak_time
05D3            480            
05D3 C281       481            clr P0.1
05D5 A295       482            mov c, P1.5
05D7 9204       483            mov PB2, c
05D9 D281       484            setb P0.1
05DB 300434     485            jnb PB2, increment_reflow_temp
05DE            486            
05DE C282       487            clr P0.2
05E0 A295       488            mov c, P1.5
05E2 9203       489            mov PB1, c
05E4 D282       490            setb P0.2
05E6 300335     491            jnb PB1, increment_reflow_time
05E9            492            
05E9 C283       493            clr P0.3
05EB A295       494            mov c, P1.5
05ED 9202       495            mov PB0, c
05EF D283       496            setb P0.3
05F1 300236     497            jnb PB0, start_stop
05F4            498   
05F4            499   LCD_PB_Done:
05F4 7A14       500            mov r2,#20
05F6 12058C     501            lcall waitms            
05F9 22         502            ret
05FA            503   
05FA            504   increment_soak_temp:
05FA 0545       505            inc soak_temp
05FC E545       506            mov a, soak_temp
05FE B4F0F3     507            cjne a, #0xF0, LCD_PB_Done
0601 754500     508            mov soak_temp, #0x00
0604 80EE       509            sjmp LCD_PB_Done
0606            510   increment_soak_time:
0606 0544       511            inc soak_time
0608 E544       512            mov a, soak_time
060A B478E7     513            cjne a, #0x78, LCD_PB_Done
060D 754400     514            mov soak_time, #0x00
0610 80E2       515            sjmp LCD_PB_Done
0612            516   increment_reflow_temp: 
0612 0543       517            inc reflow_temp
0614 E543       518            mov a, reflow_temp
0616 B4F0DB     519            cjne a, #0xF0, LCD_PB_Done
0619 754300     520            mov reflow_temp, #0x00
061C 80D6       521            sjmp LCD_PB_Done
061E            522   increment_reflow_time:
061E 0542       523            inc reflow_time
0620 E542       524            mov a, reflow_time
0622 B44BCF     525            cjne a, #0x4B, LCD_PB_Done
0625 754200     526            mov reflow_time, #0x00
0628 80CA       527            sjmp LCD_PB_Done
062A            528   
062A            529   start_stop:
062A B208       530            cpl start_stop_flag
062C 80C6       531            sjmp LCD_PB_Done
062E            532   
062E            533   ; We can display a number any way we want.  In this case with
062E            534   ; four decimal places.
062E            535   Display_formated_BCD:
062E C0E0       536            push acc
0630 7404       536            mov a, #4
0632 14         536            dec a
0633 120144     536            lcall ?Set_Cursor_1 ; Select column and row
0636 D0E0       536            pop acc ; display To
0638 C000       537            push ar0
063A A83B       537            mov r0, bcd+3
063C 120149     537            lcall ?Display_BCD
063F D000       537            pop ar0
0641 C000       538            push ar0
0643 A83A       538            mov r0, bcd+2
0645 120149     538            lcall ?Display_BCD
0648 D000       538            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
064A            539            
064A            540            ;send the BCD value to the MATLAB script
064A C000       541            push ar0
064C A83B       541            mov r0, bcd+3
064E 120167     541            lcall ?Send_BCD
0651 D000       541            pop ar0
0653 C000       542            push ar0
0655 A83A       542            mov r0, bcd+2
0657 120167     542            lcall ?Send_BCD
065A D000       542            pop ar0
065C 742E       543            mov a, #'.'
065E 12015F     544            lcall putchar
0661 C000       545            push ar0
0663 A839       545            mov r0, bcd+1
0665 120167     545            lcall ?Send_BCD
0668 D000       545            pop ar0
066A 740D       546            mov a, #'\r'
066C 12015F     547            lcall putchar
066F 740A       548            mov a, #'\n'
0671 12015F     549            lcall putchar
0674            550            ;Set_Cursor(1, 13)
0674            551            ;Send_Constant_String(#22) ; display Tj=22
0674            552            
0674 C0E0       553            push acc
0676 740E       553            mov a, #14
0678 14         553            dec a
0679 120142     553            lcall ?Set_Cursor_2 ; Select column and row
067C D0E0       553            pop acc
067E E53F       554            mov a,seconds
0680 120684     555            lcall SendToLCD
0683            556            
0683 22         557            ret
0684            558   
0684            559   SendToLCD:
0684 75F064     560   mov b, #100
0687 84         561   div ab
0688 4430       562   orl a, #0x30 ; Convert hundreds to ASCII
068A 1200FA     563   lcall ?WriteData ; Send to LCD
068D E5F0       564   mov a, b ; Remainder is in register b
068F 75F00A     565   mov b, #10
0692 84         566   div ab
0693 4430       567   orl a, #0x30 ; Convert tens to ASCII
0695 1200FA     568   lcall ?WriteData; Send to LCD
0698 E5F0       569   mov a, b
069A 4430       570   orl a, #0x30 ; Convert units to ASCII
069C 1200FA     571   lcall ?WriteData; Send to LCD
069F 22         572   ret
06A0            573   
06A0            574   ;-------------------------------------------------;
06A0            575   ; Display values from the pushbutton to the LCD   ;
06A0            576   ;-------------------------------------------------;
06A0            577   
06A0            578   Display_PushButtons_LCD:
06A0 C0E0       579            push acc
06A2 7402       579            mov a, #2
06A4 14         579            dec a
06A5 120142     579            lcall ?Set_Cursor_2 ; Select column and row
06A8 D0E0       579            pop acc
06AA E545       580            mov a, soak_temp
06AC 120684     581            lcall SendToLCD
06AF            582            
06AF C0E0       583            push acc
06B1 7406       583            mov a, #6
06B3 14         583            dec a
06B4 120142     583            lcall ?Set_Cursor_2 ; Select column and row
06B7 D0E0       583            pop acc
06B9 E544       584            mov a, soak_time
06BB 120684     585            lcall SendToLCD
06BE            586       
06BE C0E0       587            push acc
06C0 740A       587            mov a, #10
06C2 14         587            dec a
06C3 120142     587            lcall ?Set_Cursor_2 ; Select column and row
06C6 D0E0       587            pop acc
06C8 E543       588       mov a, reflow_temp
06CA 120684     589            lcall SendToLCD
06CD            590       
06CD C0E0       591            push acc
06CF 740E       591            mov a, #14
06D1 14         591            dec a
06D2 120142     591            lcall ?Set_Cursor_2 ; Select column and row
06D5 D0E0       591            pop acc
06D7 E542       592       mov a, reflow_time
06D9 120684     593            lcall SendToLCD
06DC            594            
06DC 22         595            ret
06DD            596   
06DD            597   
06DD            598   ;-------------------------------------------------;
06DD            599   ; Display all values and temperatures to the LCD  ;
06DD            600   ;-------------------------------------------------;
06DD            601   Display_Data:
06DD C2EF       602            clr ADCF
06DF D2EE       603            setb ADCS ;  ADC start trigger signal
06E1 30EFFD     604       jnb ADCF, $ ; Wait for conversion complete
06E4            605       
06E4            606       ; Read the ADC result and store in [R1, R0]
06E4 E5C3       607       mov a, ADCRH   
06E6 C4         608       swap a
06E7 C0E0       609       push acc
06E9 540F       610       anl a, #0x0f
06EB F9         611       mov R1, a
06EC D0E0       612       pop acc
06EE 54F0       613       anl a, #0xf0
06F0 45C2       614       orl a, ADCRL
06F2 F8         615       mov R0, A
06F3            616       
06F3            617       ; Convert to voltage
06F3 8830       618            mov x+0, R0
06F5 8931       619            mov x+1, R1
06F7            620            ; Pad other bits with zero
06F7 753200     621            mov x+2, #0
06FA 753300     622            mov x+3, #0
06FD            623            
06FD            624            ;lcall div32 ; Get V_out
06FD            625            ; ; Calculate Temp based on V_out
06FD            626            ; Load_y(27300) ; The reference temp K
06FD            627            ; lcall sub32 ; Get Temp*0.01
06FD            628            ; ; Change Temp*0.01 to Temp
06FD            629            ; Load_y(100)
06FD            630            ; lcall mul32
06FD            631   
06FD 75347C     632            mov y+0, #low (50300 % 0x10000) 
0700 7535C4     632            mov y+1, #high(50300 % 0x10000) 
0703 753600     632            mov y+2, #low (50300 / 0x10000) 
0706 753700     632            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
0709 1202F7     633            lcall mul32 ;multiplying ADC * Vref
070C 7534FF     634            mov y+0, #low (4095 % 0x10000) 
070F 75350F     634            mov y+1, #high(4095 % 0x10000) 
0712 753600     634            mov y+2, #low (4095 / 0x10000) 
0715 753700     634            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0718 120384     635            lcall div32 ;now doing (ADC*Vref)/(4095)
071B            636            
071B 7534E8     637            mov y+0, #low (1000 % 0x10000) 
071E 753503     637            mov y+1, #high(1000 % 0x10000) 
0721 753600     637            mov y+2, #low (1000 / 0x10000) 
0724 753700     637            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0727 1202F7     638            lcall mul32 ;multiplying volts
072A            639            
072A 75340A     640            mov y+0, #low (10 % 0x10000) 
072D 753500     640            mov y+1, #high(10 % 0x10000) 
0730 753600     640            mov y+2, #low (10 / 0x10000) 
0733 753700     640            mov y+3, #high(10 / 0x10000) 
0736 1202F7     641            lcall mul32
0739            642            
0739            643            ;convert to temperature
0739 7534D0     644            mov y+0, #low (21200 % 0x10000) 
073C 753552     644            mov y+1, #high(21200 % 0x10000) 
073F 753600     644            mov y+2, #low (21200 / 0x10000) 
0742 753700     644            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0745 120384     645            lcall div32 
0748 753429     646            mov y+0, #low (41 % 0x10000) 
074B 753500     646            mov y+1, #high(41 % 0x10000) 
074E 753600     646            mov y+2, #low (41 / 0x10000) 
0751 753700     646            mov y+3, #high(41 / 0x10000) ;load y = 41
0754 120384     647            lcall div32 ;divide by 41
0757            648            
0757 753410     649            mov y+0, #low (10000 % 0x10000) 
075A 753527     649            mov y+1, #high(10000 % 0x10000) 
075D 753600     649            mov y+2, #low (10000 / 0x10000) 
0760 753700     649            mov y+3, #high(10000 / 0x10000) 
0763 1202F7     650            lcall mul32
0766            651            
0766 753460     652            mov y+0, #low (220000 % 0x10000) 
0769 75355B     652            mov y+1, #high(220000 % 0x10000) 
076C 753603     652            mov y+2, #low (220000 / 0x10000) 
076F 753700     652            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0772 120242     653            lcall add32
0775            654            
0775 7534A0     655            mov y+0, #low (2500000 % 0x10000) 
0778 753525     655            mov y+1, #high(2500000 % 0x10000) 
077B 753626     655            mov y+2, #low (2500000 / 0x10000) 
077E 753700     655            mov y+3, #high(2500000 / 0x10000) 
0781 1202E3     656            lcall x_gteq_y
0784            657   
0784 20001A     658            jb mf, too_fucking_hot
0787            659   
0787            660   ; Convert to BCD and display
0787 12017D     661            lcall hex2bcd
078A 12062E     662            lcall Display_formated_BCD
078D 22         663            ret
078E            664   returned:
078E 12017D     665            lcall hex2bcd
0791 C0E0       666            push acc
0793 740E       666            mov a, #14
0795 14         666            dec a
0796 120142     666            lcall ?Set_Cursor_2 ; Select column and row
0799 D0E0       666            pop acc
079B E53F       667            mov a,seconds
079D 120684     668            lcall SendToLCD
07A0            669   
07A0 22         670            ret
07A1            671            
07A1            672   too_fucking_hot:
07A1 C0E0       673            push acc
07A3 7404       673            mov a, #4
07A5 14         673            dec a
07A6 120144     673            lcall ?Set_Cursor_1 ; Select column and row
07A9 D0E0       673            pop acc
07AB C083       674            push dph
07AD C082       674            push dpl
07AF C0E0       674            push acc
07B1 9000A7     674            mov dptr, #Hot_temp
07B4 120137     674            lcall ?Send_Constant_String
07B7 D0E0       674            pop acc
07B9 D082       674            pop dpl
07BB D083       674            pop dph
07BD 1203ED     675            lcall fire
07C0 7486       676            mov a, #0x86
07C2 1200FF     677            lcall ?WriteCommand
07C5 7400       678            mov a, #0H
07C7 1200FA     679            lcall ?WriteData
07CA            680            
07CA 80C2       681            sjmp returned
07CC            682   
07CC            683   ;-----------------------------------------------------------------------------;
07CC            684   ;Grabs the value in register a and then compares it to the current temperature;
07CC            685   ;-----------------------------------------------------------------------------;
07CC            686   
07CC            687   Display_temp:
07CC C2EF       688            clr ADCF
07CE D2EE       689            setb ADCS ;  ADC start trigger signal
07D0 30EFFD     690       jnb ADCF, $ ; Wait for conversion complete
07D3            691       
07D3            692       ; Read the ADC result and store in [R1, R0]
07D3 E5C3       693       mov a, ADCRH   
07D5 C4         694       swap a
07D6 C0E0       695       push acc
07D8 540F       696       anl a, #0x0f
07DA F9         697       mov R1, a
07DB D0E0       698       pop acc
07DD 54F0       699       anl a, #0xf0
07DF 45C2       700       orl a, ADCRL
07E1 F8         701       mov R0, A
07E2            702       
07E2            703       ; Convert to voltage
07E2 8830       704            mov x+0, R0
07E4 8931       705            mov x+1, R1
07E6            706            ; Pad other bits with zero
07E6 753200     707            mov x+2, #0
07E9 753300     708            mov x+3, #0
07EC            709            
07EC            710            ;lcall div32 ; Get V_out
07EC            711            ; ; Calculate Temp based on V_out
07EC            712            ; Load_y(27300) ; The reference temp K
07EC            713            ; lcall sub32 ; Get Temp*0.01
07EC            714            ; ; Change Temp*0.01 to Temp
07EC            715            ; Load_y(100)
07EC            716            ; lcall mul32
07EC            717   
07EC 75347C     718            mov y+0, #low (50300 % 0x10000) 
07EF 7535C4     718            mov y+1, #high(50300 % 0x10000) 
07F2 753600     718            mov y+2, #low (50300 / 0x10000) 
07F5 753700     718            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
07F8 1202F7     719            lcall mul32 ;multiplying ADC * Vref
07FB 7534FF     720            mov y+0, #low (4095 % 0x10000) 
07FE 75350F     720            mov y+1, #high(4095 % 0x10000) 
0801 753600     720            mov y+2, #low (4095 / 0x10000) 
0804 753700     720            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0807 120384     721            lcall div32 ;now doing (ADC*Vref)/(4095)
080A            722            
080A 7534E8     723            mov y+0, #low (1000 % 0x10000) 
080D 753503     723            mov y+1, #high(1000 % 0x10000) 
0810 753600     723            mov y+2, #low (1000 / 0x10000) 
0813 753700     723            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0816 1202F7     724            lcall mul32 ;multiplying volts
0819            725            
0819 75340A     726            mov y+0, #low (10 % 0x10000) 
081C 753500     726            mov y+1, #high(10 % 0x10000) 
081F 753600     726            mov y+2, #low (10 / 0x10000) 
0822 753700     726            mov y+3, #high(10 / 0x10000) 
0825 1202F7     727            lcall mul32
0828            728            
0828            729            ;convert to temperature
0828 7534D0     730            mov y+0, #low (21200 % 0x10000) 
082B 753552     730            mov y+1, #high(21200 % 0x10000) 
082E 753600     730            mov y+2, #low (21200 / 0x10000) 
0831 753700     730            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0834 120384     731            lcall div32 
0837 753429     732            mov y+0, #low (41 % 0x10000) 
083A 753500     732            mov y+1, #high(41 % 0x10000) 
083D 753600     732            mov y+2, #low (41 / 0x10000) 
0840 753700     732            mov y+3, #high(41 / 0x10000) ;load y = 41
0843 120384     733            lcall div32 ;divide by 41
0846            734            
0846 753410     735            mov y+0, #low (10000 % 0x10000) 
0849 753527     735            mov y+1, #high(10000 % 0x10000) 
084C 753600     735            mov y+2, #low (10000 / 0x10000) 
084F 753700     735            mov y+3, #high(10000 / 0x10000) 
0852 1202F7     736            lcall mul32
0855            737            
0855 753460     738            mov y+0, #low (220000 % 0x10000) 
0858 75355B     738            mov y+1, #high(220000 % 0x10000) 
085B 753603     738            mov y+2, #low (220000 / 0x10000) 
085E 753700     738            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0861 120242     739            lcall add32
0864            740   
0864            741   ; Convert to BCD and display
0864 12017D     742            lcall hex2bcd
0867 12086B     743            lcall Display_temperature
086A            744   
086A 22         745            ret
086B            746   
086B            747   Display_temperature:
086B C0E0       748            push acc
086D 7404       748            mov a, #4
086F 14         748            dec a
0870 120144     748            lcall ?Set_Cursor_1 ; Select column and row
0873 D0E0       748            pop acc ; display To
0875 C000       749            push ar0
0877 A83B       749            mov r0, bcd+3
0879 120149     749            lcall ?Display_BCD
087C D000       749            pop ar0
087E C000       750            push ar0
0880 A83A       750            mov r0, bcd+2
0882 120149     750            lcall ?Display_BCD
0885 D000       750            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
0887 22         751            ret
0888            752   
0888            753   Compare_temp:
0888 853A48     754            mov temp+0, bcd+2
088B 853B49     755            mov temp+1, bcd+3
088E 854838     756            mov bcd+0, temp+0
0891 854939     757            mov bcd+1, temp+1
0894 753A00     758            mov bcd+2,#0
0897 753B00     759            mov bcd+3,#0
089A 753C00     760            mov bcd+4,#0
089D            761            
089D 120206     762            lcall bcd2hex
08A0            763            
08A0 853034     764            mov y+0,x+0
08A3 853135     765            mov y+1,x+1
08A6 853236     766            mov y+2,x+2
08A9 853337     767            mov y+3,x+3
08AC            768            
08AC F530       769            mov x+0,a
08AE 753100     770            mov x+1,#0
08B1 753200     771            mov x+2,#0
08B4 753300     772            mov x+3,#0
08B7            773            
08B7 12017D     774            lcall hex2bcd
08BA 1202ED     775            lcall x_lteq_y
08BD            776   
08BD 22         777            ret
08BE            778   
08BE            779   check_stop:
08BE D206       780            setb PB4
08C0            781            ; The input pin used to check set to '1'
08C0 D295       782            setb P1.5
08C2 C283       783            clr P0.3
08C4 209515     784            jb P1.5, stop_PB_Done
08C7            785            ; Debounce
08C7 7A32       786            mov R2, #50
08C9 12058C     787            lcall waitms
08CC 20950D     788            jb P1.5, stop_PB_Done
08CF D283       789            setb P0.3
08D1 C283       790            clr P0.3
08D3 A295       791            mov c, P1.5
08D5 9202       792            mov PB0, c
08D7 D283       793            setb P0.3
08D9 300201     794            jnb PB0, start_stop_timer
08DC            795   
08DC            796   stop_PB_Done:
08DC 22         797            ret
08DD            798   start_stop_timer:
08DD B208       799            cpl start_stop_flag
08DF 80FB       800            sjmp stop_PB_Done
08E1            801   
08E1            802   
08E1            803   Display_special_char1:
08E1 120474     804            lcall heart
08E4 7481       805            mov a, #0x81
08E6 1200FF     806            lcall ?WriteCommand
08E9 7403       807            mov a, #3H
08EB 1200FA     808            lcall ?WriteData
08EE            809   
08EE 120447     810            lcall eighth
08F1 74C4       811            mov a, #0xC4
08F3 1200FF     812            lcall ?WriteCommand
08F6 7402       813            mov a, #2H
08F8 1200FA     814            lcall ?WriteData
08FB            815   
08FB 1204A1     816            lcall bell
08FE 7487       817            mov a, #0x87
0900 1200FF     818            lcall ?WriteCommand
0903 7404       819            mov a, #4H
0905 1200FA     820            lcall ?WriteData
0908            821   
0908 12041A     822            lcall double_eighth
090B 74CA       823            mov a, #0xCA
090D 1200FF     824            lcall ?WriteCommand
0910 7401       825            mov a, #1H
0912 1200FA     826            lcall ?WriteData
0915            827   
0915 120474     828            lcall heart
0918 748D       829            mov a, #0x8D
091A 1200FF     830            lcall ?WriteCommand
091D 7403       831            mov a, #3H
091F 1200FA     832            lcall ?WriteData
0922 32         833            reti
0923            834            
0923            835   Display_special_char2:
0923 120474     836            lcall heart
0926 74C0       837            mov a, #0xC0
0928 1200FF     838            lcall ?WriteCommand
092B 7403       839            mov a, #3H
092D 1200FA     840            lcall ?WriteData
0930            841   
0930 120447     842            lcall eighth
0933 7483       843            mov a, #0x83
0935 1200FF     844            lcall ?WriteCommand
0938 7402       845            mov a, #2H
093A 1200FA     846            lcall ?WriteData
093D            847   
093D 1204A1     848            lcall bell
0940 74C7       849            mov a, #0xC7
0942 1200FF     850            lcall ?WriteCommand
0945 7404       851            mov a, #4H
0947 1200FA     852            lcall ?WriteData
094A            853   
094A 12041A     854            lcall double_eighth
094D 748B       855            mov a, #0x8B
094F 1200FF     856            lcall ?WriteCommand
0952 7401       857            mov a, #1H
0954 1200FA     858            lcall ?WriteData
0957            859   
0957 120474     860            lcall heart
095A 74CE       861            mov a, #0xCE
095C 1200FF     862            lcall ?WriteCommand
095F 7403       863            mov a, #3H
0961 1200FA     864            lcall ?WriteData
0964 32         865            reti
0965            866   
0965            867   clear_screen_func:
0965            868       
0965 C0E0       869            push acc
0967 7401       869            mov a, #1
0969 14         869            dec a
096A 120144     869            lcall ?Set_Cursor_1 ; Select column and row
096D D0E0       869            pop acc
096F C083       870            push dph
0971 C082       870            push dpl
0973 C0E0       870            push acc
0975 900096     870            mov dptr, #clear_screen
0978 120137     870            lcall ?Send_Constant_String
097B D0E0       870            pop acc
097D D082       870            pop dpl
097F D083       870            pop dph
0981 C0E0       871            push acc
0983 7401       871            mov a, #1
0985 14         871            dec a
0986 120142     871            lcall ?Set_Cursor_2 ; Select column and row
0989 D0E0       871            pop acc
098B C083       872            push dph
098D C082       872            push dpl
098F C0E0       872            push acc
0991 900096     872            mov dptr, #clear_screen
0994 120137     872            lcall ?Send_Constant_String
0997 D0E0       872            pop acc
0999 D082       872            pop dpl
099B D083       872            pop dph
099D 32         873       reti
099E            874       
099E            875   main:
099E 75817F     876            mov sp, #0x7f
09A1 75B100     877       mov P0M1, #0x00
09A4 75B200     878       mov P0M2, #0x00
09A7 75B300     879       mov P1M1, #0x00
09AA 75B400     880       mov P1M2, #0x00
09AD 75AD00     881       mov P3M2, #0x00
09B0 75AD00     882       mov P3M2, #0x00
09B3            883       
09B3 120532     884            lcall Init_All
09B6 120104     885       lcall LCD_4BIT
09B9 1204CE     886       lcall Timer0_Init
09BC 1204EF     887       lcall Timer2_Init
09BF D2AF       888       setb EA   ; Enable Global interrupts
09C1            889       ; initial messages in LCD
09C1 C0E0       890            push acc
09C3 7401       890            mov a, #1
09C5 14         890            dec a
09C6 120144     890            lcall ?Set_Cursor_1 ; Select column and row
09C9 D0E0       890            pop acc
09CB C083       891            push dph
09CD C082       891            push dpl
09CF C0E0       891            push acc
09D1 90002E     891            mov dptr, #To_Message
09D4 120137     891            lcall ?Send_Constant_String
09D7 D0E0       891            pop acc
09D9 D082       891            pop dpl
09DB D083       891            pop dph
09DD C0E0       892            push acc
09DF 7401       892            mov a, #1
09E1 14         892            dec a
09E2 120142     892            lcall ?Set_Cursor_2 ; Select column and row
09E5 D0E0       892            pop acc
09E7 C083       893            push dph
09E9 C082       893            push dpl
09EB C0E0       893            push acc
09ED 90003F     893            mov dptr, #Time_temp_display
09F0 120137     893            lcall ?Send_Constant_String
09F3 D0E0       893            pop acc
09F5 D082       893            pop dpl
09F7 D083       893            pop dph
09F9 754B00     894       mov FSM_state,#0
09FC 753F00     895            mov seconds, #0x00
09FF 75458C     896            mov soak_temp, #0x8C ;140
0A02 75443C     897            mov soak_time, #0x3C ; 60
0A05 7543E6     898            mov reflow_temp, #0xE6 ; 230
0A08 75421E     899            mov reflow_time, #0x1E ; 30
0A0B 753800     900            mov bcd,#0
0A0E            901            
0A0E C208       902            clr start_stop_flag
0A10 C207       903            clr FSM_start_flag
0A12            904       
0A12            905   ;---------------------------------;
0A12            906   ;                FSM     funtion                               ;
0A12            907   ;---------------------------------;
0A12            908   FSM:
0A12 E54B       909       mov a, FSM_state
0A14            910   FSM_state0: ;initial state
0A14 B40036     911       cjne a, #0, FSM_state1
0A17 754700     912       mov pwm, #0 ; power variable
0A1A 120592     913            lcall LCD_PB ; calls and checks the pushbuttons
0A1D 1206A0     914            lcall Display_PushButtons_LCD ;Displays values in pushbuttons
0A20 1207CC     915            lcall Display_temp
0A23 300824     916       jnb start_stop_flag, FSM_state0_done
0A26 D207       917       setb FSM_start_flag
0A28 753F00     918       mov seconds, #0x00     ; set time to 0
0A2B 754B01     919       mov FSM_state, #1   ; set FSM_state to 1, next state is state1
0A2E C0E0       920            push acc
0A30 7401       920            mov a, #1
0A32 14         920            dec a
0A33 120142     920            lcall ?Set_Cursor_2 ; Select column and row
0A36 D0E0       920            pop acc
0A38 C083       921            push dph
0A3A C082       921            push dpl
0A3C C0E0       921            push acc
0A3E 900050     921            mov dptr, #Ramp_to_soak
0A41 120137     921            lcall ?Send_Constant_String
0A44 D0E0       921            pop acc
0A46 D082       921            pop dpl
0A48 D083       921            pop dph
0A4A            922   
0A4A            923   
0A4A            924   FSM_state0_done:
0A4A 020A12     925       ljmp FSM   ;jump back to FSM and reload FSM_state to a
0A4D            926   
0A4D            927   FSM_state1: ;ramp to soak
0A4D B4014D     928       cjne a, #1, FSM_state2
0A50 754764     929       mov pwm, #100
0A53 C3         930       clr c
0A54 1208BE     931            lcall check_stop
0A57 300834     932       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0A5A 743C       933       mov a, #0x3C
0A5C 953F       934       subb a, seconds
0A5E 401A       935       jc abort
0A60            936   continue:
0A60 C3         937       clr c   ; ! i don't know what is c
0A61 300113     938            jnb s_flag, FSM_state1_done
0A64 C201       939            clr s_flag
0A66 1206DD     940            lcall Display_Data
0A69 E545       941            mov a, soak_temp    ; set a to soak temp
0A6B 120888     942            lcall Compare_temp
0A6E 300006     943       jnb mf, FSM_state1_done
0A71 753F00     944       mov seconds, #0x00     ; set time to 0
0A74 754B02     945       mov FSM_state, #2
0A77            946   FSM_state1_done:
0A77 020A12     947       ljmp FSM
0A7A            948   abort:
0A7A 7432       949       mov a, #0x32  ; set a to 50 degree
0A7C 3001F8     950            jnb s_flag, FSM_state1_done
0A7F 1206DD     951            lcall Display_Data
0A82 120888     952            lcall Compare_temp
0A85 2000D8     953            jb mf, continue ; if temp is larger then 50 degree, go back to continue
0A88 754B00     954       mov FSM_state, #0   ; abort the FSM
0A8B 02099E     955            ljmp main
0A8E            956   
0A8E            957   stop_state:
0A8E C2CA       958       clr TR2
0A90 300805     959       jnb start_stop_flag, stop
0A93 D2CA       960            setb TR2
0A95 020A12     961            ljmp FSM
0A98            962   
0A98            963   stop:
0A98 1208BE     964            lcall check_stop
0A9B 80F1       965       sjmp stop_state
0A9D            966   
0A9D            967   FSM_state2: ;preheat/soak
0A9D B4023D     968       cjne a, #2, FSM_state3
0AA0 754714     969       mov pwm, #20
0AA3 C0E0       970            push acc
0AA5 7401       970            mov a, #1
0AA7 14         970            dec a
0AA8 120142     970            lcall ?Set_Cursor_2 ; Select column and row
0AAB D0E0       970            pop acc
0AAD C083       971            push dph
0AAF C082       971            push dpl
0AB1 C0E0       971            push acc
0AB3 90005E     971            mov dptr, #Soak_display
0AB6 120137     971            lcall ?Send_Constant_String
0AB9 D0E0       971            pop acc
0ABB D082       971            pop dpl
0ABD D083       971            pop dph
0ABF C3         972       clr c   ; ! i don't know what is c 
0AC0 300117     973            jnb s_flag, FSM_state2_done
0AC3 C201       974            clr s_flag
0AC5 1206DD     975            lcall Display_Data
0AC8 1208BE     976            lcall check_stop
0ACB 3008C0     977       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0ACE E544       978            mov a, soak_time    ; set a to soak time
0AD0 953F       979       subb a, seconds    ; temp is our currect sec
0AD2 5006       980       jnc FSM_state2_done
0AD4 753F00     981       mov seconds, #0x00     ; set time to 0
0AD7 754B03     982       mov FSM_state, #3
0ADA            983   FSM_state2_done:
0ADA 020A12     984       ljmp FSM
0ADD            985   
0ADD            986   FSM_state3: ;ramp to peak
0ADD B40342     987       cjne a, #3, FSM_state4
0AE0 754764     988       mov pwm, #100
0AE3 C0E0       989            push acc
0AE5 7401       989            mov a, #1
0AE7 14         989            dec a
0AE8 120142     989            lcall ?Set_Cursor_2 ; Select column and row
0AEB D0E0       989            pop acc
0AED C083       990            push dph
0AEF C082       990            push dpl
0AF1 C0E0       990            push acc
0AF3 90006C     990            mov dptr, #Ramp_to_peak
0AF6 120137     990            lcall ?Send_Constant_String
0AF9 D0E0       990            pop acc
0AFB D082       990            pop dpl
0AFD D083       990            pop dph
0AFF C3         991       clr c   ; ! i don't know what is c 
0B00 1208BE     992            lcall check_stop
0B03 300888     993       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B06 300113     994            jnb s_flag, FSM_state3_done
0B09 C201       995            clr s_flag
0B0B 1206DD     996            lcall Display_Data
0B0E E543       997            mov a, reflow_temp    ; set a to reflow temp
0B10 120888     998            lcall Compare_temp
0B13 300006     999       jnb mf, FSM_state3_done
0B16 753F00    1000       mov seconds, #0x00     ; set time to 0
0B19 754B04    1001       mov FSM_state, #4
0B1C           1002   FSM_state3_done:
0B1C 020A12    1003       ljmp FSM
0B1F           1004       
0B1F           1005   intermediate_stop_jump:
0B1F 020A8E    1006            ljmp stop_state
0B22           1007   
0B22           1008   FSM_state4:;reflow
0B22 B4043D    1009       cjne a, #4, FSM_state5
0B25 754714    1010       mov pwm, #20
0B28 C0E0      1011            push acc
0B2A 7401      1011            mov a, #1
0B2C 14        1011            dec a
0B2D 120142    1011            lcall ?Set_Cursor_2 ; Select column and row
0B30 D0E0      1011            pop acc
0B32 C083      1012            push dph
0B34 C082      1012            push dpl
0B36 C0E0      1012            push acc
0B38 90007A    1012            mov dptr, #Reflow_display
0B3B 120137    1012            lcall ?Send_Constant_String
0B3E D0E0      1012            pop acc
0B40 D082      1012            pop dpl
0B42 D083      1012            pop dph
0B44 C3        1013       clr c   ; ! i don't know what is c 
0B45 300117    1014            jnb s_flag, FSM_state4_done
0B48 C201      1015            clr s_flag
0B4A 1206DD    1016            lcall Display_Data
0B4D 1208BE    1017            lcall check_stop
0B50 3008CC    1018       jnb start_stop_flag, intermediate_stop_jump; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B53 E542      1019            mov a, reflow_time    ; set a to reflow time
0B55 953F      1020       subb a, seconds    ; temp is our currect sec
0B57 5006      1021       jnc FSM_state4_done
0B59 753F00    1022       mov seconds, #0x00     ; set time to 0
0B5C 754B05    1023       mov FSM_state, #5
0B5F           1024   FSM_state4_done:
0B5F 020A12    1025       ljmp FSM
0B62           1026   
0B62           1027   FSM_state5:;cooling
0B62 B40542    1028       cjne a, #5, FSM_state6
0B65 754700    1029       mov pwm, #0
0B68           1030       
0B68 C0E0      1031            push acc
0B6A 7401      1031            mov a, #1
0B6C 14        1031            dec a
0B6D 120142    1031            lcall ?Set_Cursor_2 ; Select column and row
0B70 D0E0      1031            pop acc
0B72 C083      1032            push dph
0B74 C082      1032            push dpl
0B76 C0E0      1032            push acc
0B78 900088    1032            mov dptr, #Cooling_display
0B7B 120137    1032            lcall ?Send_Constant_String
0B7E D0E0      1032            pop acc
0B80 D082      1032            pop dpl
0B82 D083      1032            pop dph
0B84 C3        1033       clr c
0B85 1208BE    1034            lcall check_stop
0B88 300894    1035       jnb start_stop_flag, intermediate_stop_jump ; checks the flag if 0, then means stop was pressed, if 1 keep on going 
0B8B 300113    1036            jnb s_flag, FSM_state5_done
0B8E C201      1037            clr s_flag
0B90 1206DD    1038            lcall Display_Data
0B93 743C      1039            mov a, #0x3C    ; set a to 60
0B95 120888    1040            lcall Compare_temp
0B98           1041   
0B98 200006    1042       jb mf, FSM_state5_done
0B9B 753F00    1043       mov seconds, #0x00     ; set time to 0
0B9E 754B06    1044       mov FSM_state, #6
0BA1           1045   FSM_state5_done: 
0BA1 020A12    1046       ljmp FSM
0BA4           1047   
0BA4           1048   intermediate_state_0:
0BA4 020A12    1049            ljmp FSM
0BA7           1050            
0BA7           1051   FSM_state6:
0BA7 B406FA    1052            cjne a, #6, intermediate_state_0
0BAA           1053            
0BAA D2A9      1054            setb ET0
0BAC           1055   
0BAC 1208E1    1056       lcall Display_special_char1
0BAF           1057   
0BAF 754D7C    1058            mov Melody_Reload+1, #high(B3_KEY)
0BB2 754CBD    1059            mov Melody_Reload+0, #low(B3_KEY)
0BB5 C002      1060            push AR2
0BB7 7A78      1060            mov R2, #120
0BB9 1200B5    1060            lcall ?Wait_Milli_Seconds
0BBC D002      1060            pop AR2
0BBE           1061   
0BBE 754D6C    1062            mov Melody_Reload+1, #high(A3_KEY)
0BC1 754CA1    1063            mov Melody_Reload+0, #low(A3_KEY)
0BC4 C002      1064            push AR2
0BC6 7A78      1064            mov R2, #120
0BC8 1200B5    1064            lcall ?Wait_Milli_Seconds
0BCB D002      1064            pop AR2
0BCD           1065   
0BCD 754D63    1066            mov Melody_Reload+1, #high(Gs3_KEY)
0BD0 754CC0    1067            mov Melody_Reload+0, #low(Gs3_KEY)
0BD3 C002      1068            push AR2
0BD5 7A78      1068            mov R2, #120
0BD7 1200B5    1068            lcall ?Wait_Milli_Seconds
0BDA D002      1068            pop AR2
0BDC           1069            
0BDC 754D6C    1070            mov Melody_Reload+1, #high(A3_KEY)
0BDF 754CA1    1071            mov Melody_Reload+0, #low(A3_KEY)
0BE2 C002      1072            push AR2
0BE4 7A78      1072            mov R2, #120
0BE6 1200B5    1072            lcall ?Wait_Milli_Seconds
0BE9 D002      1072            pop AR2
0BEB           1073   
0BEB 120965    1074            lcall clear_screen_func
0BEE           1075   ;----------------------------------------
0BEE 120923    1076            lcall Display_special_char2
0BF1           1077   
0BF1 754D84    1078            mov Melody_Reload+1, #high(C4_KEY)
0BF4 754C05    1079            mov Melody_Reload+0, #low(C4_KEY)
0BF7 C002      1080            push AR2
0BF9 7AF0      1080            mov R2, #240
0BFB 1200B5    1080            lcall ?Wait_Milli_Seconds
0BFE D002      1080            pop AR2
0C00 C002      1081            push AR2
0C02 7AF0      1081            mov R2, #240
0C04 1200B5    1081            lcall ?Wait_Milli_Seconds
0C07 D002      1081            pop AR2
0C09           1082            
0C09 120965    1083       lcall clear_screen_func
0C0C 1208E1    1084       lcall Display_special_char1
0C0F           1085       
0C0F 754D84    1086            mov Melody_Reload+1, #high(D4_KEY)
0C12 754C05    1087            mov Melody_Reload+0, #low(D4_KEY)
0C15 C002      1088            push AR2
0C17 7A78      1088            mov R2, #120
0C19 1200B5    1088            lcall ?Wait_Milli_Seconds
0C1C D002      1088            pop AR2
0C1E           1089   
0C1E 754D84    1090            mov Melody_Reload+1, #high(C4_KEY)
0C21 754C05    1091            mov Melody_Reload+0, #low(C4_KEY)
0C24 C002      1092            push AR2
0C26 7A78      1092            mov R2, #120
0C28 1200B5    1092            lcall ?Wait_Milli_Seconds
0C2B D002      1092            pop AR2
0C2D           1093   
0C2D 754DBE    1094            mov Melody_Reload+1, #high(B4_KEY)
0C30 754C5F    1095            mov Melody_Reload+0, #low(B4_KEY)
0C33 C002      1096            push AR2
0C35 7A78      1096            mov R2, #120
0C37 1200B5    1096            lcall ?Wait_Milli_Seconds
0C3A D002      1096            pop AR2
0C3C           1097   
0C3C 754DC2    1098            mov Melody_Reload+1, #high(C5_KEY)
0C3F 754C12    1099            mov Melody_Reload+0, #low(C5_KEY)
0C42 C002      1100            push AR2
0C44 7A78      1100            mov R2, #120
0C46 1200B5    1100            lcall ?Wait_Milli_Seconds
0C49 D002      1100            pop AR2
0C4B           1101   
0C4B 120965    1102            lcall clear_screen_func
0C4E 120923    1103       lcall Display_special_char2
0C51           1104            
0C51 754DCE    1105            mov Melody_Reload+1, #high(E5_KEY)
0C54 754CD7    1106            mov Melody_Reload+0, #low(E5_KEY)
0C57 C002      1107            push AR2
0C59 7AF0      1107            mov R2, #240
0C5B 1200B5    1107            lcall ?Wait_Milli_Seconds
0C5E D002      1107            pop AR2
0C60 C002      1108            push AR2
0C62 7AF0      1108            mov R2, #240
0C64 1200B5    1108            lcall ?Wait_Milli_Seconds
0C67 D002      1108            pop AR2
0C69           1109   
0C69 120965    1110            lcall clear_screen_func
0C6C 1208E1    1111       lcall Display_special_char1
0C6F           1112   ;-----------------------------------------
0C6F 754DD1    1113            mov Melody_Reload+1, #high(F5_KEY)
0C72 754C96    1114            mov Melody_Reload+0, #low(F5_KEY)
0C75 C002      1115            push AR2
0C77 7A78      1115            mov R2, #120
0C79 1200B5    1115            lcall ?Wait_Milli_Seconds
0C7C D002      1115            pop AR2
0C7E           1116   
0C7E 754DCE    1117            mov Melody_Reload+1, #high(E5_KEY)
0C81 754CD7    1118            mov Melody_Reload+0, #low(E5_KEY)
0C84 C002      1119            push AR2
0C86 7A78      1119            mov R2, #120
0C88 1200B5    1119            lcall ?Wait_Milli_Seconds
0C8B D002      1119            pop AR2
0C8D           1120   
0C8D 754DCB    1121            mov Melody_Reload+1, #high(Ds5_KEY)
0C90 754CEB    1122            mov Melody_Reload+0, #low(Ds5_KEY)
0C93 C002      1123            push AR2
0C95 7A78      1123            mov R2, #120
0C97 1200B5    1123            lcall ?Wait_Milli_Seconds
0C9A D002      1123            pop AR2
0C9C           1124   
0C9C 754DCE    1125            mov Melody_Reload+1, #high(E5_KEY)
0C9F 754CD7    1126            mov Melody_Reload+0, #low(E5_KEY)
0CA2 C002      1127            push AR2
0CA4 7A78      1127            mov R2, #120
0CA6 1200B5    1127            lcall ?Wait_Milli_Seconds
0CA9 D002      1127            pop AR2
0CAB           1128   
0CAB 120965    1129            lcall clear_screen_func
0CAE 120923    1130       lcall Display_special_char2
0CB1           1131   ;-----------------------------------------
0CB1 754DDF    1132            mov Melody_Reload+1, #high(B5_KEY)
0CB4 754C30    1133            mov Melody_Reload+0, #low(B5_KEY)
0CB7 C002      1134            push AR2
0CB9 7A78      1134            mov R2, #120
0CBB 1200B5    1134            lcall ?Wait_Milli_Seconds
0CBE D002      1134            pop AR2
0CC0           1135   
0CC0 754DDB    1136            mov Melody_Reload+1, #high(A5_KEY)
0CC3 754C29    1137            mov Melody_Reload+0, #low(A5_KEY)
0CC6 C002      1138            push AR2
0CC8 7A78      1138            mov R2, #120
0CCA 1200B5    1138            lcall ?Wait_Milli_Seconds
0CCD D002      1138            pop AR2
0CCF           1139   
0CCF 754DD8    1140            mov Melody_Reload+1, #high(Gs5_KEY)
0CD2 754CF7    1141            mov Melody_Reload+0, #low(Gs5_KEY)
0CD5 C002      1142            push AR2
0CD7 7A78      1142            mov R2, #120
0CD9 1200B5    1142            lcall ?Wait_Milli_Seconds
0CDC D002      1142            pop AR2
0CDE           1143   
0CDE 754DDB    1144            mov Melody_Reload+1, #high(A5_KEY)
0CE1 754C29    1145            mov Melody_Reload+0, #low(A5_KEY)
0CE4 C002      1146            push AR2
0CE6 7A78      1146            mov R2, #120
0CE8 1200B5    1146            lcall ?Wait_Milli_Seconds
0CEB D002      1146            pop AR2
0CED           1147   
0CED 120965    1148            lcall clear_screen_func
0CF0 1208E1    1149       lcall Display_special_char1
0CF3           1150   ;--------------------------------------
0CF3 754DDF    1151            mov Melody_Reload+1, #high(B5_KEY)
0CF6 754C30    1152            mov Melody_Reload+0, #low(B5_KEY)
0CF9 C002      1153            push AR2
0CFB 7A78      1153            mov R2, #120
0CFD 1200B5    1153            lcall ?Wait_Milli_Seconds
0D00 D002      1153            pop AR2
0D02           1154   
0D02 754DDB    1155            mov Melody_Reload+1, #high(A5_KEY)
0D05 754C29    1156            mov Melody_Reload+0, #low(A5_KEY)
0D08 C002      1157            push AR2
0D0A 7A78      1157            mov R2, #120
0D0C 1200B5    1157            lcall ?Wait_Milli_Seconds
0D0F D002      1157            pop AR2
0D11           1158   
0D11 754DD8    1159            mov Melody_Reload+1, #high(Gs5_KEY)
0D14 754CF7    1160            mov Melody_Reload+0, #low(Gs5_KEY)
0D17 C002      1161            push AR2
0D19 7A78      1161            mov R2, #120
0D1B 1200B5    1161            lcall ?Wait_Milli_Seconds
0D1E D002      1161            pop AR2
0D20           1162   
0D20 754DDB    1163            mov Melody_Reload+1, #high(A5_KEY)
0D23 754C29    1164            mov Melody_Reload+0, #low(A5_KEY)
0D26 C002      1165            push AR2
0D28 7A78      1165            mov R2, #120
0D2A 1200B5    1165            lcall ?Wait_Milli_Seconds
0D2D D002      1165            pop AR2
0D2F           1166   
0D2F 120965    1167            lcall clear_screen_func
0D32 120923    1168       lcall Display_special_char2
0D35           1169   
0D35 754DE1    1170            mov Melody_Reload+1, #high(C6_KEY)
0D38 754C05    1171            mov Melody_Reload+0, #low(C6_KEY)
0D3B C002      1172            push AR2
0D3D 7AF0      1172            mov R2, #240
0D3F 1200B5    1172            lcall ?Wait_Milli_Seconds
0D42 D002      1172            pop AR2
0D44 C002      1173            push AR2
0D46 7AF0      1173            mov R2, #240
0D48 1200B5    1173            lcall ?Wait_Milli_Seconds
0D4B D002      1173            pop AR2
0D4D           1174            
0D4D 120965    1175            lcall clear_screen_func
0D50 1208E1    1176       lcall Display_special_char1
0D53           1177   ;----------------------------------------
0D53 754DDB    1178            mov Melody_Reload+1, #high(A5_KEY)
0D56 754C29    1179            mov Melody_Reload+0, #low(A5_KEY)
0D59 C002      1180            push AR2
0D5B 7AF0      1180            mov R2, #240
0D5D 1200B5    1180            lcall ?Wait_Milli_Seconds
0D60 D002      1180            pop AR2
0D62           1181   
0D62 754DE1    1182            mov Melody_Reload+1, #high(C6_KEY)
0D65 754C05    1183            mov Melody_Reload+0, #low(C6_KEY)
0D68 C002      1184            push AR2
0D6A 7AF0      1184            mov R2, #240
0D6C 1200B5    1184            lcall ?Wait_Milli_Seconds
0D6F D002      1184            pop AR2
0D71           1185   
0D71 120965    1186            lcall clear_screen_func
0D74 120923    1187       lcall Display_special_char2
0D77           1188   ;-----------------------------------------
0D77 754DDF    1189            mov Melody_Reload+1, #high(B5_KEY)
0D7A 754C30    1190            mov Melody_Reload+0, #low(B5_KEY)
0D7D C002      1191            push AR2
0D7F 7AF0      1191            mov R2, #240
0D81 1200B5    1191            lcall ?Wait_Milli_Seconds
0D84 D002      1191            pop AR2
0D86           1192   
0D86 754DDB    1193            mov Melody_Reload+1, #high(A5_KEY)
0D89 754C29    1194            mov Melody_Reload+0, #low(A5_KEY)
0D8C C002      1195            push AR2
0D8E 7AF0      1195            mov R2, #240
0D90 1200B5    1195            lcall ?Wait_Milli_Seconds
0D93 D002      1195            pop AR2
0D95           1196   
0D95 120965    1197            lcall clear_screen_func
0D98 1208E1    1198       lcall Display_special_char1
0D9B           1199   
0D9B 754DD6    1200            mov Melody_Reload+1, #high(G5_KEY)
0D9E 754C29    1201            mov Melody_Reload+0, #low(A5_KEY)
0DA1 C002      1202            push AR2
0DA3 7AF0      1202            mov R2, #240
0DA5 1200B5    1202            lcall ?Wait_Milli_Seconds
0DA8 D002      1202            pop AR2
0DAA           1203   
0DAA 754DDB    1204            mov Melody_Reload+1, #high(A5_KEY)
0DAD 754C29    1205            mov Melody_Reload+0, #low(A5_KEY)
0DB0 C002      1206            push AR2
0DB2 7AF0      1206            mov R2, #240
0DB4 1200B5    1206            lcall ?Wait_Milli_Seconds
0DB7 D002      1206            pop AR2
0DB9           1207   
0DB9 120965    1208            lcall clear_screen_func
0DBC 120923    1209       lcall Display_special_char2
0DBF           1210   ;-----------------------------------------
0DBF 754DDF    1211            mov Melody_Reload+1, #high(B5_KEY)
0DC2 754C30    1212            mov Melody_Reload+0, #low(B5_KEY)
0DC5 C002      1213            push AR2
0DC7 7AF0      1213            mov R2, #240
0DC9 1200B5    1213            lcall ?Wait_Milli_Seconds
0DCC D002      1213            pop AR2
0DCE           1214   
0DCE 754DDB    1215            mov Melody_Reload+1, #high(A5_KEY)
0DD1 754C29    1216            mov Melody_Reload+0, #low(A5_KEY)
0DD4 C002      1217            push AR2
0DD6 7AF0      1217            mov R2, #240
0DD8 1200B5    1217            lcall ?Wait_Milli_Seconds
0DDB D002      1217            pop AR2
0DDD           1218   
0DDD 120965    1219            lcall clear_screen_func
0DE0 1208E1    1220       lcall Display_special_char1
0DE3           1221   
0DE3 754DD6    1222            mov Melody_Reload+1, #high(G5_KEY)
0DE6 754C29    1223            mov Melody_Reload+0, #low(A5_KEY)
0DE9 C002      1224            push AR2
0DEB 7AF0      1224            mov R2, #240
0DED 1200B5    1224            lcall ?Wait_Milli_Seconds
0DF0 D002      1224            pop AR2
0DF2           1225   
0DF2 754DDB    1226            mov Melody_Reload+1, #high(A5_KEY)
0DF5 754C29    1227            mov Melody_Reload+0, #low(A5_KEY)
0DF8 C002      1228            push AR2
0DFA 7AF0      1228            mov R2, #240
0DFC 1200B5    1228            lcall ?Wait_Milli_Seconds
0DFF D002      1228            pop AR2
0E01           1229   
0E01 120965    1230            lcall clear_screen_func
0E04 120923    1231       lcall Display_special_char2
0E07           1232   ;-----------------------------------------
0E07 754DDF    1233            mov Melody_Reload+1, #high(B5_KEY)
0E0A 754C30    1234            mov Melody_Reload+0, #low(B5_KEY)
0E0D C002      1235            push AR2
0E0F 7AF0      1235            mov R2, #240
0E11 1200B5    1235            lcall ?Wait_Milli_Seconds
0E14 D002      1235            pop AR2
0E16           1236   
0E16 754DDB    1237            mov Melody_Reload+1, #high(A5_KEY)
0E19 754C29    1238            mov Melody_Reload+0, #low(A5_KEY)
0E1C C002      1239            push AR2
0E1E 7AF0      1239            mov R2, #240
0E20 1200B5    1239            lcall ?Wait_Milli_Seconds
0E23 D002      1239            pop AR2
0E25           1240   
0E25 120965    1241            lcall clear_screen_func
0E28 1208E1    1242       lcall Display_special_char1
0E2B           1243   
0E2B 754DD6    1244            mov Melody_Reload+1, #high(G5_KEY)
0E2E 754C29    1245            mov Melody_Reload+0, #low(A5_KEY)
0E31 C002      1246            push AR2
0E33 7AF0      1246            mov R2, #240
0E35 1200B5    1246            lcall ?Wait_Milli_Seconds
0E38 D002      1246            pop AR2
0E3A           1247            
0E3A 754DD4    1248            mov Melody_Reload+1, #high(Fs5_KEY)
0E3D 754C30    1249            mov Melody_Reload+0, #low(Fs5_KEY)
0E40 C002      1250            push AR2
0E42 7AF0      1250            mov R2, #240
0E44 1200B5    1250            lcall ?Wait_Milli_Seconds
0E47 D002      1250            pop AR2
0E49           1251   
0E49 120965    1252            lcall clear_screen_func
0E4C 120923    1253       lcall Display_special_char2
0E4F           1254   
0E4F 754DCE    1255            mov Melody_Reload+1, #high(E5_KEY)
0E52 754CD7    1256            mov Melody_Reload+0, #low(E5_KEY)
0E55 C002      1257            push AR2
0E57 7AF0      1257            mov R2, #240
0E59 1200B5    1257            lcall ?Wait_Milli_Seconds
0E5C D002      1257            pop AR2
0E5E C002      1258            push AR2
0E60 7AF0      1258            mov R2, #240
0E62 1200B5    1258            lcall ?Wait_Milli_Seconds
0E65 D002      1258            pop AR2
0E67           1259   
0E67 120965    1260            lcall clear_screen_func
0E6A 1208E1    1261       lcall Display_special_char1
0E6D           1262   
0E6D 02099E    1263       ljmp main
0E70           1264   EN
