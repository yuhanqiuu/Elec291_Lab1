                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE)))
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   EQU P1.2 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 020992      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204E4      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
002B            114   org 0x002B
002B 020514     115            ljmp Timer2_ISR
002E            116   
002E            117   ;---------------------------------;
002E            118   ; Define any constant string here ;
002E            119   ;---------------------------------;
002E            120   ;                          1234567890123456    <- This helps determine the location of the counter
002E 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
003F 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0050 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
005E 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
006C 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
007A 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
0088 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
0096 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
00A7 484F5400   129   Hot_temp: db 'HOT',0
00AB            130   ;---------------------------------------------
00AB            131   cseg
00AB            132   
00AB            133   LCD_RS equ P1.3
00AB            134   LCD_E  equ P1.4
00AB            135   LCD_D4 equ P0.0
00AB            136   LCD_D5 equ P0.1
00AB            137   LCD_D6 equ P0.2
00AB            138   LCD_D7 equ P0.3
00AB            139   
                141   $LIST
017D            143   
017D            144   ;---------------------------------;
017D            145   ; Define variables here           ;
017D            146   ;---------------------------------;
017D            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03ED            185   
03ED            186   ;---------------------------------;
03ED            187   ; Define special chars here       ;
03ED            188   ;---------------------------------;
03ED            189   fire:
03ED 7440       190            mov   A,#40H         ;Load the location where we want to store
03EF 1200FF     191       lcall ?WriteCommand    ;Send the command
03F2 7409       192       mov   A,#09H         ;Load row 1 data
03F4 1200FA     193       lcall ?WriteData   ;Send the data
03F7 7400       194       mov   A,#00H         ;Load row 2 data
03F9 1200FA     195       lcall ?WriteData   ;Send the data
03FC 7414       196       mov   A,#14H         ;Load row 3 data
03FE 1200FA     197       lcall ?WriteData   ;Send the data
0401 7406       198       mov   A,#06H         ;Load row 4 data
0403 1200FA     199       lcall ?WriteData   ;Send the data
0406 740F       200       mov   A,#0FH         ;Load row 5 data
0408 1200FA     201       lcall ?WriteData   ;Send the data
040B 741B       202       mov   A,#1BH         ;Load row 6 data
040D 1200FA     203       lcall ?WriteData   ;Send the data
0410 7411       204       mov   A,#11H         ;Load row 7 data
0412 11FA       205       acall ?WriteData   ;Send the data
0414 740E       206       mov   A,#0EH         ;Load row 8 data
0416 1200FA     207       lcall ?WriteData   ;Send the data
0419 22         208       ret                  ;Return from routine
041A            209   
041A            210   double_eighth:
041A 7448       211       mov   A,#48H         ;Load the location where we want to store
041C 1200FF     212       lcall ?WriteCommand    ;Send the command
041F 7400       213       mov   A,#00H         ;Load row 1 data
0421 1200FA     214       lcall ?WriteData   ;Send the data
0424 740F       215       mov   A,#0FH         ;Load row 2 data
0426 1200FA     216       lcall ?WriteData   ;Send the data
0429 7409       217       mov   A,#09H         ;Load row 3 data
042B 1200FA     218       lcall ?WriteData   ;Send the data
042E 7409       219       mov   A,#09H         ;Load row 4 data
0430 1200FA     220       lcall ?WriteData   ;Send the data
0433 741B       221       mov   A,#1BH         ;Load row 5 data
0435 1200FA     222       lcall ?WriteData   ;Send the data
0438 741B       223       mov   A,#1BH         ;Load row 6 data
043A 1200FA     224       lcall ?WriteData   ;Send the data
043D 7400       225       mov   A,#00H         ;Load row 7 data
043F 11FA       226       acall ?WriteData   ;Send the data
0441 7400       227       mov   A,#00H         ;Load row 8 data
0443 1200FA     228       lcall ?WriteData   ;Send the data
0446 22         229       ret                  ;Return from routine
0447            230       
0447            231   eighth:
0447 7450       232       mov   A,#50H         ;Load the location where we want to store
0449 1200FF     233       lcall ?WriteCommand    ;Send the command
044C 7404       234       mov   A,#04H         ;Load row 1 data
044E 1200FA     235       lcall ?WriteData   ;Send the data
0451 7406       236       mov   A,#06H         ;Load row 2 data
0453 1200FA     237       lcall ?WriteData   ;Send the data
0456 7405       238       mov   A,#05H         ;Load row 3 data
0458 1200FA     239       lcall ?WriteData   ;Send the data
045B 7404       240       mov   A,#04H         ;Load row 4 data
045D 1200FA     241       lcall ?WriteData   ;Send the data
0460 740C       242       mov   A,#0CH         ;Load row 5 data
0462 1200FA     243       lcall ?WriteData   ;Send the data
0465 7414       244       mov   A,#14H         ;Load row 6 data
0467 1200FA     245       lcall ?WriteData   ;Send the data
046A 7408       246       mov   A,#08H         ;Load row 7 data
046C 11FA       247       acall ?WriteData   ;Send the data
046E 7400       248       mov   A,#00H         ;Load row 8 data
0470 1200FA     249       lcall ?WriteData   ;Send the data
0473 22         250       ret                  ;Return from routine
0474            251   
0474            252   heart:
0474 7458       253       mov   A,#58H         ;Load the location where we want to store
0476 1200FF     254       lcall ?WriteCommand    ;Send the command
0479 7400       255       mov   A,#00H         ;Load row 1 data
047B 1200FA     256       lcall ?WriteData   ;Send the data
047E 740A       257       mov   A,#0AH         ;Load row 2 data
0480 1200FA     258       lcall ?WriteData   ;Send the data
0483 7415       259       mov   A,#15H         ;Load row 3 data
0485 1200FA     260       lcall ?WriteData   ;Send the data
0488 7411       261       mov   A,#11H         ;Load row 4 data
048A 1200FA     262       lcall ?WriteData   ;Send the data
048D 7411       263       mov   A,#11H         ;Load row 5 data
048F 1200FA     264       lcall ?WriteData   ;Send the data
0492 740A       265       mov   A,#0AH         ;Load row 6 data
0494 1200FA     266       lcall ?WriteData   ;Send the data
0497 7404       267       mov   A,#04H         ;Load row 7 data
0499 11FA       268       acall ?WriteData   ;Send the data
049B 7400       269       mov   A,#00H         ;Load row 8 data
049D 1200FA     270       lcall ?WriteData   ;Send the data
04A0 22         271       ret                  ;Return from routine
04A1            272   bell:
04A1 7460       273       mov   A,#60H         ;Load the location where we want to store
04A3 1200FF     274       lcall ?WriteCommand    ;Send the command
04A6 7400       275       mov   A,#00H         ;Load row 1 data
04A8 1200FA     276       lcall ?WriteData   ;Send the data
04AB 7404       277       mov   A,#04H          ;Load row 2 data
04AD 1200FA     278       lcall ?WriteData   ;Send the data
04B0 740E       279       mov   A,#0eH          ;Load row 3 data
04B2 1200FA     280       lcall ?WriteData   ;Send the data
04B5 740E       281       mov   A,#0eH         ;Load row 4 data
04B7 1200FA     282       lcall ?WriteData   ;Send the data
04BA 740E       283       mov   A,#0eH         ;Load row 5 data
04BC 1200FA     284       lcall ?WriteData   ;Send the data
04BF 741F       285       mov   A,#1fH         ;Load row 6 data
04C1 1200FA     286       lcall ?WriteData   ;Send the data
04C4 7400       287       mov   A,#00H         ;Load row 7 data
04C6 11FA       288       acall ?WriteData   ;Send the data
04C8 7404       289       mov   A,#04H         ;Load row 8 data
04CA 1200FA     290       lcall ?WriteData   ;Send the data
04CD 22         291       ret                  ;Return from routine
04CE            292   
04CE            293   ;---------------------------------;
04CE            294   ; Routine to initialize the ISR   ;
04CE            295   ; for timer 0                     ;
04CE            296   ;---------------------------------;
04CE            297   Timer0_Init:
04CE 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04D1 E589       299            mov a, TMOD
04D3 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04D5 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04D7 F589       302            mov TMOD, a
04D9 758CF0     303            mov TH0, #high(TIMER0_RELOAD)
04DC 758A2C     304            mov TL0, #low(TIMER0_RELOAD)
04DF            305            ; Enable the timer and interrupts
04DF D2A9       306       setb ET0  ; Enable timer 0 interrupt
04E1 D28C       307       setb TR0  ; Start timer 0
04E3 22         308            ret
04E4            309   
04E4            310   ;---------------------------------;
04E4            311   ; ISR for timer 0.  Set to execute;
04E4            312   ; every 1/4096Hz to generate a    ;
04E4            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04E4            314   ;---------------------------------;
04E4            315   Timer0_ISR:
04E4            316            ;clr TF0  ; According to the data sheet this is done for us already.
04E4            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04E4 C28C       318            clr TR0
04E6 854D8C     319            mov TH0, Melody_Reload+1
04E9 854C8A     320            mov TL0, Melody_Reload+0
04EC D28C       321            setb TR0
04EE B292       322            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04F0 32         323            reti
04F1            324   
04F1            325   ;---------------------------------;
04F1            326   ; Routine to initialize the ISR   ;
04F1            327   ; for timer 2                     ;
04F1            328   ;---------------------------------;
04F1            329   Timer2_Init:
04F1 75C800     330            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04F4 75CDD7     331            mov TH2, #high(TIMER2_RELOAD)
04F7 75CC79     332            mov TL2, #low(TIMER2_RELOAD)
04FA            333            ; Set the reload value
04FA 75C9A0     334            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04FD 75CBD7     335            mov RCMP2H, #high(TIMER2_RELOAD)
0500 75CA79     336            mov RCMP2L, #low(TIMER2_RELOAD)
0503            337            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0503 E4         338            clr a
0504 F53D       339            mov Count1ms+0, a
0506 F53E       340            mov Count1ms+1, a
0508 754700     341            mov pwm, #0
050B            342            ; Enable the timer and interrupts
050B 754600     343            mov pwm_counter,#0
050E 439B80     344            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0511 D2CA       345       setb TR2  ; Enable timer 2
0513 22         346            ret
0514            347   
0514            348   ;---------------------------------;
0514            349   ; ISR for timer 2 ;
0514            350   ;---------------------------------;
0514            351   Timer2_ISR:
0514 C2CF       352            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0516 B284       353            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0518            354                    
0518            355            ; The two registers used in the ISR must be saved in the stack
0518 C0D0       356            push psw
051A C0E0       357            push acc
051C 0546       358            inc pwm_counter
051E C3         359            clr c
051F E547       360            mov a, pwm
0521 9546       361            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0523 B3         362            cpl c
0524 9290       363            mov PWM_OUT, c
0526 E546       364            mov a, pwm_counter
0528            365   
0528 B46407     366            cjne a, #100, Timer2_ISR_done
052B 754600     367            mov pwm_counter, #0
052E 053F       368            inc seconds
0530 D201       369            setb s_flag
0532            370            
0532            371   Timer2_ISR_done:
0532            372   
0532 D0E0       373            pop acc
0534 D0D0       374            pop psw
0536 32         375            reti
0537            376   
0537            377   
0537            378   ;---------------------------------;
0537            379   ; Temperature senseor function    ;
0537            380   ;---------------------------------;
0537            381   Init_All:
0537            382            ; Configure all the pins for biderectional I/O
0537 75AC00     383            mov     P3M1, #0x00
053A 75AD00     384            mov     P3M2, #0x00
053D 75B300     385            mov     P1M1, #0x00
0540 75B400     386            mov     P1M2, #0x00
0543 75B100     387            mov     P0M1, #0x00
0546 75B200     388            mov     P0M2, #0x00
0549            389            
0549 438E10     390            orl     CKCON, #0x10 ; CLK is the input for timer 1
054C 438780     391            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
054F 759852     392            mov     SCON, #0x52
0552 53C4DF     393            anl     T3CON, #0b11011111
0555 53890F     394            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0558 438920     395            orl     TMOD, #0x20 ; Timer 1 Mode 2
055B 758D70     396            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
055E D28E       397            setb TR1
0560            398            ; Using timer 0 for delay functions.  Initialize here:
0560            399            ;clr    TR0 ; Stop timer 0
0560 438E08     400            orl     CKCON,#0x08 ; CLK is the input for timer 0
0563 5389F0     401            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0566 438901     402            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0569            403            
0569            404            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0569 43B382     405            orl     P1M1, #0b10000010
056C 53B47D     406            anl     P1M2, #0b01111101
056F            407            
056F            408            ; Initialize and start the ADC:
056F 53E8F0     409            anl ADCCON0, #0xF0
0572 43E807     410            orl ADCCON0, #0x07 ; Select channel 7
0575            411            ; AINDIDS select if some pins are analog inputs or digital I/O:
0575 75F600     412            mov AINDIDS, #0x00 ; Disable all analog inputs
0578 43F681     413            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
057B 43E101     414            orl ADCCON1, #0x01 ; Enable ADC
057E            415            
057E 22         416            ret
057F            417   
057F            418   ;---------------------------------;
057F            419   ;         5_pushbuttons function               ;
057F            420   ;---------------------------------;
057F            421   LCD_PB:
057F            422            ; Set variables to 1: 'no push button pressed'
057F D202       423            setb PB0
0581 D203       424            setb PB1
0583 D204       425            setb PB2
0585 D205       426            setb PB3
0587 D206       427            setb PB4
0589            428            ; The input pin used to check set to '1'
0589 D295       429            setb P1.5
058B            430            
058B            431            ; Check if any push button is pressed
058B C280       432            clr P0.0
058D C281       433            clr P0.1
058F C282       434            clr P0.2
0591 C283       435            clr P0.3
0593 C293       436            clr P1.3
0595 20954D     437            jb P1.5, LCD_PB_Done
0598            438   
0598            439            ; Debounce
0598 C002       440            push AR2
059A 7A32       440            mov R2, #50
059C 1200B5     440            lcall ?Wait_Milli_Seconds
059F D002       440            pop AR2
05A1 209541     441            jb P1.5, LCD_PB_Done
05A4            442   
05A4            443            ; Set the LCD data pins to logic 1
05A4 D280       444            setb P0.0
05A6 D281       445            setb P0.1
05A8 D282       446            setb P0.2
05AA D283       447            setb P0.3
05AC D293       448            setb P1.3
05AE            449            
05AE            450            ; Check the push buttons one by one
05AE C293       451            clr P1.3
05B0 A295       452            mov c, P1.5
05B2 9206       453            mov PB4, c
05B4 D293       454            setb P1.3
05B6 300636     455            jnb PB4,increment_soak_temp
05B9            456   
05B9 C280       457            clr P0.0
05BB A295       458            mov c, P1.5
05BD 9205       459            mov PB3, c
05BF D280       460            setb P0.0
05C1 300537     461            jnb PB3, increment_soak_time
05C4            462            
05C4 C281       463            clr P0.1
05C6 A295       464            mov c, P1.5
05C8 9204       465            mov PB2, c
05CA D281       466            setb P0.1
05CC 300438     467            jnb PB2, increment_reflow_temp
05CF            468            
05CF C282       469            clr P0.2
05D1 A295       470            mov c, P1.5
05D3 9203       471            mov PB1, c
05D5 D282       472            setb P0.2
05D7 300339     473            jnb PB1, increment_reflow_time
05DA            474            
05DA C283       475            clr P0.3
05DC A295       476            mov c, P1.5
05DE 9202       477            mov PB0, c
05E0 D283       478            setb P0.3
05E2 30023A     479            jnb PB0, start_stop
05E5            480   
05E5            481   LCD_PB_Done:
05E5 C002       482            push AR2
05E7 7A19       482            mov R2, #25
05E9 1200B5     482            lcall ?Wait_Milli_Seconds
05EC D002       482            pop AR2                 
05EE 22         483            ret
05EF            484   
05EF            485   increment_soak_temp:
05EF 0545       486            inc soak_temp
05F1 E545       487            mov a, soak_temp
05F3 B4F0EF     488            cjne a, #0xF0, LCD_PB_Done
05F6 754500     489            mov soak_temp, #0x00
05F9 80EA       490            sjmp LCD_PB_Done
05FB            491   increment_soak_time:
05FB 0544       492            inc soak_time
05FD E544       493            mov a, soak_time
05FF B478E3     494            cjne a, #0x78, LCD_PB_Done
0602 754400     495            mov soak_time, #0x00
0605 80DE       496            sjmp LCD_PB_Done
0607            497   increment_reflow_temp: 
0607 0543       498            inc reflow_temp
0609 E543       499            mov a, reflow_temp
060B B4F0D7     500            cjne a, #0xF0, LCD_PB_Done
060E 754300     501            mov reflow_temp, #0x00
0611 80D2       502            sjmp LCD_PB_Done
0613            503   increment_reflow_time:
0613 0542       504            inc reflow_time
0615 E542       505            mov a, reflow_time
0617 B44BCB     506            cjne a, #0x4B, LCD_PB_Done
061A 754200     507            mov reflow_time, #0x00
061D 80C6       508            sjmp LCD_PB_Done
061F            509   
061F            510   start_stop:
061F B208       511            cpl start_stop_flag
0621 80C2       512            sjmp LCD_PB_Done
0623            513   
0623            514   ; We can display a number any way we want.  In this case with
0623            515   ; four decimal places.
0623            516   Display_formated_BCD:
0623 C0E0       517            push acc
0625 7404       517            mov a, #4
0627 14         517            dec a
0628 120144     517            lcall ?Set_Cursor_1 ; Select column and row
062B D0E0       517            pop acc ; display To
062D C000       518            push ar0
062F A83B       518            mov r0, bcd+3
0631 120149     518            lcall ?Display_BCD
0634 D000       518            pop ar0
0636 C000       519            push ar0
0638 A83A       519            mov r0, bcd+2
063A 120149     519            lcall ?Display_BCD
063D D000       519            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
063F            520            
063F            521            ;send the BCD value to the MATLAB script
063F C000       522            push ar0
0641 A83B       522            mov r0, bcd+3
0643 120167     522            lcall ?Send_BCD
0646 D000       522            pop ar0
0648 C000       523            push ar0
064A A83A       523            mov r0, bcd+2
064C 120167     523            lcall ?Send_BCD
064F D000       523            pop ar0
0651 C000       524            push ar0
0653 A839       524            mov r0, bcd+1
0655 120167     524            lcall ?Send_BCD
0658 D000       524            pop ar0
065A 740D       525            mov a, #'\r'
065C 12015F     526            lcall putchar
065F 740A       527            mov a, #'\n'
0661 12015F     528            lcall putchar
0664            529            ;Set_Cursor(1, 13)
0664            530            ;Send_Constant_String(#22) ; display Tj=22
0664            531            
0664 C0E0       532            push acc
0666 740E       532            mov a, #14
0668 14         532            dec a
0669 120142     532            lcall ?Set_Cursor_2 ; Select column and row
066C D0E0       532            pop acc
066E E53F       533            mov a,seconds
0670 120674     534            lcall SendToLCD
0673            535            
0673 22         536            ret
0674            537   
0674            538   SendToLCD:
0674 75F064     539   mov b, #100
0677 84         540   div ab
0678 4430       541   orl a, #0x30 ; Convert hundreds to ASCII
067A 1200FA     542   lcall ?WriteData ; Send to LCD
067D E5F0       543   mov a, b ; Remainder is in register b
067F 75F00A     544   mov b, #10
0682 84         545   div ab
0683 4430       546   orl a, #0x30 ; Convert tens to ASCII
0685 1200FA     547   lcall ?WriteData; Send to LCD
0688 E5F0       548   mov a, b
068A 4430       549   orl a, #0x30 ; Convert units to ASCII
068C 1200FA     550   lcall ?WriteData; Send to LCD
068F 22         551   ret
0690            552   
0690            553   ;-------------------------------------------------;
0690            554   ; Display values from the pushbutton to the LCD   ;
0690            555   ;-------------------------------------------------;
0690            556   
0690            557   Display_PushButtons_LCD:
0690 C0E0       558            push acc
0692 7402       558            mov a, #2
0694 14         558            dec a
0695 120142     558            lcall ?Set_Cursor_2 ; Select column and row
0698 D0E0       558            pop acc
069A E545       559            mov a, soak_temp
069C 120674     560            lcall SendToLCD
069F            561            
069F C0E0       562            push acc
06A1 7406       562            mov a, #6
06A3 14         562            dec a
06A4 120142     562            lcall ?Set_Cursor_2 ; Select column and row
06A7 D0E0       562            pop acc
06A9 E544       563            mov a, soak_time
06AB 120674     564            lcall SendToLCD
06AE            565       
06AE C0E0       566            push acc
06B0 740A       566            mov a, #10
06B2 14         566            dec a
06B3 120142     566            lcall ?Set_Cursor_2 ; Select column and row
06B6 D0E0       566            pop acc
06B8 E543       567       mov a, reflow_temp
06BA 120674     568            lcall SendToLCD
06BD            569       
06BD C0E0       570            push acc
06BF 740E       570            mov a, #14
06C1 14         570            dec a
06C2 120142     570            lcall ?Set_Cursor_2 ; Select column and row
06C5 D0E0       570            pop acc
06C7 E542       571       mov a, reflow_time
06C9 120674     572            lcall SendToLCD
06CC            573            
06CC 22         574            ret
06CD            575   
06CD            576   
06CD            577   ;-------------------------------------------------;
06CD            578   ; Display all values and temperatures to the LCD  ;
06CD            579   ;-------------------------------------------------;
06CD            580   Display_Data:
06CD C2EF       581            clr ADCF
06CF D2EE       582            setb ADCS ;  ADC start trigger signal
06D1 30EFFD     583       jnb ADCF, $ ; Wait for conversion complete
06D4            584       
06D4            585       ; Read the ADC result and store in [R1, R0]
06D4 E5C3       586       mov a, ADCRH   
06D6 C4         587       swap a
06D7 C0E0       588       push acc
06D9 540F       589       anl a, #0x0f
06DB F9         590       mov R1, a
06DC D0E0       591       pop acc
06DE 54F0       592       anl a, #0xf0
06E0 45C2       593       orl a, ADCRL
06E2 F8         594       mov R0, A
06E3            595       
06E3            596       ; Convert to voltage
06E3 8830       597            mov x+0, R0
06E5 8931       598            mov x+1, R1
06E7            599            ; Pad other bits with zero
06E7 753200     600            mov x+2, #0
06EA 753300     601            mov x+3, #0
06ED            602            
06ED            603            ;lcall div32 ; Get V_out
06ED            604            ; ; Calculate Temp based on V_out
06ED            605            ; Load_y(27300) ; The reference temp K
06ED            606            ; lcall sub32 ; Get Temp*0.01
06ED            607            ; ; Change Temp*0.01 to Temp
06ED            608            ; Load_y(100)
06ED            609            ; lcall mul32
06ED            610   
06ED 75347C     611            mov y+0, #low (50300 % 0x10000) 
06F0 7535C4     611            mov y+1, #high(50300 % 0x10000) 
06F3 753600     611            mov y+2, #low (50300 / 0x10000) 
06F6 753700     611            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
06F9 1202F7     612            lcall mul32 ;multiplying ADC * Vref
06FC 7534FF     613            mov y+0, #low (4095 % 0x10000) 
06FF 75350F     613            mov y+1, #high(4095 % 0x10000) 
0702 753600     613            mov y+2, #low (4095 / 0x10000) 
0705 753700     613            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0708 120384     614            lcall div32 ;now doing (ADC*Vref)/(4095)
070B            615            
070B 7534E8     616            mov y+0, #low (1000 % 0x10000) 
070E 753503     616            mov y+1, #high(1000 % 0x10000) 
0711 753600     616            mov y+2, #low (1000 / 0x10000) 
0714 753700     616            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0717 1202F7     617            lcall mul32 ;multiplying volts
071A            618            
071A 75340A     619            mov y+0, #low (10 % 0x10000) 
071D 753500     619            mov y+1, #high(10 % 0x10000) 
0720 753600     619            mov y+2, #low (10 / 0x10000) 
0723 753700     619            mov y+3, #high(10 / 0x10000) 
0726 1202F7     620            lcall mul32
0729            621            
0729            622            ;convert to temperature
0729 7534D0     623            mov y+0, #low (21200 % 0x10000) 
072C 753552     623            mov y+1, #high(21200 % 0x10000) 
072F 753600     623            mov y+2, #low (21200 / 0x10000) 
0732 753700     623            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0735 120384     624            lcall div32 
0738 753429     625            mov y+0, #low (41 % 0x10000) 
073B 753500     625            mov y+1, #high(41 % 0x10000) 
073E 753600     625            mov y+2, #low (41 / 0x10000) 
0741 753700     625            mov y+3, #high(41 / 0x10000) ;load y = 41
0744 120384     626            lcall div32 ;divide by 41
0747            627            
0747 753410     628            mov y+0, #low (10000 % 0x10000) 
074A 753527     628            mov y+1, #high(10000 % 0x10000) 
074D 753600     628            mov y+2, #low (10000 / 0x10000) 
0750 753700     628            mov y+3, #high(10000 / 0x10000) 
0753 1202F7     629            lcall mul32
0756            630            
0756 753460     631            mov y+0, #low (220000 % 0x10000) 
0759 75355B     631            mov y+1, #high(220000 % 0x10000) 
075C 753603     631            mov y+2, #low (220000 / 0x10000) 
075F 753700     631            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0762 120242     632            lcall add32
0765            633            
0765 7534A0     634            mov y+0, #low (2500000 % 0x10000) 
0768 753525     634            mov y+1, #high(2500000 % 0x10000) 
076B 753626     634            mov y+2, #low (2500000 / 0x10000) 
076E 753700     634            mov y+3, #high(2500000 / 0x10000) 
0771 1202E3     635            lcall x_gteq_y
0774            636   
0774 20001A     637            jb mf, too_fucking_hot
0777            638   
0777            639   ; Convert to BCD and display
0777 12017D     640            lcall hex2bcd
077A 120623     641            lcall Display_formated_BCD
077D 22         642            ret
077E            643   returned:
077E 12017D     644            lcall hex2bcd
0781 C0E0       645            push acc
0783 740E       645            mov a, #14
0785 14         645            dec a
0786 120142     645            lcall ?Set_Cursor_2 ; Select column and row
0789 D0E0       645            pop acc
078B E53F       646            mov a,seconds
078D 120674     647            lcall SendToLCD
0790            648   
0790 22         649            ret
0791            650            
0791            651   too_fucking_hot:
0791 C0E0       652            push acc
0793 7404       652            mov a, #4
0795 14         652            dec a
0796 120144     652            lcall ?Set_Cursor_1 ; Select column and row
0799 D0E0       652            pop acc
079B C083       653            push dph
079D C082       653            push dpl
079F C0E0       653            push acc
07A1 9000A7     653            mov dptr, #Hot_temp
07A4 120137     653            lcall ?Send_Constant_String
07A7 D0E0       653            pop acc
07A9 D082       653            pop dpl
07AB D083       653            pop dph
07AD 1203ED     654            lcall fire
07B0 7486       655            mov a, #0x86
07B2 1200FF     656            lcall ?WriteCommand
07B5 7400       657            mov a, #0H
07B7 1200FA     658            lcall ?WriteData
07BA            659            
07BA 80C2       660            sjmp returned
07BC            661   
07BC            662   ;-----------------------------------------------------------------------------;
07BC            663   ;Grabs the value in register a and then compares it to the current temperature;
07BC            664   ;-----------------------------------------------------------------------------;
07BC            665   
07BC            666   Display_temp:
07BC C2EF       667            clr ADCF
07BE D2EE       668            setb ADCS ;  ADC start trigger signal
07C0 30EFFD     669       jnb ADCF, $ ; Wait for conversion complete
07C3            670       
07C3            671       ; Read the ADC result and store in [R1, R0]
07C3 E5C3       672       mov a, ADCRH   
07C5 C4         673       swap a
07C6 C0E0       674       push acc
07C8 540F       675       anl a, #0x0f
07CA F9         676       mov R1, a
07CB D0E0       677       pop acc
07CD 54F0       678       anl a, #0xf0
07CF 45C2       679       orl a, ADCRL
07D1 F8         680       mov R0, A
07D2            681       
07D2            682       ; Convert to voltage
07D2 8830       683            mov x+0, R0
07D4 8931       684            mov x+1, R1
07D6            685            ; Pad other bits with zero
07D6 753200     686            mov x+2, #0
07D9 753300     687            mov x+3, #0
07DC            688            
07DC            689            ;lcall div32 ; Get V_out
07DC            690            ; ; Calculate Temp based on V_out
07DC            691            ; Load_y(27300) ; The reference temp K
07DC            692            ; lcall sub32 ; Get Temp*0.01
07DC            693            ; ; Change Temp*0.01 to Temp
07DC            694            ; Load_y(100)
07DC            695            ; lcall mul32
07DC            696   
07DC 75347C     697            mov y+0, #low (50300 % 0x10000) 
07DF 7535C4     697            mov y+1, #high(50300 % 0x10000) 
07E2 753600     697            mov y+2, #low (50300 / 0x10000) 
07E5 753700     697            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
07E8 1202F7     698            lcall mul32 ;multiplying ADC * Vref
07EB 7534FF     699            mov y+0, #low (4095 % 0x10000) 
07EE 75350F     699            mov y+1, #high(4095 % 0x10000) 
07F1 753600     699            mov y+2, #low (4095 / 0x10000) 
07F4 753700     699            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07F7 120384     700            lcall div32 ;now doing (ADC*Vref)/(4095)
07FA            701            
07FA 7534E8     702            mov y+0, #low (1000 % 0x10000) 
07FD 753503     702            mov y+1, #high(1000 % 0x10000) 
0800 753600     702            mov y+2, #low (1000 / 0x10000) 
0803 753700     702            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0806 1202F7     703            lcall mul32 ;multiplying volts
0809            704            
0809 75340A     705            mov y+0, #low (10 % 0x10000) 
080C 753500     705            mov y+1, #high(10 % 0x10000) 
080F 753600     705            mov y+2, #low (10 / 0x10000) 
0812 753700     705            mov y+3, #high(10 / 0x10000) 
0815 1202F7     706            lcall mul32
0818            707            
0818            708            ;convert to temperature
0818 7534D0     709            mov y+0, #low (21200 % 0x10000) 
081B 753552     709            mov y+1, #high(21200 % 0x10000) 
081E 753600     709            mov y+2, #low (21200 / 0x10000) 
0821 753700     709            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0824 120384     710            lcall div32 
0827 753429     711            mov y+0, #low (41 % 0x10000) 
082A 753500     711            mov y+1, #high(41 % 0x10000) 
082D 753600     711            mov y+2, #low (41 / 0x10000) 
0830 753700     711            mov y+3, #high(41 / 0x10000) ;load y = 41
0833 120384     712            lcall div32 ;divide by 41
0836            713            
0836 753410     714            mov y+0, #low (10000 % 0x10000) 
0839 753527     714            mov y+1, #high(10000 % 0x10000) 
083C 753600     714            mov y+2, #low (10000 / 0x10000) 
083F 753700     714            mov y+3, #high(10000 / 0x10000) 
0842 1202F7     715            lcall mul32
0845            716            
0845 753460     717            mov y+0, #low (220000 % 0x10000) 
0848 75355B     717            mov y+1, #high(220000 % 0x10000) 
084B 753603     717            mov y+2, #low (220000 / 0x10000) 
084E 753700     717            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0851 120242     718            lcall add32
0854            719   
0854            720   ; Convert to BCD and display
0854 12017D     721            lcall hex2bcd
0857 12085B     722            lcall Display_temperature
085A            723   
085A 22         724            ret
085B            725   
085B            726   Display_temperature:
085B C0E0       727            push acc
085D 7404       727            mov a, #4
085F 14         727            dec a
0860 120144     727            lcall ?Set_Cursor_1 ; Select column and row
0863 D0E0       727            pop acc ; display To
0865 C000       728            push ar0
0867 A83B       728            mov r0, bcd+3
0869 120149     728            lcall ?Display_BCD
086C D000       728            pop ar0
086E C000       729            push ar0
0870 A83A       729            mov r0, bcd+2
0872 120149     729            lcall ?Display_BCD
0875 D000       729            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
0877 22         730            ret
0878            731   
0878            732   Compare_temp:
0878 853A48     733            mov temp+0, bcd+2
087B 853B49     734            mov temp+1, bcd+3
087E 854838     735            mov bcd+0, temp+0
0881 854939     736            mov bcd+1, temp+1
0884 753A00     737            mov bcd+2,#0
0887 753B00     738            mov bcd+3,#0
088A 753C00     739            mov bcd+4,#0
088D            740            
088D 120206     741            lcall bcd2hex
0890            742            
0890 853034     743            mov y+0,x+0
0893 853135     744            mov y+1,x+1
0896 853236     745            mov y+2,x+2
0899 853337     746            mov y+3,x+3
089C            747            
089C F530       748            mov x+0,a
089E 753100     749            mov x+1,#0
08A1 753200     750            mov x+2,#0
08A4 753300     751            mov x+3,#0
08A7            752            
08A7 12017D     753            lcall hex2bcd
08AA 1202ED     754            lcall x_lteq_y
08AD            755   
08AD 22         756            ret
08AE            757   
08AE            758   check_stop:
08AE D206       759            setb PB4
08B0            760            ; The input pin used to check set to '1'
08B0 D295       761            setb P1.5
08B2 C283       762            clr P0.3
08B4 209519     763            jb P1.5, stop_PB_Done
08B7            764            ; Debounce
08B7 C002       765            push AR2
08B9 7A32       765            mov R2, #50
08BB 1200B5     765            lcall ?Wait_Milli_Seconds
08BE D002       765            pop AR2
08C0 20950D     766            jb P1.5, stop_PB_Done
08C3 D283       767            setb P0.3
08C5 C283       768            clr P0.3
08C7 A295       769            mov c, P1.5
08C9 9202       770            mov PB0, c
08CB D283       771            setb P0.3
08CD 300201     772            jnb PB0, start_stop_timer
08D0            773   
08D0            774   stop_PB_Done:
08D0 22         775            ret
08D1            776   start_stop_timer:
08D1 B208       777            cpl start_stop_flag
08D3 80FB       778            sjmp stop_PB_Done
08D5            779   
08D5            780   
08D5            781   Display_special_char1:
08D5 120474     782            lcall heart
08D8 7481       783            mov a, #0x81
08DA 1200FF     784            lcall ?WriteCommand
08DD 7403       785            mov a, #3H
08DF 1200FA     786            lcall ?WriteData
08E2            787   
08E2 120447     788            lcall eighth
08E5 74C4       789            mov a, #0xC4
08E7 1200FF     790            lcall ?WriteCommand
08EA 7402       791            mov a, #2H
08EC 1200FA     792            lcall ?WriteData
08EF            793   
08EF 1204A1     794            lcall bell
08F2 7487       795            mov a, #0x87
08F4 1200FF     796            lcall ?WriteCommand
08F7 7404       797            mov a, #4H
08F9 1200FA     798            lcall ?WriteData
08FC            799   
08FC 12041A     800            lcall double_eighth
08FF 74CA       801            mov a, #0xCA
0901 1200FF     802            lcall ?WriteCommand
0904 7401       803            mov a, #1H
0906 1200FA     804            lcall ?WriteData
0909            805   
0909 120474     806            lcall heart
090C 748D       807            mov a, #0x8D
090E 1200FF     808            lcall ?WriteCommand
0911 7403       809            mov a, #3H
0913 1200FA     810            lcall ?WriteData
0916 32         811            reti
0917            812            
0917            813   Display_special_char2:
0917 120474     814            lcall heart
091A 74C0       815            mov a, #0xC0
091C 1200FF     816            lcall ?WriteCommand
091F 7403       817            mov a, #3H
0921 1200FA     818            lcall ?WriteData
0924            819   
0924 120447     820            lcall eighth
0927 7483       821            mov a, #0x83
0929 1200FF     822            lcall ?WriteCommand
092C 7402       823            mov a, #2H
092E 1200FA     824            lcall ?WriteData
0931            825   
0931 1204A1     826            lcall bell
0934 74C7       827            mov a, #0xC7
0936 1200FF     828            lcall ?WriteCommand
0939 7404       829            mov a, #4H
093B 1200FA     830            lcall ?WriteData
093E            831   
093E 12041A     832            lcall double_eighth
0941 748B       833            mov a, #0x8B
0943 1200FF     834            lcall ?WriteCommand
0946 7401       835            mov a, #1H
0948 1200FA     836            lcall ?WriteData
094B            837   
094B 120474     838            lcall heart
094E 74CE       839            mov a, #0xCE
0950 1200FF     840            lcall ?WriteCommand
0953 7403       841            mov a, #3H
0955 1200FA     842            lcall ?WriteData
0958 32         843            reti
0959            844   
0959            845   clear_screen_func:
0959            846       
0959 C0E0       847            push acc
095B 7401       847            mov a, #1
095D 14         847            dec a
095E 120144     847            lcall ?Set_Cursor_1 ; Select column and row
0961 D0E0       847            pop acc
0963 C083       848            push dph
0965 C082       848            push dpl
0967 C0E0       848            push acc
0969 900096     848            mov dptr, #clear_screen
096C 120137     848            lcall ?Send_Constant_String
096F D0E0       848            pop acc
0971 D082       848            pop dpl
0973 D083       848            pop dph
0975 C0E0       849            push acc
0977 7401       849            mov a, #1
0979 14         849            dec a
097A 120142     849            lcall ?Set_Cursor_2 ; Select column and row
097D D0E0       849            pop acc
097F C083       850            push dph
0981 C082       850            push dpl
0983 C0E0       850            push acc
0985 900096     850            mov dptr, #clear_screen
0988 120137     850            lcall ?Send_Constant_String
098B D0E0       850            pop acc
098D D082       850            pop dpl
098F D083       850            pop dph
0991 32         851       reti
0992            852       
0992            853   main:
0992 75817F     854            mov sp, #0x7f
0995 75B100     855       mov P0M1, #0x00
0998 75B200     856       mov P0M2, #0x00
099B 75B300     857       mov P1M1, #0x00
099E 75B400     858       mov P1M2, #0x00
09A1 75AD00     859       mov P3M2, #0x00
09A4 75AD00     860       mov P3M2, #0x00
09A7            861       
09A7 120537     862            lcall Init_All
09AA 120104     863       lcall LCD_4BIT
09AD 1204CE     864            lcall Timer0_Init
09B0 1204F1     865       lcall Timer2_Init
09B3            866            
09B3 D2AF       867       setb EA   ; Enable Global interrupts
09B5            868       ; initial messages in LCD
09B5 C0E0       869            push acc
09B7 7401       869            mov a, #1
09B9 14         869            dec a
09BA 120144     869            lcall ?Set_Cursor_1 ; Select column and row
09BD D0E0       869            pop acc
09BF C083       870            push dph
09C1 C082       870            push dpl
09C3 C0E0       870            push acc
09C5 90002E     870            mov dptr, #To_Message
09C8 120137     870            lcall ?Send_Constant_String
09CB D0E0       870            pop acc
09CD D082       870            pop dpl
09CF D083       870            pop dph
09D1 C0E0       871            push acc
09D3 7401       871            mov a, #1
09D5 14         871            dec a
09D6 120142     871            lcall ?Set_Cursor_2 ; Select column and row
09D9 D0E0       871            pop acc
09DB C083       872            push dph
09DD C082       872            push dpl
09DF C0E0       872            push acc
09E1 90003F     872            mov dptr, #Time_temp_display
09E4 120137     872            lcall ?Send_Constant_String
09E7 D0E0       872            pop acc
09E9 D082       872            pop dpl
09EB D083       872            pop dph
09ED 754B00     873       mov FSM_state,#0
09F0 753F00     874            mov seconds, #0x00
09F3 75458C     875            mov soak_temp, #0x8C ;140
09F6 75443C     876            mov soak_time, #0x3C ; 60
09F9 7543E6     877            mov reflow_temp, #0xE6 ; 230
09FC 75421E     878            mov reflow_time, #0x1E ; 30
09FF 753800     879            mov bcd,#0
0A02 D2CA       880            setb TR2
0A04            881            
0A04 C208       882            clr start_stop_flag
0A06 C28C       883       clr TR0
0A08            884   ;---------------------------------;
0A08            885   ;                FSM     funtion                               ;
0A08            886   ;---------------------------------;
0A08            887   FSM:
0A08 E54B       888       mov a, FSM_state
0A0A            889   FSM_state0: ;initial state
0A0A B4004A     890       cjne a, #0, FSM_state1
0A0D 754700     891       mov pwm, #0 ; power variable
0A10 12057F     892            lcall LCD_PB ; calls and checks the pushbuttons
0A13 120690     893            lcall Display_PushButtons_LCD ;Displays values in pushbuttons
0A16 1207BC     894            lcall Display_temp
0A19 300838     895       jnb start_stop_flag, FSM_state0_done
0A1C 753F00     896       mov seconds, #0x00     ; set time to 0
0A1F 754B01     897       mov FSM_state, #1   ; set FSM_state to 1, next state is state1
0A22 C0E0       898            push acc
0A24 7401       898            mov a, #1
0A26 14         898            dec a
0A27 120142     898            lcall ?Set_Cursor_2 ; Select column and row
0A2A D0E0       898            pop acc
0A2C C083       899            push dph
0A2E C082       899            push dpl
0A30 C0E0       899            push acc
0A32 900050     899            mov dptr, #Ramp_to_soak
0A35 120137     899            lcall ?Send_Constant_String
0A38 D0E0       899            pop acc
0A3A D082       899            pop dpl
0A3C D083       899            pop dph
0A3E D28C       900            setb TR0
0A40 C002       901            push AR2
0A42 7AFA       901            mov R2, #250
0A44 1200B5     901            lcall ?Wait_Milli_Seconds
0A47 D002       901            pop AR2
0A49 C002       902            push AR2
0A4B 7AFA       902            mov R2, #250
0A4D 1200B5     902            lcall ?Wait_Milli_Seconds
0A50 D002       902            pop AR2
0A52 C28C       903            clr TR0
0A54            904   
0A54            905   FSM_state0_done:
0A54 020A08     906       ljmp FSM   ;jump back to FSM and reload FSM_state to a
0A57            907   
0A57            908   FSM_state1: ;ramp to soak
0A57 B4014D     909       cjne a, #1, FSM_state2
0A5A 754764     910       mov pwm, #100
0A5D C3         911       clr c
0A5E 1208AE     912            lcall check_stop
0A61 300834     913       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0A64 743C       914       mov a, #0x3C
0A66 953F       915       subb a, seconds
0A68 401A       916       jc abort
0A6A            917   continue:
0A6A C3         918       clr c   ; ! i don't know what is c
0A6B 300113     919            jnb s_flag, FSM_state1_done
0A6E C201       920            clr s_flag
0A70 1206CD     921            lcall Display_Data
0A73 E545       922            mov a, soak_temp    ; set a to soak temp
0A75 120878     923            lcall Compare_temp
0A78 300006     924       jnb mf, FSM_state1_done
0A7B 753F00     925       mov seconds, #0x00     ; set time to 0
0A7E 754B02     926       mov FSM_state, #2
0A81            927   FSM_state1_done:
0A81 020A08     928       ljmp FSM
0A84            929   abort:
0A84 7432       930       mov a, #0x32  ; set a to 50 degree
0A86 3001F8     931            jnb s_flag, FSM_state1_done
0A89 1206CD     932            lcall Display_Data
0A8C 120878     933            lcall Compare_temp
0A8F 2000D8     934            jb mf, continue ; if temp is larger then 50 degree, go back to continue
0A92 754B00     935       mov FSM_state, #0   ; abort the FSM
0A95 020992     936            ljmp main
0A98            937   
0A98            938   stop_state:
0A98 C2CA       939       clr TR2
0A9A 300805     940       jnb start_stop_flag, stop
0A9D D2CA       941            setb TR2
0A9F 020A08     942            ljmp FSM
0AA2            943   
0AA2            944   stop:
0AA2 1208AE     945            lcall check_stop
0AA5 80F1       946       sjmp stop_state
0AA7            947   
0AA7            948   FSM_state2: ;preheat/soak
0AA7 B4023D     949       cjne a, #2, FSM_state3
0AAA 754714     950       mov pwm, #20
0AAD C0E0       951            push acc
0AAF 7401       951            mov a, #1
0AB1 14         951            dec a
0AB2 120142     951            lcall ?Set_Cursor_2 ; Select column and row
0AB5 D0E0       951            pop acc
0AB7 C083       952            push dph
0AB9 C082       952            push dpl
0ABB C0E0       952            push acc
0ABD 90005E     952            mov dptr, #Soak_display
0AC0 120137     952            lcall ?Send_Constant_String
0AC3 D0E0       952            pop acc
0AC5 D082       952            pop dpl
0AC7 D083       952            pop dph
0AC9 C3         953       clr c   ; ! i don't know what is c 
0ACA 1208AE     954            lcall check_stop
0ACD 3008C8     955       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0AD0 300111     956            jnb s_flag, FSM_state2_done
0AD3 C201       957            clr s_flag
0AD5 1206CD     958            lcall Display_Data
0AD8            959            
0AD8 E544       960            mov a, soak_time    ; set a to soak time
0ADA 953F       961       subb a, seconds    ; temp is our currect sec
0ADC 5006       962       jnc FSM_state2_done
0ADE 753F00     963       mov seconds, #0x00     ; set time to 0
0AE1 754B03     964       mov FSM_state, #3
0AE4            965   FSM_state2_done:
0AE4 020A08     966       ljmp FSM
0AE7            967   
0AE7            968   FSM_state3: ;ramp to peak
0AE7 B40342     969       cjne a, #3, FSM_state4
0AEA 754764     970       mov pwm, #100
0AED C0E0       971            push acc
0AEF 7401       971            mov a, #1
0AF1 14         971            dec a
0AF2 120142     971            lcall ?Set_Cursor_2 ; Select column and row
0AF5 D0E0       971            pop acc
0AF7 C083       972            push dph
0AF9 C082       972            push dpl
0AFB C0E0       972            push acc
0AFD 90006C     972            mov dptr, #Ramp_to_peak
0B00 120137     972            lcall ?Send_Constant_String
0B03 D0E0       972            pop acc
0B05 D082       972            pop dpl
0B07 D083       972            pop dph
0B09 C3         973       clr c   ; ! i don't know what is c 
0B0A 1208AE     974            lcall check_stop
0B0D 300888     975       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B10 300113     976            jnb s_flag, FSM_state3_done
0B13 C201       977            clr s_flag
0B15 1206CD     978            lcall Display_Data
0B18 E543       979            mov a, reflow_temp    ; set a to reflow temp
0B1A 120878     980            lcall Compare_temp
0B1D 300006     981       jnb mf, FSM_state3_done
0B20 753F00     982       mov seconds, #0x00     ; set time to 0
0B23 754B04     983       mov FSM_state, #4
0B26            984   FSM_state3_done:
0B26 020A08     985       ljmp FSM
0B29            986       
0B29            987   intermediate_stop_jump:
0B29 020A98     988            ljmp stop_state
0B2C            989   
0B2C            990   FSM_state4:;reflow
0B2C B4043D     991       cjne a, #4, FSM_state5
0B2F 754714     992       mov pwm, #20
0B32 C0E0       993            push acc
0B34 7401       993            mov a, #1
0B36 14         993            dec a
0B37 120142     993            lcall ?Set_Cursor_2 ; Select column and row
0B3A D0E0       993            pop acc
0B3C C083       994            push dph
0B3E C082       994            push dpl
0B40 C0E0       994            push acc
0B42 90007A     994            mov dptr, #Reflow_display
0B45 120137     994            lcall ?Send_Constant_String
0B48 D0E0       994            pop acc
0B4A D082       994            pop dpl
0B4C D083       994            pop dph
0B4E C3         995       clr c   ; ! i don't know what is c 
0B4F 1208AE     996            lcall check_stop
0B52 3008D4     997       jnb start_stop_flag, intermediate_stop_jump; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B55 300111     998            jnb s_flag, FSM_state4_done
0B58 C201       999            clr s_flag
0B5A 1206CD    1000            lcall Display_Data
0B5D           1001            
0B5D E542      1002            mov a, reflow_time    ; set a to reflow time
0B5F 953F      1003       subb a, seconds    ; temp is our currect sec
0B61 5006      1004       jnc FSM_state4_done
0B63 753F00    1005       mov seconds, #0x00     ; set time to 0
0B66 754B05    1006       mov FSM_state, #5
0B69           1007   FSM_state4_done:
0B69 020A08    1008       ljmp FSM
0B6C           1009   
0B6C           1010   FSM_state5:;cooling
0B6C B40542    1011       cjne a, #5, FSM_state6
0B6F 754700    1012       mov pwm, #0
0B72           1013       
0B72 C0E0      1014            push acc
0B74 7401      1014            mov a, #1
0B76 14        1014            dec a
0B77 120142    1014            lcall ?Set_Cursor_2 ; Select column and row
0B7A D0E0      1014            pop acc
0B7C C083      1015            push dph
0B7E C082      1015            push dpl
0B80 C0E0      1015            push acc
0B82 900088    1015            mov dptr, #Cooling_display
0B85 120137    1015            lcall ?Send_Constant_String
0B88 D0E0      1015            pop acc
0B8A D082      1015            pop dpl
0B8C D083      1015            pop dph
0B8E C3        1016       clr c
0B8F 1208AE    1017            lcall check_stop
0B92 300894    1018       jnb start_stop_flag, intermediate_stop_jump ; checks the flag if 0, then means stop was pressed, if 1 keep on going 
0B95 300113    1019            jnb s_flag, FSM_state5_done
0B98 C201      1020            clr s_flag
0B9A 1206CD    1021            lcall Display_Data
0B9D 743C      1022            mov a, #0x3C    ; set a to 60
0B9F 120878    1023            lcall Compare_temp
0BA2           1024   
0BA2 200006    1025       jb mf, FSM_state5_done
0BA5 753F00    1026       mov seconds, #0x00     ; set time to 0
0BA8 754B06    1027       mov FSM_state, #6
0BAB           1028   FSM_state5_done: 
0BAB 020A08    1029       ljmp FSM
0BAE           1030   
0BAE           1031   intermediate_state_0:
0BAE 020A08    1032            ljmp FSM
0BB1           1033            
0BB1           1034   FSM_state6:
0BB1 B406FA    1035            cjne a, #6, intermediate_state_0
0BB4 C2CA      1036            clr TR2
0BB6 D28C      1037            setb TR0
0BB8 D2A9      1038            setb ET0
0BBA           1039   
0BBA 1208D5    1040       lcall Display_special_char1
0BBD 754D7C    1041            mov Melody_Reload+1, #high(B3_KEY)
0BC0 754CBD    1042            mov Melody_Reload+0, #low(B3_KEY)
0BC3 C002      1043            push AR2
0BC5 7A78      1043            mov R2, #120
0BC7 1200B5    1043            lcall ?Wait_Milli_Seconds
0BCA D002      1043            pop AR2
0BCC           1044   
0BCC 754D6C    1045            mov Melody_Reload+1, #high(A3_KEY)
0BCF 754CA1    1046            mov Melody_Reload+0, #low(A3_KEY)
0BD2 C002      1047            push AR2
0BD4 7A78      1047            mov R2, #120
0BD6 1200B5    1047            lcall ?Wait_Milli_Seconds
0BD9 D002      1047            pop AR2
0BDB           1048   
0BDB 754D63    1049            mov Melody_Reload+1, #high(Gs3_KEY)
0BDE 754CC0    1050            mov Melody_Reload+0, #low(Gs3_KEY)
0BE1 C002      1051            push AR2
0BE3 7A78      1051            mov R2, #120
0BE5 1200B5    1051            lcall ?Wait_Milli_Seconds
0BE8 D002      1051            pop AR2
0BEA           1052            
0BEA 754D6C    1053            mov Melody_Reload+1, #high(A3_KEY)
0BED 754CA1    1054            mov Melody_Reload+0, #low(A3_KEY)
0BF0 C002      1055            push AR2
0BF2 7A78      1055            mov R2, #120
0BF4 1200B5    1055            lcall ?Wait_Milli_Seconds
0BF7 D002      1055            pop AR2
0BF9           1056   
0BF9 120959    1057            lcall clear_screen_func
0BFC           1058   ;----------------------------------------
0BFC 120917    1059            lcall Display_special_char2
0BFF           1060   
0BFF 754D84    1061            mov Melody_Reload+1, #high(C4_KEY)
0C02 754C05    1062            mov Melody_Reload+0, #low(C4_KEY)
0C05 C002      1063            push AR2
0C07 7AF0      1063            mov R2, #240
0C09 1200B5    1063            lcall ?Wait_Milli_Seconds
0C0C D002      1063            pop AR2
0C0E C002      1064            push AR2
0C10 7AF0      1064            mov R2, #240
0C12 1200B5    1064            lcall ?Wait_Milli_Seconds
0C15 D002      1064            pop AR2
0C17           1065            
0C17 120959    1066       lcall clear_screen_func
0C1A 1208D5    1067       lcall Display_special_char1
0C1D           1068       
0C1D 754D84    1069            mov Melody_Reload+1, #high(D4_KEY)
0C20 754C05    1070            mov Melody_Reload+0, #low(D4_KEY)
0C23 C002      1071            push AR2
0C25 7A78      1071            mov R2, #120
0C27 1200B5    1071            lcall ?Wait_Milli_Seconds
0C2A D002      1071            pop AR2
0C2C           1072   
0C2C 754D84    1073            mov Melody_Reload+1, #high(C4_KEY)
0C2F 754C05    1074            mov Melody_Reload+0, #low(C4_KEY)
0C32 C002      1075            push AR2
0C34 7A78      1075            mov R2, #120
0C36 1200B5    1075            lcall ?Wait_Milli_Seconds
0C39 D002      1075            pop AR2
0C3B           1076   
0C3B 754DBE    1077            mov Melody_Reload+1, #high(B4_KEY)
0C3E 754C5F    1078            mov Melody_Reload+0, #low(B4_KEY)
0C41 C002      1079            push AR2
0C43 7A78      1079            mov R2, #120
0C45 1200B5    1079            lcall ?Wait_Milli_Seconds
0C48 D002      1079            pop AR2
0C4A           1080   
0C4A 754DC2    1081            mov Melody_Reload+1, #high(C5_KEY)
0C4D 754C12    1082            mov Melody_Reload+0, #low(C5_KEY)
0C50 C002      1083            push AR2
0C52 7A78      1083            mov R2, #120
0C54 1200B5    1083            lcall ?Wait_Milli_Seconds
0C57 D002      1083            pop AR2
0C59           1084   
0C59 120959    1085            lcall clear_screen_func
0C5C 120917    1086       lcall Display_special_char2
0C5F           1087            
0C5F 754DCE    1088            mov Melody_Reload+1, #high(E5_KEY)
0C62 754CD7    1089            mov Melody_Reload+0, #low(E5_KEY)
0C65 C002      1090            push AR2
0C67 7AF0      1090            mov R2, #240
0C69 1200B5    1090            lcall ?Wait_Milli_Seconds
0C6C D002      1090            pop AR2
0C6E C002      1091            push AR2
0C70 7AF0      1091            mov R2, #240
0C72 1200B5    1091            lcall ?Wait_Milli_Seconds
0C75 D002      1091            pop AR2
0C77           1092   
0C77 120959    1093            lcall clear_screen_func
0C7A 1208D5    1094       lcall Display_special_char1
0C7D           1095   ;-----------------------------------------
0C7D 754DD1    1096            mov Melody_Reload+1, #high(F5_KEY)
0C80 754C96    1097            mov Melody_Reload+0, #low(F5_KEY)
0C83 C002      1098            push AR2
0C85 7A78      1098            mov R2, #120
0C87 1200B5    1098            lcall ?Wait_Milli_Seconds
0C8A D002      1098            pop AR2
0C8C           1099   
0C8C 754DCE    1100            mov Melody_Reload+1, #high(E5_KEY)
0C8F 754CD7    1101            mov Melody_Reload+0, #low(E5_KEY)
0C92 C002      1102            push AR2
0C94 7A78      1102            mov R2, #120
0C96 1200B5    1102            lcall ?Wait_Milli_Seconds
0C99 D002      1102            pop AR2
0C9B           1103   
0C9B 754DCB    1104            mov Melody_Reload+1, #high(Ds5_KEY)
0C9E 754CEB    1105            mov Melody_Reload+0, #low(Ds5_KEY)
0CA1 C002      1106            push AR2
0CA3 7A78      1106            mov R2, #120
0CA5 1200B5    1106            lcall ?Wait_Milli_Seconds
0CA8 D002      1106            pop AR2
0CAA           1107   
0CAA 754DCE    1108            mov Melody_Reload+1, #high(E5_KEY)
0CAD 754CD7    1109            mov Melody_Reload+0, #low(E5_KEY)
0CB0 C002      1110            push AR2
0CB2 7A78      1110            mov R2, #120
0CB4 1200B5    1110            lcall ?Wait_Milli_Seconds
0CB7 D002      1110            pop AR2
0CB9           1111   
0CB9 120959    1112            lcall clear_screen_func
0CBC 120917    1113       lcall Display_special_char2
0CBF           1114   ;-----------------------------------------
0CBF 754DDF    1115            mov Melody_Reload+1, #high(B5_KEY)
0CC2 754C30    1116            mov Melody_Reload+0, #low(B5_KEY)
0CC5 C002      1117            push AR2
0CC7 7A78      1117            mov R2, #120
0CC9 1200B5    1117            lcall ?Wait_Milli_Seconds
0CCC D002      1117            pop AR2
0CCE           1118   
0CCE 754DDB    1119            mov Melody_Reload+1, #high(A5_KEY)
0CD1 754C29    1120            mov Melody_Reload+0, #low(A5_KEY)
0CD4 C002      1121            push AR2
0CD6 7A78      1121            mov R2, #120
0CD8 1200B5    1121            lcall ?Wait_Milli_Seconds
0CDB D002      1121            pop AR2
0CDD           1122   
0CDD 754DD8    1123            mov Melody_Reload+1, #high(Gs5_KEY)
0CE0 754CF7    1124            mov Melody_Reload+0, #low(Gs5_KEY)
0CE3 C002      1125            push AR2
0CE5 7A78      1125            mov R2, #120
0CE7 1200B5    1125            lcall ?Wait_Milli_Seconds
0CEA D002      1125            pop AR2
0CEC           1126   
0CEC 754DDB    1127            mov Melody_Reload+1, #high(A5_KEY)
0CEF 754C29    1128            mov Melody_Reload+0, #low(A5_KEY)
0CF2 C002      1129            push AR2
0CF4 7A78      1129            mov R2, #120
0CF6 1200B5    1129            lcall ?Wait_Milli_Seconds
0CF9 D002      1129            pop AR2
0CFB           1130   
0CFB 120959    1131            lcall clear_screen_func
0CFE 1208D5    1132       lcall Display_special_char1
0D01           1133   ;--------------------------------------
0D01 754DDF    1134            mov Melody_Reload+1, #high(B5_KEY)
0D04 754C30    1135            mov Melody_Reload+0, #low(B5_KEY)
0D07 C002      1136            push AR2
0D09 7A78      1136            mov R2, #120
0D0B 1200B5    1136            lcall ?Wait_Milli_Seconds
0D0E D002      1136            pop AR2
0D10           1137   
0D10 754DDB    1138            mov Melody_Reload+1, #high(A5_KEY)
0D13 754C29    1139            mov Melody_Reload+0, #low(A5_KEY)
0D16 C002      1140            push AR2
0D18 7A78      1140            mov R2, #120
0D1A 1200B5    1140            lcall ?Wait_Milli_Seconds
0D1D D002      1140            pop AR2
0D1F           1141   
0D1F 754DD8    1142            mov Melody_Reload+1, #high(Gs5_KEY)
0D22 754CF7    1143            mov Melody_Reload+0, #low(Gs5_KEY)
0D25 C002      1144            push AR2
0D27 7A78      1144            mov R2, #120
0D29 1200B5    1144            lcall ?Wait_Milli_Seconds
0D2C D002      1144            pop AR2
0D2E           1145   
0D2E 754DDB    1146            mov Melody_Reload+1, #high(A5_KEY)
0D31 754C29    1147            mov Melody_Reload+0, #low(A5_KEY)
0D34 C002      1148            push AR2
0D36 7A78      1148            mov R2, #120
0D38 1200B5    1148            lcall ?Wait_Milli_Seconds
0D3B D002      1148            pop AR2
0D3D           1149   
0D3D 120959    1150            lcall clear_screen_func
0D40 120917    1151       lcall Display_special_char2
0D43           1152   
0D43 754DE1    1153            mov Melody_Reload+1, #high(C6_KEY)
0D46 754C05    1154            mov Melody_Reload+0, #low(C6_KEY)
0D49 C002      1155            push AR2
0D4B 7AF0      1155            mov R2, #240
0D4D 1200B5    1155            lcall ?Wait_Milli_Seconds
0D50 D002      1155            pop AR2
0D52 C002      1156            push AR2
0D54 7AF0      1156            mov R2, #240
0D56 1200B5    1156            lcall ?Wait_Milli_Seconds
0D59 D002      1156            pop AR2
0D5B           1157            
0D5B 120959    1158            lcall clear_screen_func
0D5E 1208D5    1159       lcall Display_special_char1
0D61           1160   ;----------------------------------------
0D61 754DDB    1161            mov Melody_Reload+1, #high(A5_KEY)
0D64 754C29    1162            mov Melody_Reload+0, #low(A5_KEY)
0D67 C002      1163            push AR2
0D69 7AF0      1163            mov R2, #240
0D6B 1200B5    1163            lcall ?Wait_Milli_Seconds
0D6E D002      1163            pop AR2
0D70           1164   
0D70 754DE1    1165            mov Melody_Reload+1, #high(C6_KEY)
0D73 754C05    1166            mov Melody_Reload+0, #low(C6_KEY)
0D76 C002      1167            push AR2
0D78 7AF0      1167            mov R2, #240
0D7A 1200B5    1167            lcall ?Wait_Milli_Seconds
0D7D D002      1167            pop AR2
0D7F           1168   
0D7F 120959    1169            lcall clear_screen_func
0D82 120917    1170       lcall Display_special_char2
0D85           1171   ;-----------------------------------------
0D85 754DDF    1172            mov Melody_Reload+1, #high(B5_KEY)
0D88 754C30    1173            mov Melody_Reload+0, #low(B5_KEY)
0D8B C002      1174            push AR2
0D8D 7AF0      1174            mov R2, #240
0D8F 1200B5    1174            lcall ?Wait_Milli_Seconds
0D92 D002      1174            pop AR2
0D94           1175   
0D94 754DDB    1176            mov Melody_Reload+1, #high(A5_KEY)
0D97 754C29    1177            mov Melody_Reload+0, #low(A5_KEY)
0D9A C002      1178            push AR2
0D9C 7AF0      1178            mov R2, #240
0D9E 1200B5    1178            lcall ?Wait_Milli_Seconds
0DA1 D002      1178            pop AR2
0DA3           1179   
0DA3 120959    1180            lcall clear_screen_func
0DA6 1208D5    1181       lcall Display_special_char1
0DA9           1182   
0DA9 754DD6    1183            mov Melody_Reload+1, #high(G5_KEY)
0DAC 754C29    1184            mov Melody_Reload+0, #low(A5_KEY)
0DAF C002      1185            push AR2
0DB1 7AF0      1185            mov R2, #240
0DB3 1200B5    1185            lcall ?Wait_Milli_Seconds
0DB6 D002      1185            pop AR2
0DB8           1186   
0DB8 754DDB    1187            mov Melody_Reload+1, #high(A5_KEY)
0DBB 754C29    1188            mov Melody_Reload+0, #low(A5_KEY)
0DBE C002      1189            push AR2
0DC0 7AF0      1189            mov R2, #240
0DC2 1200B5    1189            lcall ?Wait_Milli_Seconds
0DC5 D002      1189            pop AR2
0DC7           1190   
0DC7 120959    1191            lcall clear_screen_func
0DCA 120917    1192       lcall Display_special_char2
0DCD           1193   ;-----------------------------------------
0DCD 754DDF    1194            mov Melody_Reload+1, #high(B5_KEY)
0DD0 754C30    1195            mov Melody_Reload+0, #low(B5_KEY)
0DD3 C002      1196            push AR2
0DD5 7AF0      1196            mov R2, #240
0DD7 1200B5    1196            lcall ?Wait_Milli_Seconds
0DDA D002      1196            pop AR2
0DDC           1197   
0DDC 754DDB    1198            mov Melody_Reload+1, #high(A5_KEY)
0DDF 754C29    1199            mov Melody_Reload+0, #low(A5_KEY)
0DE2 C002      1200            push AR2
0DE4 7AF0      1200            mov R2, #240
0DE6 1200B5    1200            lcall ?Wait_Milli_Seconds
0DE9 D002      1200            pop AR2
0DEB           1201   
0DEB 120959    1202            lcall clear_screen_func
0DEE 1208D5    1203       lcall Display_special_char1
0DF1           1204   
0DF1 754DD6    1205            mov Melody_Reload+1, #high(G5_KEY)
0DF4 754C29    1206            mov Melody_Reload+0, #low(A5_KEY)
0DF7 C002      1207            push AR2
0DF9 7AF0      1207            mov R2, #240
0DFB 1200B5    1207            lcall ?Wait_Milli_Seconds
0DFE D002      1207            pop AR2
0E00           1208   
0E00 754DDB    1209            mov Melody_Reload+1, #high(A5_KEY)
0E03 754C29    1210            mov Melody_Reload+0, #low(A5_KEY)
0E06 C002      1211            push AR2
0E08 7AF0      1211            mov R2, #240
0E0A 1200B5    1211            lcall ?Wait_Milli_Seconds
0E0D D002      1211            pop AR2
0E0F           1212   
0E0F 120959    1213            lcall clear_screen_func
0E12 120917    1214       lcall Display_special_char2
0E15           1215   ;-----------------------------------------
0E15 754DDF    1216            mov Melody_Reload+1, #high(B5_KEY)
0E18 754C30    1217            mov Melody_Reload+0, #low(B5_KEY)
0E1B C002      1218            push AR2
0E1D 7AF0      1218            mov R2, #240
0E1F 1200B5    1218            lcall ?Wait_Milli_Seconds
0E22 D002      1218            pop AR2
0E24           1219   
0E24 754DDB    1220            mov Melody_Reload+1, #high(A5_KEY)
0E27 754C29    1221            mov Melody_Reload+0, #low(A5_KEY)
0E2A C002      1222            push AR2
0E2C 7AF0      1222            mov R2, #240
0E2E 1200B5    1222            lcall ?Wait_Milli_Seconds
0E31 D002      1222            pop AR2
0E33           1223   
0E33 120959    1224            lcall clear_screen_func
0E36 1208D5    1225       lcall Display_special_char1
0E39           1226   
0E39 754DD6    1227            mov Melody_Reload+1, #high(G5_KEY)
0E3C 754C29    1228            mov Melody_Reload+0, #low(A5_KEY)
0E3F C002      1229            push AR2
0E41 7AF0      1229            mov R2, #240
0E43 1200B5    1229            lcall ?Wait_Milli_Seconds
0E46 D002      1229            pop AR2
0E48           1230            
0E48 754DD4    1231            mov Melody_Reload+1, #high(Fs5_KEY)
0E4B 754C30    1232            mov Melody_Reload+0, #low(Fs5_KEY)
0E4E C002      1233            push AR2
0E50 7AF0      1233            mov R2, #240
0E52 1200B5    1233            lcall ?Wait_Milli_Seconds
0E55 D002      1233            pop AR2
0E57           1234   
0E57 120959    1235            lcall clear_screen_func
0E5A 120917    1236       lcall Display_special_char2
0E5D           1237   
0E5D 754DCE    1238            mov Melody_Reload+1, #high(E5_KEY)
0E60 754CD7    1239            mov Melody_Reload+0, #low(E5_KEY)
0E63 C002      1240            push AR2
0E65 7AF0      1240            mov R2, #240
0E67 1200B5    1240            lcall ?Wait_Milli_Seconds
0E6A D002      1240            pop AR2
0E6C C002      1241            push AR2
0E6E 7AF0      1241            mov R2, #240
0E70 1200B5    1241            lcall ?Wait_Milli_Seconds
0E73 D002      1241            pop AR2
0E75           1242   
0E75 120959    1243            lcall clear_screen_func
0E78 1208D5    1244       lcall Display_special_char1
0E7B 020992    1245       ljmp main
0E7E           1246   EN
