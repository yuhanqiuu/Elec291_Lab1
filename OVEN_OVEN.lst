                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE)))
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   EQU P1.2 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 020994      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204E4      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
002B            114   org 0x002B
002B 020511     115            ljmp Timer2_ISR
002E            116   
002E            117   ;---------------------------------;
002E            118   ; Define any constant string here ;
002E            119   ;---------------------------------;
002E            120   ;                          1234567890123456    <- This helps determine the location of the counter
002E 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
003F 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0050 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
005E 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
006C 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
007A 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
0088 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
0096 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
00A7 484F5400   129   Hot_temp: db 'HOT',0
00AB            130   ;---------------------------------------------
00AB            131   cseg
00AB            132   
00AB            133   LCD_RS equ P1.3
00AB            134   LCD_E  equ P1.4
00AB            135   LCD_D4 equ P0.0
00AB            136   LCD_D5 equ P0.1
00AB            137   LCD_D6 equ P0.2
00AB            138   LCD_D7 equ P0.3
00AB            139   
                141   $LIST
017D            143   
017D            144   ;---------------------------------;
017D            145   ; Define variables here           ;
017D            146   ;---------------------------------;
017D            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03ED            185   
03ED            186   ;---------------------------------;
03ED            187   ; Define special chars here       ;
03ED            188   ;---------------------------------;
03ED            189   fire:
03ED 7440       190            mov   A,#40H         ;Load the location where we want to store
03EF 1200FF     191       lcall ?WriteCommand    ;Send the command
03F2 7409       192       mov   A,#09H         ;Load row 1 data
03F4 1200FA     193       lcall ?WriteData   ;Send the data
03F7 7400       194       mov   A,#00H         ;Load row 2 data
03F9 1200FA     195       lcall ?WriteData   ;Send the data
03FC 7414       196       mov   A,#14H         ;Load row 3 data
03FE 1200FA     197       lcall ?WriteData   ;Send the data
0401 7406       198       mov   A,#06H         ;Load row 4 data
0403 1200FA     199       lcall ?WriteData   ;Send the data
0406 740F       200       mov   A,#0FH         ;Load row 5 data
0408 1200FA     201       lcall ?WriteData   ;Send the data
040B 741B       202       mov   A,#1BH         ;Load row 6 data
040D 1200FA     203       lcall ?WriteData   ;Send the data
0410 7411       204       mov   A,#11H         ;Load row 7 data
0412 11FA       205       acall ?WriteData   ;Send the data
0414 740E       206       mov   A,#0EH         ;Load row 8 data
0416 1200FA     207       lcall ?WriteData   ;Send the data
0419 22         208       ret                  ;Return from routine
041A            209   
041A            210   double_eighth:
041A 7448       211       mov   A,#48H         ;Load the location where we want to store
041C 1200FF     212       lcall ?WriteCommand    ;Send the command
041F 7400       213       mov   A,#00H         ;Load row 1 data
0421 1200FA     214       lcall ?WriteData   ;Send the data
0424 740F       215       mov   A,#0FH         ;Load row 2 data
0426 1200FA     216       lcall ?WriteData   ;Send the data
0429 7409       217       mov   A,#09H         ;Load row 3 data
042B 1200FA     218       lcall ?WriteData   ;Send the data
042E 7409       219       mov   A,#09H         ;Load row 4 data
0430 1200FA     220       lcall ?WriteData   ;Send the data
0433 741B       221       mov   A,#1BH         ;Load row 5 data
0435 1200FA     222       lcall ?WriteData   ;Send the data
0438 741B       223       mov   A,#1BH         ;Load row 6 data
043A 1200FA     224       lcall ?WriteData   ;Send the data
043D 7400       225       mov   A,#00H         ;Load row 7 data
043F 11FA       226       acall ?WriteData   ;Send the data
0441 7400       227       mov   A,#00H         ;Load row 8 data
0443 1200FA     228       lcall ?WriteData   ;Send the data
0446 22         229       ret                  ;Return from routine
0447            230       
0447            231   eighth:
0447 7450       232       mov   A,#50H         ;Load the location where we want to store
0449 1200FF     233       lcall ?WriteCommand    ;Send the command
044C 7404       234       mov   A,#04H         ;Load row 1 data
044E 1200FA     235       lcall ?WriteData   ;Send the data
0451 7406       236       mov   A,#06H         ;Load row 2 data
0453 1200FA     237       lcall ?WriteData   ;Send the data
0456 7405       238       mov   A,#05H         ;Load row 3 data
0458 1200FA     239       lcall ?WriteData   ;Send the data
045B 7404       240       mov   A,#04H         ;Load row 4 data
045D 1200FA     241       lcall ?WriteData   ;Send the data
0460 740C       242       mov   A,#0CH         ;Load row 5 data
0462 1200FA     243       lcall ?WriteData   ;Send the data
0465 7414       244       mov   A,#14H         ;Load row 6 data
0467 1200FA     245       lcall ?WriteData   ;Send the data
046A 7408       246       mov   A,#08H         ;Load row 7 data
046C 11FA       247       acall ?WriteData   ;Send the data
046E 7400       248       mov   A,#00H         ;Load row 8 data
0470 1200FA     249       lcall ?WriteData   ;Send the data
0473 22         250       ret                  ;Return from routine
0474            251   
0474            252   heart:
0474 7458       253       mov   A,#58H         ;Load the location where we want to store
0476 1200FF     254       lcall ?WriteCommand    ;Send the command
0479 7400       255       mov   A,#00H         ;Load row 1 data
047B 1200FA     256       lcall ?WriteData   ;Send the data
047E 740A       257       mov   A,#0AH         ;Load row 2 data
0480 1200FA     258       lcall ?WriteData   ;Send the data
0483 7415       259       mov   A,#15H         ;Load row 3 data
0485 1200FA     260       lcall ?WriteData   ;Send the data
0488 7411       261       mov   A,#11H         ;Load row 4 data
048A 1200FA     262       lcall ?WriteData   ;Send the data
048D 7411       263       mov   A,#11H         ;Load row 5 data
048F 1200FA     264       lcall ?WriteData   ;Send the data
0492 740A       265       mov   A,#0AH         ;Load row 6 data
0494 1200FA     266       lcall ?WriteData   ;Send the data
0497 7404       267       mov   A,#04H         ;Load row 7 data
0499 11FA       268       acall ?WriteData   ;Send the data
049B 7400       269       mov   A,#00H         ;Load row 8 data
049D 1200FA     270       lcall ?WriteData   ;Send the data
04A0 22         271       ret                  ;Return from routine
04A1            272   bell:
04A1 7460       273       mov   A,#60H         ;Load the location where we want to store
04A3 1200FF     274       lcall ?WriteCommand    ;Send the command
04A6 7400       275       mov   A,#00H         ;Load row 1 data
04A8 1200FA     276       lcall ?WriteData   ;Send the data
04AB 7404       277       mov   A,#04H          ;Load row 2 data
04AD 1200FA     278       lcall ?WriteData   ;Send the data
04B0 740E       279       mov   A,#0eH          ;Load row 3 data
04B2 1200FA     280       lcall ?WriteData   ;Send the data
04B5 740E       281       mov   A,#0eH         ;Load row 4 data
04B7 1200FA     282       lcall ?WriteData   ;Send the data
04BA 740E       283       mov   A,#0eH         ;Load row 5 data
04BC 1200FA     284       lcall ?WriteData   ;Send the data
04BF 741F       285       mov   A,#1fH         ;Load row 6 data
04C1 1200FA     286       lcall ?WriteData   ;Send the data
04C4 7400       287       mov   A,#00H         ;Load row 7 data
04C6 11FA       288       acall ?WriteData   ;Send the data
04C8 7404       289       mov   A,#04H         ;Load row 8 data
04CA 1200FA     290       lcall ?WriteData   ;Send the data
04CD 22         291       ret                  ;Return from routine
04CE            292   
04CE            293   ;---------------------------------;
04CE            294   ; Routine to initialize the ISR   ;
04CE            295   ; for timer 0                     ;
04CE            296   ;---------------------------------;
04CE            297   Timer0_Init:
04CE 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04D1 E589       299            mov a, TMOD
04D3 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04D5 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04D7 F589       302            mov TMOD, a
04D9 758CF0     303            mov TH0, #high(TIMER0_RELOAD)
04DC 758A2C     304            mov TL0, #low(TIMER0_RELOAD)
04DF            305            ; Enable the timer and interrupts
04DF D2A9       306       setb ET0  ; Enable timer 0 interrupt
04E1 D28C       307       setb TR0  ; Start timer 0
04E3 22         308            ret
04E4            309   
04E4            310   ;---------------------------------;
04E4            311   ; ISR for timer 0.  Set to execute;
04E4            312   ; every 1/4096Hz to generate a    ;
04E4            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04E4            314   ;---------------------------------;
04E4            315   Timer0_ISR:
04E4            316            ;clr TF0  ; According to the data sheet this is done for us already.
04E4            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04E4 C28C       318            clr TR0
04E6 854D8C     319            mov TH0, Melody_Reload+1
04E9 854C8A     320            mov TL0, Melody_Reload+0
04EC D28C       321            setb TR0
04EE B292       322            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04F0 32         323            reti
04F1            324   
04F1            325   ;---------------------------------;
04F1            326   ; Routine to initialize the ISR   ;
04F1            327   ; for timer 2                     ;
04F1            328   ;---------------------------------;
04F1            329   Timer2_Init:
04F1 75C800     330            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04F4 75CDD7     331            mov TH2, #high(TIMER2_RELOAD)
04F7 75CC79     332            mov TL2, #low(TIMER2_RELOAD)
04FA            333            ; Set the reload value
04FA 75C9A0     334            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04FD 75CBD7     335            mov RCMP2H, #high(TIMER2_RELOAD)
0500 75CA79     336            mov RCMP2L, #low(TIMER2_RELOAD)
0503            337            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0503 E4         338            clr a
0504 F53D       339            mov Count1ms+0, a
0506 F53E       340            mov Count1ms+1, a
0508 754700     341            mov pwm, #0
050B            342            ; Enable the timer and interrupts
050B 439B80     343            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
050E D2CA       344       setb TR2  ; Enable timer 2
0510 22         345            ret
0511            346   
0511            347   ;---------------------------------;
0511            348   ; ISR for timer 2 ;
0511            349   ;---------------------------------;
0511            350   Timer2_ISR:
0511 C2CF       351            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0513 B284       352            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0515            353                    
0515            354            ; The two registers used in the ISR must be saved in the stack
0515 C0D0       355            push psw
0517 C0E0       356            push acc
0519 0546       357            inc pwm_counter
051B C3         358            clr c
051C E547       359            mov a, pwm
051E 9546       360            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0520 B3         361            cpl c
0521 9290       362            mov PWM_OUT, c
0523 E546       363            mov a, pwm_counter
0525            364   
0525 B46407     365            cjne a, #100, Timer2_ISR_done
0528 754600     366            mov pwm_counter, #0
052B 053F       367            inc seconds
052D D201       368            setb s_flag
052F            369            
052F            370   Timer2_ISR_done:
052F            371   
052F D0E0       372            pop acc
0531 D0D0       373            pop psw
0533 32         374            reti
0534            375   
0534            376   
0534            377   ;---------------------------------;
0534            378   ; Temperature senseor function    ;
0534            379   ;---------------------------------;
0534            380   Init_All:
0534            381            ; Configure all the pins for biderectional I/O
0534 75AC00     382            mov     P3M1, #0x00
0537 75AD00     383            mov     P3M2, #0x00
053A 75B300     384            mov     P1M1, #0x00
053D 75B400     385            mov     P1M2, #0x00
0540 75B100     386            mov     P0M1, #0x00
0543 75B200     387            mov     P0M2, #0x00
0546            388            
0546 438E10     389            orl     CKCON, #0x10 ; CLK is the input for timer 1
0549 438780     390            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
054C 759852     391            mov     SCON, #0x52
054F 53C4DF     392            anl     T3CON, #0b11011111
0552 53890F     393            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0555 438920     394            orl     TMOD, #0x20 ; Timer 1 Mode 2
0558 758D70     395            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
055B D28E       396            setb TR1
055D            397            ; Using timer 0 for delay functions.  Initialize here:
055D            398            ;clr    TR0 ; Stop timer 0
055D 438E08     399            orl     CKCON,#0x08 ; CLK is the input for timer 0
0560 5389F0     400            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0563 438901     401            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0566            402            
0566            403            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0566 43B382     404            orl     P1M1, #0b10000010
0569 53B47D     405            anl     P1M2, #0b01111101
056C            406            
056C            407            ; Initialize and start the ADC:
056C 53E8F0     408            anl ADCCON0, #0xF0
056F 43E807     409            orl ADCCON0, #0x07 ; Select channel 7
0572            410            ; AINDIDS select if some pins are analog inputs or digital I/O:
0572 75F600     411            mov AINDIDS, #0x00 ; Disable all analog inputs
0575 43F681     412            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0578 43E101     413            orl ADCCON1, #0x01 ; Enable ADC
057B            414            
057B 22         415            ret
057C            416   
057C            417   ;---------------------------------;
057C            418   ;         5_pushbuttons function               ;
057C            419   ;---------------------------------;
057C            420   LCD_PB:
057C            421            ; Set variables to 1: 'no push button pressed'
057C D202       422            setb PB0
057E D203       423            setb PB1
0580 D204       424            setb PB2
0582 D205       425            setb PB3
0584 D206       426            setb PB4
0586            427            ; The input pin used to check set to '1'
0586 D295       428            setb P1.5
0588            429            
0588            430            ; Check if any push button is pressed
0588 C280       431            clr P0.0
058A C281       432            clr P0.1
058C C282       433            clr P0.2
058E C283       434            clr P0.3
0590 C293       435            clr P1.3
0592 20954D     436            jb P1.5, LCD_PB_Done
0595            437   
0595            438            ; Debounce
0595 C002       439            push AR2
0597 7A32       439            mov R2, #50
0599 1200B5     439            lcall ?Wait_Milli_Seconds
059C D002       439            pop AR2
059E 209541     440            jb P1.5, LCD_PB_Done
05A1            441   
05A1            442            ; Set the LCD data pins to logic 1
05A1 D280       443            setb P0.0
05A3 D281       444            setb P0.1
05A5 D282       445            setb P0.2
05A7 D283       446            setb P0.3
05A9 D293       447            setb P1.3
05AB            448            
05AB            449            ; Check the push buttons one by one
05AB C293       450            clr P1.3
05AD A295       451            mov c, P1.5
05AF 9206       452            mov PB4, c
05B1 D293       453            setb P1.3
05B3 300636     454            jnb PB4,increment_soak_temp
05B6            455   
05B6 C280       456            clr P0.0
05B8 A295       457            mov c, P1.5
05BA 9205       458            mov PB3, c
05BC D280       459            setb P0.0
05BE 300537     460            jnb PB3, increment_soak_time
05C1            461            
05C1 C281       462            clr P0.1
05C3 A295       463            mov c, P1.5
05C5 9204       464            mov PB2, c
05C7 D281       465            setb P0.1
05C9 300438     466            jnb PB2, increment_reflow_temp
05CC            467            
05CC C282       468            clr P0.2
05CE A295       469            mov c, P1.5
05D0 9203       470            mov PB1, c
05D2 D282       471            setb P0.2
05D4 300339     472            jnb PB1, increment_reflow_time
05D7            473            
05D7 C283       474            clr P0.3
05D9 A295       475            mov c, P1.5
05DB 9202       476            mov PB0, c
05DD D283       477            setb P0.3
05DF 30023A     478            jnb PB0, start_stop
05E2            479   
05E2            480   LCD_PB_Done:
05E2 C002       481            push AR2
05E4 7A19       481            mov R2, #25
05E6 1200B5     481            lcall ?Wait_Milli_Seconds
05E9 D002       481            pop AR2                 
05EB 22         482            ret
05EC            483   
05EC            484   increment_soak_temp:
05EC 0545       485            inc soak_temp
05EE E545       486            mov a, soak_temp
05F0 B4F0EF     487            cjne a, #0xF0, LCD_PB_Done
05F3 754500     488            mov soak_temp, #0x00
05F6 80EA       489            sjmp LCD_PB_Done
05F8            490   increment_soak_time:
05F8 0544       491            inc soak_time
05FA E544       492            mov a, soak_time
05FC B478E3     493            cjne a, #0x78, LCD_PB_Done
05FF 754400     494            mov soak_time, #0x00
0602 80DE       495            sjmp LCD_PB_Done
0604            496   increment_reflow_temp: 
0604 0543       497            inc reflow_temp
0606 E543       498            mov a, reflow_temp
0608 B4F0D7     499            cjne a, #0xF0, LCD_PB_Done
060B 754300     500            mov reflow_temp, #0x00
060E 80D2       501            sjmp LCD_PB_Done
0610            502   increment_reflow_time:
0610 0542       503            inc reflow_time
0612 E542       504            mov a, reflow_time
0614 B44BCB     505            cjne a, #0x4B, LCD_PB_Done
0617 754200     506            mov reflow_time, #0x00
061A 80C6       507            sjmp LCD_PB_Done
061C            508   
061C            509   start_stop:
061C B208       510            cpl start_stop_flag
061E 80C2       511            sjmp LCD_PB_Done
0620            512   
0620            513   ; We can display a number any way we want.  In this case with
0620            514   ; four decimal places.
0620            515   Display_formated_BCD:
0620 C0E0       516            push acc
0622 7404       516            mov a, #4
0624 14         516            dec a
0625 120144     516            lcall ?Set_Cursor_1 ; Select column and row
0628 D0E0       516            pop acc ; display To
062A C000       517            push ar0
062C A83B       517            mov r0, bcd+3
062E 120149     517            lcall ?Display_BCD
0631 D000       517            pop ar0
0633 C000       518            push ar0
0635 A83A       518            mov r0, bcd+2
0637 120149     518            lcall ?Display_BCD
063A D000       518            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
063C            519            
063C            520            ;send the BCD value to the MATLAB script
063C C000       521            push ar0
063E A83B       521            mov r0, bcd+3
0640 120167     521            lcall ?Send_BCD
0643 D000       521            pop ar0
0645 C000       522            push ar0
0647 A83A       522            mov r0, bcd+2
0649 120167     522            lcall ?Send_BCD
064C D000       522            pop ar0
064E 742E       523            mov a, #'.'
0650 12015F     524            lcall putchar
0653 C000       525            push ar0
0655 A839       525            mov r0, bcd+1
0657 120167     525            lcall ?Send_BCD
065A D000       525            pop ar0
065C 740D       526            mov a, #'\r'
065E 12015F     527            lcall putchar
0661 740A       528            mov a, #'\n'
0663 12015F     529            lcall putchar
0666            530            ;Set_Cursor(1, 13)
0666            531            ;Send_Constant_String(#22) ; display Tj=22
0666            532            
0666 C0E0       533            push acc
0668 740E       533            mov a, #14
066A 14         533            dec a
066B 120142     533            lcall ?Set_Cursor_2 ; Select column and row
066E D0E0       533            pop acc
0670 E53F       534            mov a,seconds
0672 120676     535            lcall SendToLCD
0675            536            
0675 22         537            ret
0676            538   
0676            539   SendToLCD:
0676 75F064     540   mov b, #100
0679 84         541   div ab
067A 4430       542   orl a, #0x30 ; Convert hundreds to ASCII
067C 1200FA     543   lcall ?WriteData ; Send to LCD
067F E5F0       544   mov a, b ; Remainder is in register b
0681 75F00A     545   mov b, #10
0684 84         546   div ab
0685 4430       547   orl a, #0x30 ; Convert tens to ASCII
0687 1200FA     548   lcall ?WriteData; Send to LCD
068A E5F0       549   mov a, b
068C 4430       550   orl a, #0x30 ; Convert units to ASCII
068E 1200FA     551   lcall ?WriteData; Send to LCD
0691 22         552   ret
0692            553   
0692            554   ;-------------------------------------------------;
0692            555   ; Display values from the pushbutton to the LCD   ;
0692            556   ;-------------------------------------------------;
0692            557   
0692            558   Display_PushButtons_LCD:
0692 C0E0       559            push acc
0694 7402       559            mov a, #2
0696 14         559            dec a
0697 120142     559            lcall ?Set_Cursor_2 ; Select column and row
069A D0E0       559            pop acc
069C E545       560            mov a, soak_temp
069E 120676     561            lcall SendToLCD
06A1            562            
06A1 C0E0       563            push acc
06A3 7406       563            mov a, #6
06A5 14         563            dec a
06A6 120142     563            lcall ?Set_Cursor_2 ; Select column and row
06A9 D0E0       563            pop acc
06AB E544       564            mov a, soak_time
06AD 120676     565            lcall SendToLCD
06B0            566       
06B0 C0E0       567            push acc
06B2 740A       567            mov a, #10
06B4 14         567            dec a
06B5 120142     567            lcall ?Set_Cursor_2 ; Select column and row
06B8 D0E0       567            pop acc
06BA E543       568       mov a, reflow_temp
06BC 120676     569            lcall SendToLCD
06BF            570       
06BF C0E0       571            push acc
06C1 740E       571            mov a, #14
06C3 14         571            dec a
06C4 120142     571            lcall ?Set_Cursor_2 ; Select column and row
06C7 D0E0       571            pop acc
06C9 E542       572       mov a, reflow_time
06CB 120676     573            lcall SendToLCD
06CE            574            
06CE 22         575            ret
06CF            576   
06CF            577   
06CF            578   ;-------------------------------------------------;
06CF            579   ; Display all values and temperatures to the LCD  ;
06CF            580   ;-------------------------------------------------;
06CF            581   Display_Data:
06CF C2EF       582            clr ADCF
06D1 D2EE       583            setb ADCS ;  ADC start trigger signal
06D3 30EFFD     584       jnb ADCF, $ ; Wait for conversion complete
06D6            585       
06D6            586       ; Read the ADC result and store in [R1, R0]
06D6 E5C3       587       mov a, ADCRH   
06D8 C4         588       swap a
06D9 C0E0       589       push acc
06DB 540F       590       anl a, #0x0f
06DD F9         591       mov R1, a
06DE D0E0       592       pop acc
06E0 54F0       593       anl a, #0xf0
06E2 45C2       594       orl a, ADCRL
06E4 F8         595       mov R0, A
06E5            596       
06E5            597       ; Convert to voltage
06E5 8830       598            mov x+0, R0
06E7 8931       599            mov x+1, R1
06E9            600            ; Pad other bits with zero
06E9 753200     601            mov x+2, #0
06EC 753300     602            mov x+3, #0
06EF            603            
06EF            604            ;lcall div32 ; Get V_out
06EF            605            ; ; Calculate Temp based on V_out
06EF            606            ; Load_y(27300) ; The reference temp K
06EF            607            ; lcall sub32 ; Get Temp*0.01
06EF            608            ; ; Change Temp*0.01 to Temp
06EF            609            ; Load_y(100)
06EF            610            ; lcall mul32
06EF            611   
06EF 75347C     612            mov y+0, #low (50300 % 0x10000) 
06F2 7535C4     612            mov y+1, #high(50300 % 0x10000) 
06F5 753600     612            mov y+2, #low (50300 / 0x10000) 
06F8 753700     612            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
06FB 1202F7     613            lcall mul32 ;multiplying ADC * Vref
06FE 7534FF     614            mov y+0, #low (4095 % 0x10000) 
0701 75350F     614            mov y+1, #high(4095 % 0x10000) 
0704 753600     614            mov y+2, #low (4095 / 0x10000) 
0707 753700     614            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
070A 120384     615            lcall div32 ;now doing (ADC*Vref)/(4095)
070D            616            
070D 7534E8     617            mov y+0, #low (1000 % 0x10000) 
0710 753503     617            mov y+1, #high(1000 % 0x10000) 
0713 753600     617            mov y+2, #low (1000 / 0x10000) 
0716 753700     617            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0719 1202F7     618            lcall mul32 ;multiplying volts
071C            619            
071C 75340A     620            mov y+0, #low (10 % 0x10000) 
071F 753500     620            mov y+1, #high(10 % 0x10000) 
0722 753600     620            mov y+2, #low (10 / 0x10000) 
0725 753700     620            mov y+3, #high(10 / 0x10000) 
0728 1202F7     621            lcall mul32
072B            622            
072B            623            ;convert to temperature
072B 7534D0     624            mov y+0, #low (21200 % 0x10000) 
072E 753552     624            mov y+1, #high(21200 % 0x10000) 
0731 753600     624            mov y+2, #low (21200 / 0x10000) 
0734 753700     624            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0737 120384     625            lcall div32 
073A 753429     626            mov y+0, #low (41 % 0x10000) 
073D 753500     626            mov y+1, #high(41 % 0x10000) 
0740 753600     626            mov y+2, #low (41 / 0x10000) 
0743 753700     626            mov y+3, #high(41 / 0x10000) ;load y = 41
0746 120384     627            lcall div32 ;divide by 41
0749            628            
0749 753410     629            mov y+0, #low (10000 % 0x10000) 
074C 753527     629            mov y+1, #high(10000 % 0x10000) 
074F 753600     629            mov y+2, #low (10000 / 0x10000) 
0752 753700     629            mov y+3, #high(10000 / 0x10000) 
0755 1202F7     630            lcall mul32
0758            631            
0758 753460     632            mov y+0, #low (220000 % 0x10000) 
075B 75355B     632            mov y+1, #high(220000 % 0x10000) 
075E 753603     632            mov y+2, #low (220000 / 0x10000) 
0761 753700     632            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0764 120242     633            lcall add32
0767            634            
0767 7534A0     635            mov y+0, #low (2500000 % 0x10000) 
076A 753525     635            mov y+1, #high(2500000 % 0x10000) 
076D 753626     635            mov y+2, #low (2500000 / 0x10000) 
0770 753700     635            mov y+3, #high(2500000 / 0x10000) 
0773 1202E3     636            lcall x_gteq_y
0776            637   
0776 20001A     638            jb mf, too_fucking_hot
0779            639   
0779            640   ; Convert to BCD and display
0779 12017D     641            lcall hex2bcd
077C 120620     642            lcall Display_formated_BCD
077F 22         643            ret
0780            644   returned:
0780 12017D     645            lcall hex2bcd
0783 C0E0       646            push acc
0785 740E       646            mov a, #14
0787 14         646            dec a
0788 120142     646            lcall ?Set_Cursor_2 ; Select column and row
078B D0E0       646            pop acc
078D E53F       647            mov a,seconds
078F 120676     648            lcall SendToLCD
0792            649   
0792 22         650            ret
0793            651            
0793            652   too_fucking_hot:
0793 C0E0       653            push acc
0795 7404       653            mov a, #4
0797 14         653            dec a
0798 120144     653            lcall ?Set_Cursor_1 ; Select column and row
079B D0E0       653            pop acc
079D C083       654            push dph
079F C082       654            push dpl
07A1 C0E0       654            push acc
07A3 9000A7     654            mov dptr, #Hot_temp
07A6 120137     654            lcall ?Send_Constant_String
07A9 D0E0       654            pop acc
07AB D082       654            pop dpl
07AD D083       654            pop dph
07AF 1203ED     655            lcall fire
07B2 7486       656            mov a, #0x86
07B4 1200FF     657            lcall ?WriteCommand
07B7 7400       658            mov a, #0H
07B9 1200FA     659            lcall ?WriteData
07BC            660            
07BC 80C2       661            sjmp returned
07BE            662   
07BE            663   ;-----------------------------------------------------------------------------;
07BE            664   ;Grabs the value in register a and then compares it to the current temperature;
07BE            665   ;-----------------------------------------------------------------------------;
07BE            666   
07BE            667   Display_temp:
07BE C2EF       668            clr ADCF
07C0 D2EE       669            setb ADCS ;  ADC start trigger signal
07C2 30EFFD     670       jnb ADCF, $ ; Wait for conversion complete
07C5            671       
07C5            672       ; Read the ADC result and store in [R1, R0]
07C5 E5C3       673       mov a, ADCRH   
07C7 C4         674       swap a
07C8 C0E0       675       push acc
07CA 540F       676       anl a, #0x0f
07CC F9         677       mov R1, a
07CD D0E0       678       pop acc
07CF 54F0       679       anl a, #0xf0
07D1 45C2       680       orl a, ADCRL
07D3 F8         681       mov R0, A
07D4            682       
07D4            683       ; Convert to voltage
07D4 8830       684            mov x+0, R0
07D6 8931       685            mov x+1, R1
07D8            686            ; Pad other bits with zero
07D8 753200     687            mov x+2, #0
07DB 753300     688            mov x+3, #0
07DE            689            
07DE            690            ;lcall div32 ; Get V_out
07DE            691            ; ; Calculate Temp based on V_out
07DE            692            ; Load_y(27300) ; The reference temp K
07DE            693            ; lcall sub32 ; Get Temp*0.01
07DE            694            ; ; Change Temp*0.01 to Temp
07DE            695            ; Load_y(100)
07DE            696            ; lcall mul32
07DE            697   
07DE 75347C     698            mov y+0, #low (50300 % 0x10000) 
07E1 7535C4     698            mov y+1, #high(50300 % 0x10000) 
07E4 753600     698            mov y+2, #low (50300 / 0x10000) 
07E7 753700     698            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
07EA 1202F7     699            lcall mul32 ;multiplying ADC * Vref
07ED 7534FF     700            mov y+0, #low (4095 % 0x10000) 
07F0 75350F     700            mov y+1, #high(4095 % 0x10000) 
07F3 753600     700            mov y+2, #low (4095 / 0x10000) 
07F6 753700     700            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
07F9 120384     701            lcall div32 ;now doing (ADC*Vref)/(4095)
07FC            702            
07FC 7534E8     703            mov y+0, #low (1000 % 0x10000) 
07FF 753503     703            mov y+1, #high(1000 % 0x10000) 
0802 753600     703            mov y+2, #low (1000 / 0x10000) 
0805 753700     703            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0808 1202F7     704            lcall mul32 ;multiplying volts
080B            705            
080B 75340A     706            mov y+0, #low (10 % 0x10000) 
080E 753500     706            mov y+1, #high(10 % 0x10000) 
0811 753600     706            mov y+2, #low (10 / 0x10000) 
0814 753700     706            mov y+3, #high(10 / 0x10000) 
0817 1202F7     707            lcall mul32
081A            708            
081A            709            ;convert to temperature
081A 7534D0     710            mov y+0, #low (21200 % 0x10000) 
081D 753552     710            mov y+1, #high(21200 % 0x10000) 
0820 753600     710            mov y+2, #low (21200 / 0x10000) 
0823 753700     710            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
0826 120384     711            lcall div32 
0829 753429     712            mov y+0, #low (41 % 0x10000) 
082C 753500     712            mov y+1, #high(41 % 0x10000) 
082F 753600     712            mov y+2, #low (41 / 0x10000) 
0832 753700     712            mov y+3, #high(41 / 0x10000) ;load y = 41
0835 120384     713            lcall div32 ;divide by 41
0838            714            
0838 753410     715            mov y+0, #low (10000 % 0x10000) 
083B 753527     715            mov y+1, #high(10000 % 0x10000) 
083E 753600     715            mov y+2, #low (10000 / 0x10000) 
0841 753700     715            mov y+3, #high(10000 / 0x10000) 
0844 1202F7     716            lcall mul32
0847            717            
0847 753460     718            mov y+0, #low (220000 % 0x10000) 
084A 75355B     718            mov y+1, #high(220000 % 0x10000) 
084D 753603     718            mov y+2, #low (220000 / 0x10000) 
0850 753700     718            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
0853 120242     719            lcall add32
0856            720   
0856            721   ; Convert to BCD and display
0856 12017D     722            lcall hex2bcd
0859 12085D     723            lcall Display_temperature
085C            724   
085C 22         725            ret
085D            726   
085D            727   Display_temperature:
085D C0E0       728            push acc
085F 7404       728            mov a, #4
0861 14         728            dec a
0862 120144     728            lcall ?Set_Cursor_1 ; Select column and row
0865 D0E0       728            pop acc ; display To
0867 C000       729            push ar0
0869 A83B       729            mov r0, bcd+3
086B 120149     729            lcall ?Display_BCD
086E D000       729            pop ar0
0870 C000       730            push ar0
0872 A83A       730            mov r0, bcd+2
0874 120149     730            lcall ?Display_BCD
0877 D000       730            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
0879 22         731            ret
087A            732   
087A            733   Compare_temp:
087A 853A48     734            mov temp+0, bcd+2
087D 853B49     735            mov temp+1, bcd+3
0880 854838     736            mov bcd+0, temp+0
0883 854939     737            mov bcd+1, temp+1
0886 753A00     738            mov bcd+2,#0
0889 753B00     739            mov bcd+3,#0
088C 753C00     740            mov bcd+4,#0
088F            741            
088F 120206     742            lcall bcd2hex
0892            743            
0892 853034     744            mov y+0,x+0
0895 853135     745            mov y+1,x+1
0898 853236     746            mov y+2,x+2
089B 853337     747            mov y+3,x+3
089E            748            
089E F530       749            mov x+0,a
08A0 753100     750            mov x+1,#0
08A3 753200     751            mov x+2,#0
08A6 753300     752            mov x+3,#0
08A9            753            
08A9 12017D     754            lcall hex2bcd
08AC 1202ED     755            lcall x_lteq_y
08AF            756   
08AF 22         757            ret
08B0            758   
08B0            759   check_stop:
08B0 D206       760            setb PB4
08B2            761            ; The input pin used to check set to '1'
08B2 D295       762            setb P1.5
08B4 C283       763            clr P0.3
08B6 209519     764            jb P1.5, stop_PB_Done
08B9            765            ; Debounce
08B9 C002       766            push AR2
08BB 7A32       766            mov R2, #50
08BD 1200B5     766            lcall ?Wait_Milli_Seconds
08C0 D002       766            pop AR2
08C2 20950D     767            jb P1.5, stop_PB_Done
08C5 D283       768            setb P0.3
08C7 C283       769            clr P0.3
08C9 A295       770            mov c, P1.5
08CB 9202       771            mov PB0, c
08CD D283       772            setb P0.3
08CF 300201     773            jnb PB0, start_stop_timer
08D2            774   
08D2            775   stop_PB_Done:
08D2 22         776            ret
08D3            777   start_stop_timer:
08D3 B208       778            cpl start_stop_flag
08D5 80FB       779            sjmp stop_PB_Done
08D7            780   
08D7            781   
08D7            782   Display_special_char1:
08D7 120474     783            lcall heart
08DA 7481       784            mov a, #0x81
08DC 1200FF     785            lcall ?WriteCommand
08DF 7403       786            mov a, #3H
08E1 1200FA     787            lcall ?WriteData
08E4            788   
08E4 120447     789            lcall eighth
08E7 74C4       790            mov a, #0xC4
08E9 1200FF     791            lcall ?WriteCommand
08EC 7402       792            mov a, #2H
08EE 1200FA     793            lcall ?WriteData
08F1            794   
08F1 1204A1     795            lcall bell
08F4 7487       796            mov a, #0x87
08F6 1200FF     797            lcall ?WriteCommand
08F9 7404       798            mov a, #4H
08FB 1200FA     799            lcall ?WriteData
08FE            800   
08FE 12041A     801            lcall double_eighth
0901 74CA       802            mov a, #0xCA
0903 1200FF     803            lcall ?WriteCommand
0906 7401       804            mov a, #1H
0908 1200FA     805            lcall ?WriteData
090B            806   
090B 120474     807            lcall heart
090E 748D       808            mov a, #0x8D
0910 1200FF     809            lcall ?WriteCommand
0913 7403       810            mov a, #3H
0915 1200FA     811            lcall ?WriteData
0918 32         812            reti
0919            813            
0919            814   Display_special_char2:
0919 120474     815            lcall heart
091C 74C0       816            mov a, #0xC0
091E 1200FF     817            lcall ?WriteCommand
0921 7403       818            mov a, #3H
0923 1200FA     819            lcall ?WriteData
0926            820   
0926 120447     821            lcall eighth
0929 7483       822            mov a, #0x83
092B 1200FF     823            lcall ?WriteCommand
092E 7402       824            mov a, #2H
0930 1200FA     825            lcall ?WriteData
0933            826   
0933 1204A1     827            lcall bell
0936 74C7       828            mov a, #0xC7
0938 1200FF     829            lcall ?WriteCommand
093B 7404       830            mov a, #4H
093D 1200FA     831            lcall ?WriteData
0940            832   
0940 12041A     833            lcall double_eighth
0943 748B       834            mov a, #0x8B
0945 1200FF     835            lcall ?WriteCommand
0948 7401       836            mov a, #1H
094A 1200FA     837            lcall ?WriteData
094D            838   
094D 120474     839            lcall heart
0950 74CE       840            mov a, #0xCE
0952 1200FF     841            lcall ?WriteCommand
0955 7403       842            mov a, #3H
0957 1200FA     843            lcall ?WriteData
095A 32         844            reti
095B            845   
095B            846   clear_screen_func:
095B            847       
095B C0E0       848            push acc
095D 7401       848            mov a, #1
095F 14         848            dec a
0960 120144     848            lcall ?Set_Cursor_1 ; Select column and row
0963 D0E0       848            pop acc
0965 C083       849            push dph
0967 C082       849            push dpl
0969 C0E0       849            push acc
096B 900096     849            mov dptr, #clear_screen
096E 120137     849            lcall ?Send_Constant_String
0971 D0E0       849            pop acc
0973 D082       849            pop dpl
0975 D083       849            pop dph
0977 C0E0       850            push acc
0979 7401       850            mov a, #1
097B 14         850            dec a
097C 120142     850            lcall ?Set_Cursor_2 ; Select column and row
097F D0E0       850            pop acc
0981 C083       851            push dph
0983 C082       851            push dpl
0985 C0E0       851            push acc
0987 900096     851            mov dptr, #clear_screen
098A 120137     851            lcall ?Send_Constant_String
098D D0E0       851            pop acc
098F D082       851            pop dpl
0991 D083       851            pop dph
0993 32         852       reti
0994            853       
0994            854   main:
0994 75817F     855            mov sp, #0x7f
0997 75B100     856       mov P0M1, #0x00
099A 75B200     857       mov P0M2, #0x00
099D 75B300     858       mov P1M1, #0x00
09A0 75B400     859       mov P1M2, #0x00
09A3 75AD00     860       mov P3M2, #0x00
09A6 75AD00     861       mov P3M2, #0x00
09A9            862       
09A9 120534     863            lcall Init_All
09AC 120104     864       lcall LCD_4BIT
09AF 1204CE     865            lcall Timer0_Init
09B2 1204F1     866       lcall Timer2_Init
09B5            867            
09B5 D2AF       868       setb EA   ; Enable Global interrupts
09B7            869       ; initial messages in LCD
09B7 C0E0       870            push acc
09B9 7401       870            mov a, #1
09BB 14         870            dec a
09BC 120144     870            lcall ?Set_Cursor_1 ; Select column and row
09BF D0E0       870            pop acc
09C1 C083       871            push dph
09C3 C082       871            push dpl
09C5 C0E0       871            push acc
09C7 90002E     871            mov dptr, #To_Message
09CA 120137     871            lcall ?Send_Constant_String
09CD D0E0       871            pop acc
09CF D082       871            pop dpl
09D1 D083       871            pop dph
09D3 C0E0       872            push acc
09D5 7401       872            mov a, #1
09D7 14         872            dec a
09D8 120142     872            lcall ?Set_Cursor_2 ; Select column and row
09DB D0E0       872            pop acc
09DD C083       873            push dph
09DF C082       873            push dpl
09E1 C0E0       873            push acc
09E3 90003F     873            mov dptr, #Time_temp_display
09E6 120137     873            lcall ?Send_Constant_String
09E9 D0E0       873            pop acc
09EB D082       873            pop dpl
09ED D083       873            pop dph
09EF 754B00     874       mov FSM_state,#0
09F2 753F00     875            mov seconds, #0x00
09F5 75458C     876            mov soak_temp, #0x8C ;140
09F8 75443C     877            mov soak_time, #0x3C ; 60
09FB 7543E6     878            mov reflow_temp, #0xE6 ; 230
09FE 75421E     879            mov reflow_time, #0x1E ; 30
0A01 753800     880            mov bcd,#0
0A04 D2CA       881            setb TR2
0A06            882            
0A06 C208       883            clr start_stop_flag
0A08 C207       884            clr FSM_start_flag
0A0A C28C       885       clr TR0
0A0C            886   ;---------------------------------;
0A0C            887   ;                FSM     funtion                               ;
0A0C            888   ;---------------------------------;
0A0C            889   FSM:
0A0C E54B       890       mov a, FSM_state
0A0E            891   FSM_state0: ;initial state
0A0E B40036     892       cjne a, #0, FSM_state1
0A11 754700     893       mov pwm, #0 ; power variable
0A14 12057C     894            lcall LCD_PB ; calls and checks the pushbuttons
0A17 120692     895            lcall Display_PushButtons_LCD ;Displays values in pushbuttons
0A1A 1207BE     896            lcall Display_temp
0A1D 300824     897       jnb start_stop_flag, FSM_state0_done
0A20 D207       898       setb FSM_start_flag
0A22 753F00     899       mov seconds, #0x00     ; set time to 0
0A25 754B01     900       mov FSM_state, #1   ; set FSM_state to 1, next state is state1
0A28 C0E0       901            push acc
0A2A 7401       901            mov a, #1
0A2C 14         901            dec a
0A2D 120142     901            lcall ?Set_Cursor_2 ; Select column and row
0A30 D0E0       901            pop acc
0A32 C083       902            push dph
0A34 C082       902            push dpl
0A36 C0E0       902            push acc
0A38 900050     902            mov dptr, #Ramp_to_soak
0A3B 120137     902            lcall ?Send_Constant_String
0A3E D0E0       902            pop acc
0A40 D082       902            pop dpl
0A42 D083       902            pop dph
0A44            903   
0A44            904   
0A44            905   FSM_state0_done:
0A44 020A0C     906       ljmp FSM   ;jump back to FSM and reload FSM_state to a
0A47            907   
0A47            908   FSM_state1: ;ramp to soak
0A47 B4014D     909       cjne a, #1, FSM_state2
0A4A 754764     910       mov pwm, #100
0A4D C3         911       clr c
0A4E 1208B0     912            lcall check_stop
0A51 300834     913       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0A54 743C       914       mov a, #0x3C
0A56 953F       915       subb a, seconds
0A58 401A       916       jc abort
0A5A            917   continue:
0A5A C3         918       clr c   ; ! i don't know what is c
0A5B 300113     919            jnb s_flag, FSM_state1_done
0A5E C201       920            clr s_flag
0A60 1206CF     921            lcall Display_Data
0A63 E545       922            mov a, soak_temp    ; set a to soak temp
0A65 12087A     923            lcall Compare_temp
0A68 300006     924       jnb mf, FSM_state1_done
0A6B 753F00     925       mov seconds, #0x00     ; set time to 0
0A6E 754B02     926       mov FSM_state, #2
0A71            927   FSM_state1_done:
0A71 020A0C     928       ljmp FSM
0A74            929   abort:
0A74 7432       930       mov a, #0x32  ; set a to 50 degree
0A76 3001F8     931            jnb s_flag, FSM_state1_done
0A79 1206CF     932            lcall Display_Data
0A7C 12087A     933            lcall Compare_temp
0A7F 2000D8     934            jb mf, continue ; if temp is larger then 50 degree, go back to continue
0A82 754B00     935       mov FSM_state, #0   ; abort the FSM
0A85 020994     936            ljmp main
0A88            937   
0A88            938   stop_state:
0A88 C2CA       939       clr TR2
0A8A 300805     940       jnb start_stop_flag, stop
0A8D D2CA       941            setb TR2
0A8F 020A0C     942            ljmp FSM
0A92            943   
0A92            944   stop:
0A92 1208B0     945            lcall check_stop
0A95 80F1       946       sjmp stop_state
0A97            947   
0A97            948   FSM_state2: ;preheat/soak
0A97 B4023D     949       cjne a, #2, FSM_state3
0A9A 754714     950       mov pwm, #20
0A9D C0E0       951            push acc
0A9F 7401       951            mov a, #1
0AA1 14         951            dec a
0AA2 120142     951            lcall ?Set_Cursor_2 ; Select column and row
0AA5 D0E0       951            pop acc
0AA7 C083       952            push dph
0AA9 C082       952            push dpl
0AAB C0E0       952            push acc
0AAD 90005E     952            mov dptr, #Soak_display
0AB0 120137     952            lcall ?Send_Constant_String
0AB3 D0E0       952            pop acc
0AB5 D082       952            pop dpl
0AB7 D083       952            pop dph
0AB9 C3         953       clr c   ; ! i don't know what is c 
0ABA 300117     954            jnb s_flag, FSM_state2_done
0ABD C201       955            clr s_flag
0ABF 1206CF     956            lcall Display_Data
0AC2 1208B0     957            lcall check_stop
0AC5 3008C0     958       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0AC8 E544       959            mov a, soak_time    ; set a to soak time
0ACA 953F       960       subb a, seconds    ; temp is our currect sec
0ACC 5006       961       jnc FSM_state2_done
0ACE 753F00     962       mov seconds, #0x00     ; set time to 0
0AD1 754B03     963       mov FSM_state, #3
0AD4            964   FSM_state2_done:
0AD4 020A0C     965       ljmp FSM
0AD7            966   
0AD7            967   FSM_state3: ;ramp to peak
0AD7 B40342     968       cjne a, #3, FSM_state4
0ADA 754764     969       mov pwm, #100
0ADD C0E0       970            push acc
0ADF 7401       970            mov a, #1
0AE1 14         970            dec a
0AE2 120142     970            lcall ?Set_Cursor_2 ; Select column and row
0AE5 D0E0       970            pop acc
0AE7 C083       971            push dph
0AE9 C082       971            push dpl
0AEB C0E0       971            push acc
0AED 90006C     971            mov dptr, #Ramp_to_peak
0AF0 120137     971            lcall ?Send_Constant_String
0AF3 D0E0       971            pop acc
0AF5 D082       971            pop dpl
0AF7 D083       971            pop dph
0AF9 C3         972       clr c   ; ! i don't know what is c 
0AFA 1208B0     973            lcall check_stop
0AFD 300888     974       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B00 300113     975            jnb s_flag, FSM_state3_done
0B03 C201       976            clr s_flag
0B05 1206CF     977            lcall Display_Data
0B08 E543       978            mov a, reflow_temp    ; set a to reflow temp
0B0A 12087A     979            lcall Compare_temp
0B0D 300006     980       jnb mf, FSM_state3_done
0B10 753F00     981       mov seconds, #0x00     ; set time to 0
0B13 754B04     982       mov FSM_state, #4
0B16            983   FSM_state3_done:
0B16 020A0C     984       ljmp FSM
0B19            985       
0B19            986   intermediate_stop_jump:
0B19 020A88     987            ljmp stop_state
0B1C            988   
0B1C            989   FSM_state4:;reflow
0B1C B4043D     990       cjne a, #4, FSM_state5
0B1F 754714     991       mov pwm, #20
0B22 C0E0       992            push acc
0B24 7401       992            mov a, #1
0B26 14         992            dec a
0B27 120142     992            lcall ?Set_Cursor_2 ; Select column and row
0B2A D0E0       992            pop acc
0B2C C083       993            push dph
0B2E C082       993            push dpl
0B30 C0E0       993            push acc
0B32 90007A     993            mov dptr, #Reflow_display
0B35 120137     993            lcall ?Send_Constant_String
0B38 D0E0       993            pop acc
0B3A D082       993            pop dpl
0B3C D083       993            pop dph
0B3E C3         994       clr c   ; ! i don't know what is c 
0B3F 300117     995            jnb s_flag, FSM_state4_done
0B42 C201       996            clr s_flag
0B44 1206CF     997            lcall Display_Data
0B47 1208B0     998            lcall check_stop
0B4A 3008CC     999       jnb start_stop_flag, intermediate_stop_jump; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B4D E542      1000            mov a, reflow_time    ; set a to reflow time
0B4F 953F      1001       subb a, seconds    ; temp is our currect sec
0B51 5006      1002       jnc FSM_state4_done
0B53 753F00    1003       mov seconds, #0x00     ; set time to 0
0B56 754B05    1004       mov FSM_state, #5
0B59           1005   FSM_state4_done:
0B59 020A0C    1006       ljmp FSM
0B5C           1007   
0B5C           1008   FSM_state5:;cooling
0B5C B40542    1009       cjne a, #5, FSM_state6
0B5F 754700    1010       mov pwm, #0
0B62           1011       
0B62 C0E0      1012            push acc
0B64 7401      1012            mov a, #1
0B66 14        1012            dec a
0B67 120142    1012            lcall ?Set_Cursor_2 ; Select column and row
0B6A D0E0      1012            pop acc
0B6C C083      1013            push dph
0B6E C082      1013            push dpl
0B70 C0E0      1013            push acc
0B72 900088    1013            mov dptr, #Cooling_display
0B75 120137    1013            lcall ?Send_Constant_String
0B78 D0E0      1013            pop acc
0B7A D082      1013            pop dpl
0B7C D083      1013            pop dph
0B7E C3        1014       clr c
0B7F 1208B0    1015            lcall check_stop
0B82 300894    1016       jnb start_stop_flag, intermediate_stop_jump ; checks the flag if 0, then means stop was pressed, if 1 keep on going 
0B85 300113    1017            jnb s_flag, FSM_state5_done
0B88 C201      1018            clr s_flag
0B8A 1206CF    1019            lcall Display_Data
0B8D 743C      1020            mov a, #0x3C    ; set a to 60
0B8F 12087A    1021            lcall Compare_temp
0B92           1022   
0B92 200006    1023       jb mf, FSM_state5_done
0B95 753F00    1024       mov seconds, #0x00     ; set time to 0
0B98 754B06    1025       mov FSM_state, #6
0B9B           1026   FSM_state5_done: 
0B9B 020A0C    1027       ljmp FSM
0B9E           1028   
0B9E           1029   intermediate_state_0:
0B9E 020A0C    1030            ljmp FSM
0BA1           1031            
0BA1           1032   FSM_state6:
0BA1 B406FA    1033            cjne a, #6, intermediate_state_0
0BA4 C2CA      1034            clr TR2
0BA6 D28C      1035            setb TR0
0BA8 D2A9      1036            setb ET0
0BAA           1037   
0BAA 1208D7    1038       lcall Display_special_char1
0BAD 754D7C    1039            mov Melody_Reload+1, #high(B3_KEY)
0BB0 754CBD    1040            mov Melody_Reload+0, #low(B3_KEY)
0BB3 C002      1041            push AR2
0BB5 7A78      1041            mov R2, #120
0BB7 1200B5    1041            lcall ?Wait_Milli_Seconds
0BBA D002      1041            pop AR2
0BBC           1042   
0BBC 754D6C    1043            mov Melody_Reload+1, #high(A3_KEY)
0BBF 754CA1    1044            mov Melody_Reload+0, #low(A3_KEY)
0BC2 C002      1045            push AR2
0BC4 7A78      1045            mov R2, #120
0BC6 1200B5    1045            lcall ?Wait_Milli_Seconds
0BC9 D002      1045            pop AR2
0BCB           1046   
0BCB 754D63    1047            mov Melody_Reload+1, #high(Gs3_KEY)
0BCE 754CC0    1048            mov Melody_Reload+0, #low(Gs3_KEY)
0BD1 C002      1049            push AR2
0BD3 7A78      1049            mov R2, #120
0BD5 1200B5    1049            lcall ?Wait_Milli_Seconds
0BD8 D002      1049            pop AR2
0BDA           1050            
0BDA 754D6C    1051            mov Melody_Reload+1, #high(A3_KEY)
0BDD 754CA1    1052            mov Melody_Reload+0, #low(A3_KEY)
0BE0 C002      1053            push AR2
0BE2 7A78      1053            mov R2, #120
0BE4 1200B5    1053            lcall ?Wait_Milli_Seconds
0BE7 D002      1053            pop AR2
0BE9           1054   
0BE9 12095B    1055            lcall clear_screen_func
0BEC           1056   ;----------------------------------------
0BEC 120919    1057            lcall Display_special_char2
0BEF           1058   
0BEF 754D84    1059            mov Melody_Reload+1, #high(C4_KEY)
0BF2 754C05    1060            mov Melody_Reload+0, #low(C4_KEY)
0BF5 C002      1061            push AR2
0BF7 7AF0      1061            mov R2, #240
0BF9 1200B5    1061            lcall ?Wait_Milli_Seconds
0BFC D002      1061            pop AR2
0BFE C002      1062            push AR2
0C00 7AF0      1062            mov R2, #240
0C02 1200B5    1062            lcall ?Wait_Milli_Seconds
0C05 D002      1062            pop AR2
0C07           1063            
0C07 12095B    1064       lcall clear_screen_func
0C0A 1208D7    1065       lcall Display_special_char1
0C0D           1066       
0C0D 754D84    1067            mov Melody_Reload+1, #high(D4_KEY)
0C10 754C05    1068            mov Melody_Reload+0, #low(D4_KEY)
0C13 C002      1069            push AR2
0C15 7A78      1069            mov R2, #120
0C17 1200B5    1069            lcall ?Wait_Milli_Seconds
0C1A D002      1069            pop AR2
0C1C           1070   
0C1C 754D84    1071            mov Melody_Reload+1, #high(C4_KEY)
0C1F 754C05    1072            mov Melody_Reload+0, #low(C4_KEY)
0C22 C002      1073            push AR2
0C24 7A78      1073            mov R2, #120
0C26 1200B5    1073            lcall ?Wait_Milli_Seconds
0C29 D002      1073            pop AR2
0C2B           1074   
0C2B 754DBE    1075            mov Melody_Reload+1, #high(B4_KEY)
0C2E 754C5F    1076            mov Melody_Reload+0, #low(B4_KEY)
0C31 C002      1077            push AR2
0C33 7A78      1077            mov R2, #120
0C35 1200B5    1077            lcall ?Wait_Milli_Seconds
0C38 D002      1077            pop AR2
0C3A           1078   
0C3A 754DC2    1079            mov Melody_Reload+1, #high(C5_KEY)
0C3D 754C12    1080            mov Melody_Reload+0, #low(C5_KEY)
0C40 C002      1081            push AR2
0C42 7A78      1081            mov R2, #120
0C44 1200B5    1081            lcall ?Wait_Milli_Seconds
0C47 D002      1081            pop AR2
0C49           1082   
0C49 12095B    1083            lcall clear_screen_func
0C4C 120919    1084       lcall Display_special_char2
0C4F           1085            
0C4F 754DCE    1086            mov Melody_Reload+1, #high(E5_KEY)
0C52 754CD7    1087            mov Melody_Reload+0, #low(E5_KEY)
0C55 C002      1088            push AR2
0C57 7AF0      1088            mov R2, #240
0C59 1200B5    1088            lcall ?Wait_Milli_Seconds
0C5C D002      1088            pop AR2
0C5E C002      1089            push AR2
0C60 7AF0      1089            mov R2, #240
0C62 1200B5    1089            lcall ?Wait_Milli_Seconds
0C65 D002      1089            pop AR2
0C67           1090   
0C67 12095B    1091            lcall clear_screen_func
0C6A 1208D7    1092       lcall Display_special_char1
0C6D           1093   ;-----------------------------------------
0C6D 754DD1    1094            mov Melody_Reload+1, #high(F5_KEY)
0C70 754C96    1095            mov Melody_Reload+0, #low(F5_KEY)
0C73 C002      1096            push AR2
0C75 7A78      1096            mov R2, #120
0C77 1200B5    1096            lcall ?Wait_Milli_Seconds
0C7A D002      1096            pop AR2
0C7C           1097   
0C7C 754DCE    1098            mov Melody_Reload+1, #high(E5_KEY)
0C7F 754CD7    1099            mov Melody_Reload+0, #low(E5_KEY)
0C82 C002      1100            push AR2
0C84 7A78      1100            mov R2, #120
0C86 1200B5    1100            lcall ?Wait_Milli_Seconds
0C89 D002      1100            pop AR2
0C8B           1101   
0C8B 754DCB    1102            mov Melody_Reload+1, #high(Ds5_KEY)
0C8E 754CEB    1103            mov Melody_Reload+0, #low(Ds5_KEY)
0C91 C002      1104            push AR2
0C93 7A78      1104            mov R2, #120
0C95 1200B5    1104            lcall ?Wait_Milli_Seconds
0C98 D002      1104            pop AR2
0C9A           1105   
0C9A 754DCE    1106            mov Melody_Reload+1, #high(E5_KEY)
0C9D 754CD7    1107            mov Melody_Reload+0, #low(E5_KEY)
0CA0 C002      1108            push AR2
0CA2 7A78      1108            mov R2, #120
0CA4 1200B5    1108            lcall ?Wait_Milli_Seconds
0CA7 D002      1108            pop AR2
0CA9           1109   
0CA9 12095B    1110            lcall clear_screen_func
0CAC 120919    1111       lcall Display_special_char2
0CAF           1112   ;-----------------------------------------
0CAF 754DDF    1113            mov Melody_Reload+1, #high(B5_KEY)
0CB2 754C30    1114            mov Melody_Reload+0, #low(B5_KEY)
0CB5 C002      1115            push AR2
0CB7 7A78      1115            mov R2, #120
0CB9 1200B5    1115            lcall ?Wait_Milli_Seconds
0CBC D002      1115            pop AR2
0CBE           1116   
0CBE 754DDB    1117            mov Melody_Reload+1, #high(A5_KEY)
0CC1 754C29    1118            mov Melody_Reload+0, #low(A5_KEY)
0CC4 C002      1119            push AR2
0CC6 7A78      1119            mov R2, #120
0CC8 1200B5    1119            lcall ?Wait_Milli_Seconds
0CCB D002      1119            pop AR2
0CCD           1120   
0CCD 754DD8    1121            mov Melody_Reload+1, #high(Gs5_KEY)
0CD0 754CF7    1122            mov Melody_Reload+0, #low(Gs5_KEY)
0CD3 C002      1123            push AR2
0CD5 7A78      1123            mov R2, #120
0CD7 1200B5    1123            lcall ?Wait_Milli_Seconds
0CDA D002      1123            pop AR2
0CDC           1124   
0CDC 754DDB    1125            mov Melody_Reload+1, #high(A5_KEY)
0CDF 754C29    1126            mov Melody_Reload+0, #low(A5_KEY)
0CE2 C002      1127            push AR2
0CE4 7A78      1127            mov R2, #120
0CE6 1200B5    1127            lcall ?Wait_Milli_Seconds
0CE9 D002      1127            pop AR2
0CEB           1128   
0CEB 12095B    1129            lcall clear_screen_func
0CEE 1208D7    1130       lcall Display_special_char1
0CF1           1131   ;--------------------------------------
0CF1 754DDF    1132            mov Melody_Reload+1, #high(B5_KEY)
0CF4 754C30    1133            mov Melody_Reload+0, #low(B5_KEY)
0CF7 C002      1134            push AR2
0CF9 7A78      1134            mov R2, #120
0CFB 1200B5    1134            lcall ?Wait_Milli_Seconds
0CFE D002      1134            pop AR2
0D00           1135   
0D00 754DDB    1136            mov Melody_Reload+1, #high(A5_KEY)
0D03 754C29    1137            mov Melody_Reload+0, #low(A5_KEY)
0D06 C002      1138            push AR2
0D08 7A78      1138            mov R2, #120
0D0A 1200B5    1138            lcall ?Wait_Milli_Seconds
0D0D D002      1138            pop AR2
0D0F           1139   
0D0F 754DD8    1140            mov Melody_Reload+1, #high(Gs5_KEY)
0D12 754CF7    1141            mov Melody_Reload+0, #low(Gs5_KEY)
0D15 C002      1142            push AR2
0D17 7A78      1142            mov R2, #120
0D19 1200B5    1142            lcall ?Wait_Milli_Seconds
0D1C D002      1142            pop AR2
0D1E           1143   
0D1E 754DDB    1144            mov Melody_Reload+1, #high(A5_KEY)
0D21 754C29    1145            mov Melody_Reload+0, #low(A5_KEY)
0D24 C002      1146            push AR2
0D26 7A78      1146            mov R2, #120
0D28 1200B5    1146            lcall ?Wait_Milli_Seconds
0D2B D002      1146            pop AR2
0D2D           1147   
0D2D 12095B    1148            lcall clear_screen_func
0D30 120919    1149       lcall Display_special_char2
0D33           1150   
0D33 754DE1    1151            mov Melody_Reload+1, #high(C6_KEY)
0D36 754C05    1152            mov Melody_Reload+0, #low(C6_KEY)
0D39 C002      1153            push AR2
0D3B 7AF0      1153            mov R2, #240
0D3D 1200B5    1153            lcall ?Wait_Milli_Seconds
0D40 D002      1153            pop AR2
0D42 C002      1154            push AR2
0D44 7AF0      1154            mov R2, #240
0D46 1200B5    1154            lcall ?Wait_Milli_Seconds
0D49 D002      1154            pop AR2
0D4B           1155            
0D4B 12095B    1156            lcall clear_screen_func
0D4E 1208D7    1157       lcall Display_special_char1
0D51           1158   ;----------------------------------------
0D51 754DDB    1159            mov Melody_Reload+1, #high(A5_KEY)
0D54 754C29    1160            mov Melody_Reload+0, #low(A5_KEY)
0D57 C002      1161            push AR2
0D59 7AF0      1161            mov R2, #240
0D5B 1200B5    1161            lcall ?Wait_Milli_Seconds
0D5E D002      1161            pop AR2
0D60           1162   
0D60 754DE1    1163            mov Melody_Reload+1, #high(C6_KEY)
0D63 754C05    1164            mov Melody_Reload+0, #low(C6_KEY)
0D66 C002      1165            push AR2
0D68 7AF0      1165            mov R2, #240
0D6A 1200B5    1165            lcall ?Wait_Milli_Seconds
0D6D D002      1165            pop AR2
0D6F           1166   
0D6F 12095B    1167            lcall clear_screen_func
0D72 120919    1168       lcall Display_special_char2
0D75           1169   ;-----------------------------------------
0D75 754DDF    1170            mov Melody_Reload+1, #high(B5_KEY)
0D78 754C30    1171            mov Melody_Reload+0, #low(B5_KEY)
0D7B C002      1172            push AR2
0D7D 7AF0      1172            mov R2, #240
0D7F 1200B5    1172            lcall ?Wait_Milli_Seconds
0D82 D002      1172            pop AR2
0D84           1173   
0D84 754DDB    1174            mov Melody_Reload+1, #high(A5_KEY)
0D87 754C29    1175            mov Melody_Reload+0, #low(A5_KEY)
0D8A C002      1176            push AR2
0D8C 7AF0      1176            mov R2, #240
0D8E 1200B5    1176            lcall ?Wait_Milli_Seconds
0D91 D002      1176            pop AR2
0D93           1177   
0D93 12095B    1178            lcall clear_screen_func
0D96 1208D7    1179       lcall Display_special_char1
0D99           1180   
0D99 754DD6    1181            mov Melody_Reload+1, #high(G5_KEY)
0D9C 754C29    1182            mov Melody_Reload+0, #low(A5_KEY)
0D9F C002      1183            push AR2
0DA1 7AF0      1183            mov R2, #240
0DA3 1200B5    1183            lcall ?Wait_Milli_Seconds
0DA6 D002      1183            pop AR2
0DA8           1184   
0DA8 754DDB    1185            mov Melody_Reload+1, #high(A5_KEY)
0DAB 754C29    1186            mov Melody_Reload+0, #low(A5_KEY)
0DAE C002      1187            push AR2
0DB0 7AF0      1187            mov R2, #240
0DB2 1200B5    1187            lcall ?Wait_Milli_Seconds
0DB5 D002      1187            pop AR2
0DB7           1188   
0DB7 12095B    1189            lcall clear_screen_func
0DBA 120919    1190       lcall Display_special_char2
0DBD           1191   ;-----------------------------------------
0DBD 754DDF    1192            mov Melody_Reload+1, #high(B5_KEY)
0DC0 754C30    1193            mov Melody_Reload+0, #low(B5_KEY)
0DC3 C002      1194            push AR2
0DC5 7AF0      1194            mov R2, #240
0DC7 1200B5    1194            lcall ?Wait_Milli_Seconds
0DCA D002      1194            pop AR2
0DCC           1195   
0DCC 754DDB    1196            mov Melody_Reload+1, #high(A5_KEY)
0DCF 754C29    1197            mov Melody_Reload+0, #low(A5_KEY)
0DD2 C002      1198            push AR2
0DD4 7AF0      1198            mov R2, #240
0DD6 1200B5    1198            lcall ?Wait_Milli_Seconds
0DD9 D002      1198            pop AR2
0DDB           1199   
0DDB 12095B    1200            lcall clear_screen_func
0DDE 1208D7    1201       lcall Display_special_char1
0DE1           1202   
0DE1 754DD6    1203            mov Melody_Reload+1, #high(G5_KEY)
0DE4 754C29    1204            mov Melody_Reload+0, #low(A5_KEY)
0DE7 C002      1205            push AR2
0DE9 7AF0      1205            mov R2, #240
0DEB 1200B5    1205            lcall ?Wait_Milli_Seconds
0DEE D002      1205            pop AR2
0DF0           1206   
0DF0 754DDB    1207            mov Melody_Reload+1, #high(A5_KEY)
0DF3 754C29    1208            mov Melody_Reload+0, #low(A5_KEY)
0DF6 C002      1209            push AR2
0DF8 7AF0      1209            mov R2, #240
0DFA 1200B5    1209            lcall ?Wait_Milli_Seconds
0DFD D002      1209            pop AR2
0DFF           1210   
0DFF 12095B    1211            lcall clear_screen_func
0E02 120919    1212       lcall Display_special_char2
0E05           1213   ;-----------------------------------------
0E05 754DDF    1214            mov Melody_Reload+1, #high(B5_KEY)
0E08 754C30    1215            mov Melody_Reload+0, #low(B5_KEY)
0E0B C002      1216            push AR2
0E0D 7AF0      1216            mov R2, #240
0E0F 1200B5    1216            lcall ?Wait_Milli_Seconds
0E12 D002      1216            pop AR2
0E14           1217   
0E14 754DDB    1218            mov Melody_Reload+1, #high(A5_KEY)
0E17 754C29    1219            mov Melody_Reload+0, #low(A5_KEY)
0E1A C002      1220            push AR2
0E1C 7AF0      1220            mov R2, #240
0E1E 1200B5    1220            lcall ?Wait_Milli_Seconds
0E21 D002      1220            pop AR2
0E23           1221   
0E23 12095B    1222            lcall clear_screen_func
0E26 1208D7    1223       lcall Display_special_char1
0E29           1224   
0E29 754DD6    1225            mov Melody_Reload+1, #high(G5_KEY)
0E2C 754C29    1226            mov Melody_Reload+0, #low(A5_KEY)
0E2F C002      1227            push AR2
0E31 7AF0      1227            mov R2, #240
0E33 1200B5    1227            lcall ?Wait_Milli_Seconds
0E36 D002      1227            pop AR2
0E38           1228            
0E38 754DD4    1229            mov Melody_Reload+1, #high(Fs5_KEY)
0E3B 754C30    1230            mov Melody_Reload+0, #low(Fs5_KEY)
0E3E C002      1231            push AR2
0E40 7AF0      1231            mov R2, #240
0E42 1200B5    1231            lcall ?Wait_Milli_Seconds
0E45 D002      1231            pop AR2
0E47           1232   
0E47 12095B    1233            lcall clear_screen_func
0E4A 120919    1234       lcall Display_special_char2
0E4D           1235   
0E4D 754DCE    1236            mov Melody_Reload+1, #high(E5_KEY)
0E50 754CD7    1237            mov Melody_Reload+0, #low(E5_KEY)
0E53 C002      1238            push AR2
0E55 7AF0      1238            mov R2, #240
0E57 1200B5    1238            lcall ?Wait_Milli_Seconds
0E5A D002      1238            pop AR2
0E5C C002      1239            push AR2
0E5E 7AF0      1239            mov R2, #240
0E60 1200B5    1239            lcall ?Wait_Milli_Seconds
0E63 D002      1239            pop AR2
0E65           1240   
0E65 12095B    1241            lcall clear_screen_func
0E68 1208D7    1242       lcall Display_special_char1
0E6B 020994    1243       ljmp main
0E6E           1244   EN
