                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE))) 
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   EQU P1.2 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 02099B      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204E4      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
002B            114   org 0x002B
002B 020514     115            ljmp Timer2_ISR
002E            116   
002E            117   ;---------------------------------;
002E            118   ; Define any constant string here ;
002E            119   ;---------------------------------;
002E            120   ;                          1234567890123456    <- This helps determine the location of the counter
002E 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
003F 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0050 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
005E 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
006C 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
007A 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
0088 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
0096 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
00A7 484F5400   129   Hot_temp: db 'HOT',0
00AB            130   ;---------------------------------------------
00AB            131   cseg
00AB            132   
00AB            133   LCD_RS equ P1.3
00AB            134   LCD_E  equ P1.4
00AB            135   LCD_D4 equ P0.0
00AB            136   LCD_D5 equ P0.1
00AB            137   LCD_D6 equ P0.2
00AB            138   LCD_D7 equ P0.3
00AB            139   
                141   $LIST
017D            143   
017D            144   ;---------------------------------;
017D            145   ; Define variables here           ;
017D            146   ;---------------------------------;
017D            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03ED            185   
03ED            186   ;---------------------------------;
03ED            187   ; Define special chars here       ;
03ED            188   ;---------------------------------;
03ED            189   fire:
03ED 7440       190            mov   A,#40H         ;Load the location where we want to store
03EF 1200FF     191       lcall ?WriteCommand    ;Send the command
03F2 7409       192       mov   A,#09H         ;Load row 1 data
03F4 1200FA     193       lcall ?WriteData   ;Send the data
03F7 7400       194       mov   A,#00H         ;Load row 2 data
03F9 1200FA     195       lcall ?WriteData   ;Send the data
03FC 7414       196       mov   A,#14H         ;Load row 3 data
03FE 1200FA     197       lcall ?WriteData   ;Send the data
0401 7406       198       mov   A,#06H         ;Load row 4 data
0403 1200FA     199       lcall ?WriteData   ;Send the data
0406 740F       200       mov   A,#0FH         ;Load row 5 data
0408 1200FA     201       lcall ?WriteData   ;Send the data
040B 741B       202       mov   A,#1BH         ;Load row 6 data
040D 1200FA     203       lcall ?WriteData   ;Send the data
0410 7411       204       mov   A,#11H         ;Load row 7 data
0412 11FA       205       acall ?WriteData   ;Send the data
0414 740E       206       mov   A,#0EH         ;Load row 8 data
0416 1200FA     207       lcall ?WriteData   ;Send the data
0419 22         208       ret                  ;Return from routine
041A            209   
041A            210   double_eighth:
041A 7448       211       mov   A,#48H         ;Load the location where we want to store
041C 1200FF     212       lcall ?WriteCommand    ;Send the command
041F 7400       213       mov   A,#00H         ;Load row 1 data
0421 1200FA     214       lcall ?WriteData   ;Send the data
0424 740F       215       mov   A,#0FH         ;Load row 2 data
0426 1200FA     216       lcall ?WriteData   ;Send the data
0429 7409       217       mov   A,#09H         ;Load row 3 data
042B 1200FA     218       lcall ?WriteData   ;Send the data
042E 7409       219       mov   A,#09H         ;Load row 4 data
0430 1200FA     220       lcall ?WriteData   ;Send the data
0433 741B       221       mov   A,#1BH         ;Load row 5 data
0435 1200FA     222       lcall ?WriteData   ;Send the data
0438 741B       223       mov   A,#1BH         ;Load row 6 data
043A 1200FA     224       lcall ?WriteData   ;Send the data
043D 7400       225       mov   A,#00H         ;Load row 7 data
043F 11FA       226       acall ?WriteData   ;Send the data
0441 7400       227       mov   A,#00H         ;Load row 8 data
0443 1200FA     228       lcall ?WriteData   ;Send the data
0446 22         229       ret                  ;Return from routine
0447            230       
0447            231   eighth:
0447 7450       232       mov   A,#50H         ;Load the location where we want to store
0449 1200FF     233       lcall ?WriteCommand    ;Send the command
044C 7404       234       mov   A,#04H         ;Load row 1 data
044E 1200FA     235       lcall ?WriteData   ;Send the data
0451 7406       236       mov   A,#06H         ;Load row 2 data
0453 1200FA     237       lcall ?WriteData   ;Send the data
0456 7405       238       mov   A,#05H         ;Load row 3 data
0458 1200FA     239       lcall ?WriteData   ;Send the data
045B 7404       240       mov   A,#04H         ;Load row 4 data
045D 1200FA     241       lcall ?WriteData   ;Send the data
0460 740C       242       mov   A,#0CH         ;Load row 5 data
0462 1200FA     243       lcall ?WriteData   ;Send the data
0465 7414       244       mov   A,#14H         ;Load row 6 data
0467 1200FA     245       lcall ?WriteData   ;Send the data
046A 7408       246       mov   A,#08H         ;Load row 7 data
046C 11FA       247       acall ?WriteData   ;Send the data
046E 7400       248       mov   A,#00H         ;Load row 8 data
0470 1200FA     249       lcall ?WriteData   ;Send the data
0473 22         250       ret                  ;Return from routine
0474            251   
0474            252   heart:
0474 7458       253       mov   A,#58H         ;Load the location where we want to store
0476 1200FF     254       lcall ?WriteCommand    ;Send the command
0479 7400       255       mov   A,#00H         ;Load row 1 data
047B 1200FA     256       lcall ?WriteData   ;Send the data
047E 740A       257       mov   A,#0AH         ;Load row 2 data
0480 1200FA     258       lcall ?WriteData   ;Send the data
0483 7415       259       mov   A,#15H         ;Load row 3 data
0485 1200FA     260       lcall ?WriteData   ;Send the data
0488 7411       261       mov   A,#11H         ;Load row 4 data
048A 1200FA     262       lcall ?WriteData   ;Send the data
048D 7411       263       mov   A,#11H         ;Load row 5 data
048F 1200FA     264       lcall ?WriteData   ;Send the data
0492 740A       265       mov   A,#0AH         ;Load row 6 data
0494 1200FA     266       lcall ?WriteData   ;Send the data
0497 7404       267       mov   A,#04H         ;Load row 7 data
0499 11FA       268       acall ?WriteData   ;Send the data
049B 7400       269       mov   A,#00H         ;Load row 8 data
049D 1200FA     270       lcall ?WriteData   ;Send the data
04A0 22         271       ret                  ;Return from routine
04A1            272   bell:
04A1 7460       273       mov   A,#60H         ;Load the location where we want to store
04A3 1200FF     274       lcall ?WriteCommand    ;Send the command
04A6 7400       275       mov   A,#00H         ;Load row 1 data
04A8 1200FA     276       lcall ?WriteData   ;Send the data
04AB 7404       277       mov   A,#04H          ;Load row 2 data
04AD 1200FA     278       lcall ?WriteData   ;Send the data
04B0 740E       279       mov   A,#0eH          ;Load row 3 data
04B2 1200FA     280       lcall ?WriteData   ;Send the data
04B5 740E       281       mov   A,#0eH         ;Load row 4 data
04B7 1200FA     282       lcall ?WriteData   ;Send the data
04BA 740E       283       mov   A,#0eH         ;Load row 5 data
04BC 1200FA     284       lcall ?WriteData   ;Send the data
04BF 741F       285       mov   A,#1fH         ;Load row 6 data
04C1 1200FA     286       lcall ?WriteData   ;Send the data
04C4 7400       287       mov   A,#00H         ;Load row 7 data
04C6 11FA       288       acall ?WriteData   ;Send the data
04C8 7404       289       mov   A,#04H         ;Load row 8 data
04CA 1200FA     290       lcall ?WriteData   ;Send the data
04CD 22         291       ret                  ;Return from routine
04CE            292   
04CE            293   ;---------------------------------;
04CE            294   ; Routine to initialize the ISR   ;
04CE            295   ; for timer 0                     ;
04CE            296   ;---------------------------------;
04CE            297   Timer0_Init:
04CE 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04D1 E589       299            mov a, TMOD
04D3 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04D5 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04D7 F589       302            mov TMOD, a
04D9 758CF0     303            mov TH0, #high(TIMER0_RELOAD)
04DC 758A2C     304            mov TL0, #low(TIMER0_RELOAD)
04DF            305            ; Enable the timer and interrupts
04DF D2A9       306       setb ET0  ; Enable timer 0 interrupt
04E1 D28C       307       setb TR0  ; Start timer 0
04E3 22         308            ret
04E4            309   
04E4            310   ;---------------------------------;
04E4            311   ; ISR for timer 0.  Set to execute;
04E4            312   ; every 1/4096Hz to generate a    ;
04E4            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04E4            314   ;---------------------------------;
04E4            315   Timer0_ISR:
04E4            316            ;clr TF0  ; According to the data sheet this is done for us already.
04E4            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04E4 C28C       318            clr TR0
04E6 854D8C     319            mov TH0, Melody_Reload+1
04E9 854C8A     320            mov TL0, Melody_Reload+0
04EC D28C       321            setb TR0
04EE B292       322            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04F0 32         323            reti
04F1            324   
04F1            325   ;---------------------------------;
04F1            326   ; Routine to initialize the ISR   ;
04F1            327   ; for timer 2                     ;
04F1            328   ;---------------------------------;
04F1            329   Timer2_Init:
04F1 75C800     330            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04F4 75CDD7     331            mov TH2, #high(TIMER2_RELOAD)
04F7 75CC79     332            mov TL2, #low(TIMER2_RELOAD)
04FA            333            ; Set the reload value
04FA 75C9A0     334            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04FD 75CBD7     335            mov RCMP2H, #high(TIMER2_RELOAD)
0500 75CA79     336            mov RCMP2L, #low(TIMER2_RELOAD)
0503            337            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0503 E4         338            clr a
0504 F53D       339            mov Count1ms+0, a
0506 F53E       340            mov Count1ms+1, a
0508 754700     341            mov pwm, #0
050B            342            ; Enable the timer and interrupts
050B 754600     343            mov pwm_counter,#0
050E 439B80     344            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0511 D2CA       345       setb TR2  ; Enable timer 2
0513 22         346            ret
0514            347   
0514            348   ;---------------------------------;
0514            349   ; ISR for timer 2 ;
0514            350   ;---------------------------------;
0514            351   Timer2_ISR:
0514 C2CF       352            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0516 B284       353            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0518            354                    
0518            355            ; The two registers used in the ISR must be saved in the stack
0518 C0D0       356            push psw
051A C0E0       357            push acc
051C 0546       358            inc pwm_counter
051E C3         359            clr c
051F E547       360            mov a, pwm
0521 9546       361            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0523 B3         362            cpl c
0524 9290       363            mov PWM_OUT, c
0526 E546       364            mov a, pwm_counter
0528            365   
0528 B46407     366            cjne a, #100, Timer2_ISR_done
052B 754600     367            mov pwm_counter, #0
052E 053F       368            inc seconds
0530 D201       369            setb s_flag
0532            370            
0532            371   Timer2_ISR_done:
0532            372   
0532 D0E0       373            pop acc
0534 D0D0       374            pop psw
0536 32         375            reti
0537            376   
0537            377   
0537            378   ;---------------------------------;
0537            379   ; Temperature senseor function    ;
0537            380   ;---------------------------------;
0537            381   Init_All:
0537            382            ; Configure all the pins for biderectional I/O
0537 75AC00     383            mov     P3M1, #0x00
053A 75AD00     384            mov     P3M2, #0x00
053D 75B300     385            mov     P1M1, #0x00
0540 75B400     386            mov     P1M2, #0x00
0543 75B100     387            mov     P0M1, #0x00
0546 75B200     388            mov     P0M2, #0x00
0549            389            
0549 438E10     390            orl     CKCON, #0x10 ; CLK is the input for timer 1
054C 438780     391            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
054F 759852     392            mov     SCON, #0x52
0552 53C4DF     393            anl     T3CON, #0b11011111
0555 53890F     394            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0558 438920     395            orl     TMOD, #0x20 ; Timer 1 Mode 2
055B 758DF7     396            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
055E D28E       397            setb TR1
0560            398            ; Using timer 0 for delay functions.  Initialize here:
0560            399            ;clr    TR0 ; Stop timer 0
0560 438E08     400            orl     CKCON,#0x08 ; CLK is the input for timer 0
0563 5389F0     401            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0566 438901     402            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0569            403            
0569            404            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0569 43B382     405            orl     P1M1, #0b10000010
056C 53B47D     406            anl     P1M2, #0b01111101
056F            407            
056F            408            ; Initialize and start the ADC:
056F 53E8F0     409            anl ADCCON0, #0xF0
0572 43E807     410            orl ADCCON0, #0x07 ; Select channel 7
0575            411            ; AINDIDS select if some pins are analog inputs or digital I/O:
0575 75F600     412            mov AINDIDS, #0x00 ; Disable all analog inputs
0578 43F681     413            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
057B 43E101     414            orl ADCCON1, #0x01 ; Enable ADC
057E            415            
057E 22         416            ret
057F            417   
057F            418   ;---------------------------------;
057F            419   ;         5_pushbuttons function               ;
057F            420   ;---------------------------------;
057F            421   LCD_PB:
057F            422            ; Set variables to 1: 'no push button pressed'
057F D202       423            setb PB0
0581 D203       424            setb PB1
0583 D204       425            setb PB2
0585 D205       426            setb PB3
0587 D206       427            setb PB4
0589            428            ; The input pin used to check set to '1'
0589 D295       429            setb P1.5
058B            430            
058B            431            ; Check if any push button is pressed
058B C280       432            clr P0.0
058D C281       433            clr P0.1
058F C282       434            clr P0.2
0591 C283       435            clr P0.3
0593 C293       436            clr P1.3
0595 20954D     437            jb P1.5, LCD_PB_Done
0598            438   
0598            439            ; Debounce
0598 C002       440            push AR2
059A 7A32       440            mov R2, #50
059C 1200B5     440            lcall ?Wait_Milli_Seconds
059F D002       440            pop AR2
05A1 209541     441            jb P1.5, LCD_PB_Done
05A4            442   
05A4            443            ; Set the LCD data pins to logic 1
05A4 D280       444            setb P0.0
05A6 D281       445            setb P0.1
05A8 D282       446            setb P0.2
05AA D283       447            setb P0.3
05AC D293       448            setb P1.3
05AE            449            
05AE            450            ; Check the push buttons one by one
05AE C293       451            clr P1.3
05B0 A295       452            mov c, P1.5
05B2 9206       453            mov PB4, c
05B4 D293       454            setb P1.3
05B6 300636     455            jnb PB4,increment_soak_temp
05B9            456   
05B9 C280       457            clr P0.0
05BB A295       458            mov c, P1.5
05BD 9205       459            mov PB3, c
05BF D280       460            setb P0.0
05C1 300537     461            jnb PB3, increment_soak_time
05C4            462            
05C4 C281       463            clr P0.1
05C6 A295       464            mov c, P1.5
05C8 9204       465            mov PB2, c
05CA D281       466            setb P0.1
05CC 300438     467            jnb PB2, increment_reflow_temp
05CF            468            
05CF C282       469            clr P0.2
05D1 A295       470            mov c, P1.5
05D3 9203       471            mov PB1, c
05D5 D282       472            setb P0.2
05D7 300339     473            jnb PB1, increment_reflow_time
05DA            474            
05DA C283       475            clr P0.3
05DC A295       476            mov c, P1.5
05DE 9202       477            mov PB0, c
05E0 D283       478            setb P0.3
05E2 30023A     479            jnb PB0, start_stop
05E5            480   
05E5            481   LCD_PB_Done:
05E5 C002       482            push AR2
05E7 7A19       482            mov R2, #25
05E9 1200B5     482            lcall ?Wait_Milli_Seconds
05EC D002       482            pop AR2                 
05EE 22         483            ret
05EF            484   
05EF            485   increment_soak_temp:
05EF 0545       486            inc soak_temp
05F1 E545       487            mov a, soak_temp
05F3 B4F0EF     488            cjne a, #0xF0, LCD_PB_Done
05F6 754500     489            mov soak_temp, #0x00
05F9 80EA       490            sjmp LCD_PB_Done
05FB            491   increment_soak_time:
05FB 0544       492            inc soak_time
05FD E544       493            mov a, soak_time
05FF B478E3     494            cjne a, #0x78, LCD_PB_Done
0602 754400     495            mov soak_time, #0x00
0605 80DE       496            sjmp LCD_PB_Done
0607            497   increment_reflow_temp: 
0607 0543       498            inc reflow_temp
0609 E543       499            mov a, reflow_temp
060B B4F0D7     500            cjne a, #0xF0, LCD_PB_Done
060E 754300     501            mov reflow_temp, #0x00
0611 80D2       502            sjmp LCD_PB_Done
0613            503   increment_reflow_time:
0613 0542       504            inc reflow_time
0615 E542       505            mov a, reflow_time
0617 B44BCB     506            cjne a, #0x4B, LCD_PB_Done
061A 754200     507            mov reflow_time, #0x00
061D 80C6       508            sjmp LCD_PB_Done
061F            509   
061F            510   start_stop:
061F B208       511            cpl start_stop_flag
0621 80C2       512            sjmp LCD_PB_Done
0623            513   
0623            514   ; We can display a number any way we want.  In this case with
0623            515   ; four decimal places.
0623            516   Display_formated_BCD:
0623 C0E0       517            push acc
0625 7404       517            mov a, #4
0627 14         517            dec a
0628 120144     517            lcall ?Set_Cursor_1 ; Select column and row
062B D0E0       517            pop acc ; display To
062D C000       518            push ar0
062F A83B       518            mov r0, bcd+3
0631 120149     518            lcall ?Display_BCD
0634 D000       518            pop ar0
0636 C000       519            push ar0
0638 A83A       519            mov r0, bcd+2
063A 120149     519            lcall ?Display_BCD
063D D000       519            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
063F            520            
063F            521            ;send the BCD value to the MATLAB script
063F C000       522            push ar0
0641 A83B       522            mov r0, bcd+3
0643 120167     522            lcall ?Send_BCD
0646 D000       522            pop ar0
0648 C000       523            push ar0
064A A83A       523            mov r0, bcd+2
064C 120167     523            lcall ?Send_BCD
064F D000       523            pop ar0
0651 C000       524            push ar0
0653 A839       524            mov r0, bcd+1
0655 120167     524            lcall ?Send_BCD
0658 D000       524            pop ar0
065A C000       525            push ar0
065C A838       525            mov r0, bcd+0
065E 120167     525            lcall ?Send_BCD
0661 D000       525            pop ar0
0663 740D       526            mov a, #'\r'
0665 12015F     527            lcall putchar
0668 740A       528            mov a, #'\n'
066A 12015F     529            lcall putchar
066D            530            ;Set_Cursor(1, 13)
066D            531            ;Send_Constant_String(#22) ; display Tj=22
066D            532            
066D C0E0       533            push acc
066F 740E       533            mov a, #14
0671 14         533            dec a
0672 120142     533            lcall ?Set_Cursor_2 ; Select column and row
0675 D0E0       533            pop acc
0677 E53F       534            mov a,seconds
0679 12067D     535            lcall SendToLCD
067C            536            
067C 22         537            ret
067D            538   
067D            539   SendToLCD:
067D 75F064     540            mov b, #100
0680 84         541            div ab
0681 4430       542            orl a, #0x30 ; Convert hundreds to ASCII
0683 1200FA     543            lcall ?WriteData ; Send to LCD
0686 E5F0       544            mov a, b ; Remainder is in register b
0688 75F00A     545            mov b, #10
068B 84         546            div ab
068C 4430       547            orl a, #0x30 ; Convert tens to ASCII
068E 1200FA     548            lcall ?WriteData; Send to LCD
0691 E5F0       549            mov a, b
0693 4430       550            orl a, #0x30 ; Convert units to ASCII
0695 1200FA     551            lcall ?WriteData; Send to LCD
0698 22         552            ret
0699            553   
0699            554   ;-------------------------------------------------;
0699            555   ; Display values from the pushbutton to the LCD   ;
0699            556   ;-------------------------------------------------;
0699            557   
0699            558   Display_PushButtons_LCD:
0699 C0E0       559            push acc
069B 7402       559            mov a, #2
069D 14         559            dec a
069E 120142     559            lcall ?Set_Cursor_2 ; Select column and row
06A1 D0E0       559            pop acc
06A3 E545       560            mov a, soak_temp
06A5 12067D     561            lcall SendToLCD
06A8            562            
06A8 C0E0       563            push acc
06AA 7406       563            mov a, #6
06AC 14         563            dec a
06AD 120142     563            lcall ?Set_Cursor_2 ; Select column and row
06B0 D0E0       563            pop acc
06B2 E544       564            mov a, soak_time
06B4 12067D     565            lcall SendToLCD
06B7            566       
06B7 C0E0       567            push acc
06B9 740A       567            mov a, #10
06BB 14         567            dec a
06BC 120142     567            lcall ?Set_Cursor_2 ; Select column and row
06BF D0E0       567            pop acc
06C1 E543       568       mov a, reflow_temp
06C3 12067D     569            lcall SendToLCD
06C6            570       
06C6 C0E0       571            push acc
06C8 740E       571            mov a, #14
06CA 14         571            dec a
06CB 120142     571            lcall ?Set_Cursor_2 ; Select column and row
06CE D0E0       571            pop acc
06D0 E542       572       mov a, reflow_time
06D2 12067D     573            lcall SendToLCD
06D5            574            
06D5 22         575            ret
06D6            576   
06D6            577   
06D6            578   ;-------------------------------------------------;
06D6            579   ; Display all values and temperatures to the LCD  ;
06D6            580   ;-------------------------------------------------;
06D6            581   Display_Data:
06D6 C2EF       582            clr ADCF
06D8 D2EE       583            setb ADCS ;  ADC start trigger signal
06DA 30EFFD     584       jnb ADCF, $ ; Wait for conversion complete
06DD            585       
06DD            586       ; Read the ADC result and store in [R1, R0]
06DD E5C3       587       mov a, ADCRH   
06DF C4         588       swap a
06E0 C0E0       589       push acc
06E2 540F       590       anl a, #0x0f
06E4 F9         591       mov R1, a
06E5 D0E0       592       pop acc
06E7 54F0       593       anl a, #0xf0
06E9 45C2       594       orl a, ADCRL
06EB F8         595       mov R0, A
06EC            596       
06EC            597       ; Convert to voltage
06EC 8830       598            mov x+0, R0
06EE 8931       599            mov x+1, R1
06F0            600            ; Pad other bits with zero
06F0 753200     601            mov x+2, #0
06F3 753300     602            mov x+3, #0
06F6            603            
06F6            604            ;lcall div32 ; Get V_out
06F6            605            ; ; Calculate Temp based on V_out
06F6            606            ; Load_y(27300) ; The reference temp K
06F6            607            ; lcall sub32 ; Get Temp*0.01
06F6            608            ; ; Change Temp*0.01 to Temp
06F6            609            ; Load_y(100)
06F6            610            ; lcall mul32
06F6            611   
06F6 75347C     612            mov y+0, #low (50300 % 0x10000) 
06F9 7535C4     612            mov y+1, #high(50300 % 0x10000) 
06FC 753600     612            mov y+2, #low (50300 / 0x10000) 
06FF 753700     612            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
0702 1202F7     613            lcall mul32 ;multiplying ADC * Vref
0705 7534FF     614            mov y+0, #low (4095 % 0x10000) 
0708 75350F     614            mov y+1, #high(4095 % 0x10000) 
070B 753600     614            mov y+2, #low (4095 / 0x10000) 
070E 753700     614            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0711 120384     615            lcall div32 ;now doing (ADC*Vref)/(4095)
0714            616            
0714 7534E8     617            mov y+0, #low (1000 % 0x10000) 
0717 753503     617            mov y+1, #high(1000 % 0x10000) 
071A 753600     617            mov y+2, #low (1000 / 0x10000) 
071D 753700     617            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
0720 1202F7     618            lcall mul32 ;multiplying volts
0723            619            
0723 75340A     620            mov y+0, #low (10 % 0x10000) 
0726 753500     620            mov y+1, #high(10 % 0x10000) 
0729 753600     620            mov y+2, #low (10 / 0x10000) 
072C 753700     620            mov y+3, #high(10 / 0x10000) 
072F 1202F7     621            lcall mul32
0732            622            
0732            623            ;convert to temperature
0732 7534D0     624            mov y+0, #low (21200 % 0x10000) 
0735 753552     624            mov y+1, #high(21200 % 0x10000) 
0738 753600     624            mov y+2, #low (21200 / 0x10000) 
073B 753700     624            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
073E 120384     625            lcall div32 
0741 753429     626            mov y+0, #low (41 % 0x10000) 
0744 753500     626            mov y+1, #high(41 % 0x10000) 
0747 753600     626            mov y+2, #low (41 / 0x10000) 
074A 753700     626            mov y+3, #high(41 / 0x10000) ;load y = 41
074D 120384     627            lcall div32 ;divide by 41
0750            628            
0750 753410     629            mov y+0, #low (10000 % 0x10000) 
0753 753527     629            mov y+1, #high(10000 % 0x10000) 
0756 753600     629            mov y+2, #low (10000 / 0x10000) 
0759 753700     629            mov y+3, #high(10000 / 0x10000) 
075C 1202F7     630            lcall mul32
075F            631            
075F 753460     632            mov y+0, #low (220000 % 0x10000) 
0762 75355B     632            mov y+1, #high(220000 % 0x10000) 
0765 753603     632            mov y+2, #low (220000 / 0x10000) 
0768 753700     632            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
076B 120242     633            lcall add32
076E            634            
076E 7534A0     635            mov y+0, #low (2500000 % 0x10000) 
0771 753525     635            mov y+1, #high(2500000 % 0x10000) 
0774 753626     635            mov y+2, #low (2500000 / 0x10000) 
0777 753700     635            mov y+3, #high(2500000 / 0x10000) 
077A 1202E3     636            lcall x_gteq_y
077D            637   
077D 20001A     638            jb mf, too_fucking_hot
0780            639   
0780            640   ; Convert to BCD and display
0780 12017D     641            lcall hex2bcd
0783 120623     642            lcall Display_formated_BCD
0786 22         643            ret
0787            644   returned:
0787 12017D     645            lcall hex2bcd
078A C0E0       646            push acc
078C 740E       646            mov a, #14
078E 14         646            dec a
078F 120142     646            lcall ?Set_Cursor_2 ; Select column and row
0792 D0E0       646            pop acc
0794 E53F       647            mov a,seconds
0796 12067D     648            lcall SendToLCD
0799            649   
0799 22         650            ret
079A            651            
079A            652   too_fucking_hot:
079A C0E0       653            push acc
079C 7404       653            mov a, #4
079E 14         653            dec a
079F 120144     653            lcall ?Set_Cursor_1 ; Select column and row
07A2 D0E0       653            pop acc
07A4 C083       654            push dph
07A6 C082       654            push dpl
07A8 C0E0       654            push acc
07AA 9000A7     654            mov dptr, #Hot_temp
07AD 120137     654            lcall ?Send_Constant_String
07B0 D0E0       654            pop acc
07B2 D082       654            pop dpl
07B4 D083       654            pop dph
07B6 1203ED     655            lcall fire
07B9 7486       656            mov a, #0x86
07BB 1200FF     657            lcall ?WriteCommand
07BE 7400       658            mov a, #0H
07C0 1200FA     659            lcall ?WriteData
07C3            660            
07C3 80C2       661            sjmp returned
07C5            662   
07C5            663   ;-----------------------------------------------------------------------------;
07C5            664   ;Grabs the value in register a and then compares it to the current temperature;
07C5            665   ;-----------------------------------------------------------------------------;
07C5            666   
07C5            667   Display_temp:
07C5 C2EF       668            clr ADCF
07C7 D2EE       669            setb ADCS ;  ADC start trigger signal
07C9 30EFFD     670       jnb ADCF, $ ; Wait for conversion complete
07CC            671       
07CC            672       ; Read the ADC result and store in [R1, R0]
07CC E5C3       673       mov a, ADCRH   
07CE C4         674       swap a
07CF C0E0       675       push acc
07D1 540F       676       anl a, #0x0f
07D3 F9         677       mov R1, a
07D4 D0E0       678       pop acc
07D6 54F0       679       anl a, #0xf0
07D8 45C2       680       orl a, ADCRL
07DA F8         681       mov R0, A
07DB            682       
07DB            683       ; Convert to voltage
07DB 8830       684            mov x+0, R0
07DD 8931       685            mov x+1, R1
07DF            686            ; Pad other bits with zero
07DF 753200     687            mov x+2, #0
07E2 753300     688            mov x+3, #0
07E5            689            
07E5            690            ;lcall div32 ; Get V_out
07E5            691            ; ; Calculate Temp based on V_out
07E5            692            ; Load_y(27300) ; The reference temp K
07E5            693            ; lcall sub32 ; Get Temp*0.01
07E5            694            ; ; Change Temp*0.01 to Temp
07E5            695            ; Load_y(100)
07E5            696            ; lcall mul32
07E5            697   
07E5 75347C     698            mov y+0, #low (50300 % 0x10000) 
07E8 7535C4     698            mov y+1, #high(50300 % 0x10000) 
07EB 753600     698            mov y+2, #low (50300 / 0x10000) 
07EE 753700     698            mov y+3, #high(50300 / 0x10000)  ; VCC voltage measured (equals 4.99V)
07F1 1202F7     699            lcall mul32 ;multiplying ADC * Vref
07F4 7534FF     700            mov y+0, #low (4095 % 0x10000) 
07F7 75350F     700            mov y+1, #high(4095 % 0x10000) 
07FA 753600     700            mov y+2, #low (4095 / 0x10000) 
07FD 753700     700            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
0800 120384     701            lcall div32 ;now doing (ADC*Vref)/(4095)
0803            702            
0803 7534E8     703            mov y+0, #low (1000 % 0x10000) 
0806 753503     703            mov y+1, #high(1000 % 0x10000) 
0809 753600     703            mov y+2, #low (1000 / 0x10000) 
080C 753700     703            mov y+3, #high(1000 / 0x10000)  ; for converting volt to microvolt
080F 1202F7     704            lcall mul32 ;multiplying volts
0812            705            
0812 75340A     706            mov y+0, #low (10 % 0x10000) 
0815 753500     706            mov y+1, #high(10 % 0x10000) 
0818 753600     706            mov y+2, #low (10 / 0x10000) 
081B 753700     706            mov y+3, #high(10 / 0x10000) 
081E 1202F7     707            lcall mul32
0821            708            
0821            709            ;convert to temperature
0821 7534D0     710            mov y+0, #low (21200 % 0x10000) 
0824 753552     710            mov y+1, #high(21200 % 0x10000) 
0827 753600     710            mov y+2, #low (21200 / 0x10000) 
082A 753700     710            mov y+3, #high(21200 / 0x10000)  ;divide by the gain 
082D 120384     711            lcall div32 
0830 753429     712            mov y+0, #low (41 % 0x10000) 
0833 753500     712            mov y+1, #high(41 % 0x10000) 
0836 753600     712            mov y+2, #low (41 / 0x10000) 
0839 753700     712            mov y+3, #high(41 / 0x10000) ;load y = 41
083C 120384     713            lcall div32 ;divide by 41
083F            714            
083F 753410     715            mov y+0, #low (10000 % 0x10000) 
0842 753527     715            mov y+1, #high(10000 % 0x10000) 
0845 753600     715            mov y+2, #low (10000 / 0x10000) 
0848 753700     715            mov y+3, #high(10000 / 0x10000) 
084B 1202F7     716            lcall mul32
084E            717            
084E 753460     718            mov y+0, #low (220000 % 0x10000) 
0851 75355B     718            mov y+1, #high(220000 % 0x10000) 
0854 753603     718            mov y+2, #low (220000 / 0x10000) 
0857 753700     718            mov y+3, #high(220000 / 0x10000)  ;cold junction 19 deg C
085A 120242     719            lcall add32
085D            720   
085D            721   ; Convert to BCD and display
085D 12017D     722            lcall hex2bcd
0860 120864     723            lcall Display_temperature
0863            724            
0863 22         725            ret
0864            726   
0864            727   Display_temperature:
0864 C0E0       728            push acc
0866 7404       728            mov a, #4
0868 14         728            dec a
0869 120144     728            lcall ?Set_Cursor_1 ; Select column and row
086C D0E0       728            pop acc ; display To
086E C000       729            push ar0
0870 A83B       729            mov r0, bcd+3
0872 120149     729            lcall ?Display_BCD
0875 D000       729            pop ar0
0877 C000       730            push ar0
0879 A83A       730            mov r0, bcd+2
087B 120149     730            lcall ?Display_BCD
087E D000       730            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
0880 22         731            ret
0881            732   
0881            733   Compare_temp:
0881 853A48     734            mov temp+0, bcd+2
0884 853B49     735            mov temp+1, bcd+3
0887 854838     736            mov bcd+0, temp+0
088A 854939     737            mov bcd+1, temp+1
088D 753A00     738            mov bcd+2,#0
0890 753B00     739            mov bcd+3,#0
0893 753C00     740            mov bcd+4,#0
0896            741            
0896 120206     742            lcall bcd2hex
0899            743            
0899 853034     744            mov y+0,x+0
089C 853135     745            mov y+1,x+1
089F 853236     746            mov y+2,x+2
08A2 853337     747            mov y+3,x+3
08A5            748            
08A5 F530       749            mov x+0,a
08A7 753100     750            mov x+1,#0
08AA 753200     751            mov x+2,#0
08AD 753300     752            mov x+3,#0
08B0            753            
08B0 12017D     754            lcall hex2bcd
08B3 1202ED     755            lcall x_lteq_y
08B6            756   
08B6 22         757            ret
08B7            758   
08B7            759   check_stop:
08B7 D206       760            setb PB4
08B9            761            ; The input pin used to check set to '1'
08B9 D295       762            setb P1.5
08BB C283       763            clr P0.3
08BD 209519     764            jb P1.5, stop_PB_Done
08C0            765            ; Debounce
08C0 C002       766            push AR2
08C2 7A32       766            mov R2, #50
08C4 1200B5     766            lcall ?Wait_Milli_Seconds
08C7 D002       766            pop AR2
08C9 20950D     767            jb P1.5, stop_PB_Done
08CC D283       768            setb P0.3
08CE C283       769            clr P0.3
08D0 A295       770            mov c, P1.5
08D2 9202       771            mov PB0, c
08D4 D283       772            setb P0.3
08D6 300201     773            jnb PB0, start_stop_timer
08D9            774   
08D9            775   stop_PB_Done:
08D9 22         776            ret
08DA            777   start_stop_timer:
08DA B208       778            cpl start_stop_flag
08DC 80FB       779            sjmp stop_PB_Done
08DE            780   
08DE            781   
08DE            782   Display_special_char1:
08DE 120474     783            lcall heart
08E1 7481       784            mov a, #0x81
08E3 1200FF     785            lcall ?WriteCommand
08E6 7403       786            mov a, #3H
08E8 1200FA     787            lcall ?WriteData
08EB            788   
08EB 120447     789            lcall eighth
08EE 74C4       790            mov a, #0xC4
08F0 1200FF     791            lcall ?WriteCommand
08F3 7402       792            mov a, #2H
08F5 1200FA     793            lcall ?WriteData
08F8            794   
08F8 1204A1     795            lcall bell
08FB 7487       796            mov a, #0x87
08FD 1200FF     797            lcall ?WriteCommand
0900 7404       798            mov a, #4H
0902 1200FA     799            lcall ?WriteData
0905            800   
0905 12041A     801            lcall double_eighth
0908 74CA       802            mov a, #0xCA
090A 1200FF     803            lcall ?WriteCommand
090D 7401       804            mov a, #1H
090F 1200FA     805            lcall ?WriteData
0912            806   
0912 120474     807            lcall heart
0915 748D       808            mov a, #0x8D
0917 1200FF     809            lcall ?WriteCommand
091A 7403       810            mov a, #3H
091C 1200FA     811            lcall ?WriteData
091F 32         812            reti
0920            813            
0920            814   Display_special_char2:
0920 120474     815            lcall heart
0923 74C0       816            mov a, #0xC0
0925 1200FF     817            lcall ?WriteCommand
0928 7403       818            mov a, #3H
092A 1200FA     819            lcall ?WriteData
092D            820   
092D 120447     821            lcall eighth
0930 7483       822            mov a, #0x83
0932 1200FF     823            lcall ?WriteCommand
0935 7402       824            mov a, #2H
0937 1200FA     825            lcall ?WriteData
093A            826   
093A 1204A1     827            lcall bell
093D 74C7       828            mov a, #0xC7
093F 1200FF     829            lcall ?WriteCommand
0942 7404       830            mov a, #4H
0944 1200FA     831            lcall ?WriteData
0947            832   
0947 12041A     833            lcall double_eighth
094A 748B       834            mov a, #0x8B
094C 1200FF     835            lcall ?WriteCommand
094F 7401       836            mov a, #1H
0951 1200FA     837            lcall ?WriteData
0954            838   
0954 120474     839            lcall heart
0957 74CE       840            mov a, #0xCE
0959 1200FF     841            lcall ?WriteCommand
095C 7403       842            mov a, #3H
095E 1200FA     843            lcall ?WriteData
0961 32         844            reti
0962            845   
0962            846   clear_screen_func:
0962            847       
0962 C0E0       848            push acc
0964 7401       848            mov a, #1
0966 14         848            dec a
0967 120144     848            lcall ?Set_Cursor_1 ; Select column and row
096A D0E0       848            pop acc
096C C083       849            push dph
096E C082       849            push dpl
0970 C0E0       849            push acc
0972 900096     849            mov dptr, #clear_screen
0975 120137     849            lcall ?Send_Constant_String
0978 D0E0       849            pop acc
097A D082       849            pop dpl
097C D083       849            pop dph
097E C0E0       850            push acc
0980 7401       850            mov a, #1
0982 14         850            dec a
0983 120142     850            lcall ?Set_Cursor_2 ; Select column and row
0986 D0E0       850            pop acc
0988 C083       851            push dph
098A C082       851            push dpl
098C C0E0       851            push acc
098E 900096     851            mov dptr, #clear_screen
0991 120137     851            lcall ?Send_Constant_String
0994 D0E0       851            pop acc
0996 D082       851            pop dpl
0998 D083       851            pop dph
099A 32         852       reti
099B            853       
099B            854   main:
099B 75817F     855            mov sp, #0x7f
099E 75B100     856       mov P0M1, #0x00
09A1 75B200     857       mov P0M2, #0x00
09A4 75B300     858       mov P1M1, #0x00
09A7 75B400     859       mov P1M2, #0x00
09AA 75AD00     860       mov P3M2, #0x00
09AD 75AD00     861       mov P3M2, #0x00
09B0            862       
09B0 120537     863            lcall Init_All
09B3 120104     864       lcall LCD_4BIT
09B6 1204CE     865            lcall Timer0_Init
09B9 1204F1     866       lcall Timer2_Init
09BC            867            
09BC D2AF       868       setb EA   ; Enable Global interrupts
09BE            869       ; initial messages in LCD
09BE C0E0       870            push acc
09C0 7401       870            mov a, #1
09C2 14         870            dec a
09C3 120144     870            lcall ?Set_Cursor_1 ; Select column and row
09C6 D0E0       870            pop acc
09C8 C083       871            push dph
09CA C082       871            push dpl
09CC C0E0       871            push acc
09CE 90002E     871            mov dptr, #To_Message
09D1 120137     871            lcall ?Send_Constant_String
09D4 D0E0       871            pop acc
09D6 D082       871            pop dpl
09D8 D083       871            pop dph
09DA C0E0       872            push acc
09DC 7401       872            mov a, #1
09DE 14         872            dec a
09DF 120142     872            lcall ?Set_Cursor_2 ; Select column and row
09E2 D0E0       872            pop acc
09E4 C083       873            push dph
09E6 C082       873            push dpl
09E8 C0E0       873            push acc
09EA 90003F     873            mov dptr, #Time_temp_display
09ED 120137     873            lcall ?Send_Constant_String
09F0 D0E0       873            pop acc
09F2 D082       873            pop dpl
09F4 D083       873            pop dph
09F6 754B00     874       mov FSM_state,#0
09F9 753F00     875            mov seconds, #0x00
09FC 75458C     876            mov soak_temp, #0x8C ;140
09FF 75443C     877            mov soak_time, #0x3C ; 60
0A02 7543E6     878            mov reflow_temp, #0xE6 ; 230
0A05 75421E     879            mov reflow_time, #0x1E ; 30
0A08            880            
0A08 D2CA       881            setb TR2
0A0A            882            
0A0A C208       883            clr start_stop_flag
0A0C C28C       884       clr TR0
0A0E            885   ;---------------------------------;
0A0E            886   ;                FSM     funtion                               ;
0A0E            887   ;---------------------------------;
0A0E            888   FSM:
0A0E E54B       889       mov a, FSM_state
0A10            890   FSM_state0: ;initial state
0A10 B40051     891       cjne a, #0, FSM_state1
0A13 754700     892       mov pwm, #0 ; power variable
0A16 12057F     893            lcall LCD_PB ; calls and checks the pushbuttons
0A19 120699     894            lcall Display_PushButtons_LCD ;Displays values in pushbuttons
0A1C 20080B     895       jb start_stop_flag, start_timer
0A1F 30016C     896            jnb s_flag, FSM_state1_done
0A22 C201       897            clr s_flag
0A24 1207C5     898            lcall Display_temp
0A27            899   FSM_state0_done:
0A27 020A0E     900       ljmp FSM   ;jump back to FSM and reload FSM_state to a
0A2A            901   start_timer:
0A2A 753F00     902       mov seconds, #0x00     ; set time to 0
0A2D 754B01     903       mov FSM_state, #1   ; set FSM_state to 1, next state is state1
0A30 C0E0       904            push acc
0A32 7401       904            mov a, #1
0A34 14         904            dec a
0A35 120142     904            lcall ?Set_Cursor_2 ; Select column and row
0A38 D0E0       904            pop acc
0A3A C083       905            push dph
0A3C C082       905            push dpl
0A3E C0E0       905            push acc
0A40 900050     905            mov dptr, #Ramp_to_soak
0A43 120137     905            lcall ?Send_Constant_String
0A46 D0E0       905            pop acc
0A48 D082       905            pop dpl
0A4A D083       905            pop dph
0A4C D28C       906            setb TR0
0A4E C002       907            push AR2
0A50 7AFA       907            mov R2, #250
0A52 1200B5     907            lcall ?Wait_Milli_Seconds
0A55 D002       907            pop AR2
0A57 C002       908            push AR2
0A59 7AFA       908            mov R2, #250
0A5B 1200B5     908            lcall ?Wait_Milli_Seconds
0A5E D002       908            pop AR2
0A60 C28C       909            clr TR0
0A62 80C3       910            sjmp FSM_state0_done
0A64            911   
0A64            912   
0A64            913   
0A64            914   FSM_state1: ;ramp to soak
0A64 B4014D     915       cjne a, #1, FSM_state2
0A67 754764     916       mov pwm, #100
0A6A C3         917       clr c
0A6B 1208B7     918            lcall check_stop
0A6E 300834     919       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0A71 743C       920       mov a, #0x3C
0A73 953F       921       subb a, seconds
0A75 401A       922       jc abort
0A77            923   continue:
0A77 C3         924       clr c   ; ! i don't know what is c
0A78 300113     925            jnb s_flag, FSM_state1_done
0A7B C201       926            clr s_flag
0A7D 1206D6     927            lcall Display_Data
0A80 E545       928            mov a, soak_temp    ; set a to soak temp
0A82 120881     929            lcall Compare_temp
0A85 300006     930       jnb mf, FSM_state1_done
0A88 753F00     931       mov seconds, #0x00     ; set time to 0
0A8B 754B02     932       mov FSM_state, #2
0A8E            933   FSM_state1_done:
0A8E 020A0E     934       ljmp FSM
0A91            935   abort:
0A91 7432       936       mov a, #0x32  ; set a to 50 degree
0A93 3001F8     937            jnb s_flag, FSM_state1_done
0A96 1206D6     938            lcall Display_Data
0A99 120881     939            lcall Compare_temp
0A9C 2000D8     940            jb mf, continue ; if temp is larger then 50 degree, go back to continue
0A9F 754B00     941       mov FSM_state, #0   ; abort the FSM
0AA2 02099B     942            ljmp main
0AA5            943   
0AA5            944   stop_state:
0AA5 C2CA       945       clr TR2
0AA7 300805     946       jnb start_stop_flag, stop
0AAA D2CA       947            setb TR2
0AAC 020A0E     948            ljmp FSM
0AAF            949   
0AAF            950   stop:
0AAF 1208B7     951            lcall check_stop
0AB2 80F1       952       sjmp stop_state
0AB4            953   
0AB4            954   FSM_state2: ;preheat/soak
0AB4 B4023D     955       cjne a, #2, FSM_state3
0AB7 754714     956       mov pwm, #20
0ABA C0E0       957            push acc
0ABC 7401       957            mov a, #1
0ABE 14         957            dec a
0ABF 120142     957            lcall ?Set_Cursor_2 ; Select column and row
0AC2 D0E0       957            pop acc
0AC4 C083       958            push dph
0AC6 C082       958            push dpl
0AC8 C0E0       958            push acc
0ACA 90005E     958            mov dptr, #Soak_display
0ACD 120137     958            lcall ?Send_Constant_String
0AD0 D0E0       958            pop acc
0AD2 D082       958            pop dpl
0AD4 D083       958            pop dph
0AD6 C3         959       clr c   ; ! i don't know what is c 
0AD7 1208B7     960            lcall check_stop
0ADA 3008C8     961       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0ADD 300111     962            jnb s_flag, FSM_state2_done
0AE0 C201       963            clr s_flag
0AE2 1206D6     964            lcall Display_Data
0AE5            965            
0AE5 E544       966            mov a, soak_time    ; set a to soak time
0AE7 953F       967       subb a, seconds    ; temp is our currect sec
0AE9 5006       968       jnc FSM_state2_done
0AEB 753F00     969       mov seconds, #0x00     ; set time to 0
0AEE 754B03     970       mov FSM_state, #3
0AF1            971   FSM_state2_done:
0AF1 020A0E     972       ljmp FSM
0AF4            973   
0AF4            974   FSM_state3: ;ramp to peak
0AF4 B40342     975       cjne a, #3, FSM_state4
0AF7 754764     976       mov pwm, #100
0AFA C0E0       977            push acc
0AFC 7401       977            mov a, #1
0AFE 14         977            dec a
0AFF 120142     977            lcall ?Set_Cursor_2 ; Select column and row
0B02 D0E0       977            pop acc
0B04 C083       978            push dph
0B06 C082       978            push dpl
0B08 C0E0       978            push acc
0B0A 90006C     978            mov dptr, #Ramp_to_peak
0B0D 120137     978            lcall ?Send_Constant_String
0B10 D0E0       978            pop acc
0B12 D082       978            pop dpl
0B14 D083       978            pop dph
0B16 C3         979       clr c   ; ! i don't know what is c 
0B17 1208B7     980            lcall check_stop
0B1A 300888     981       jnb start_stop_flag, stop_state ; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B1D 300113     982            jnb s_flag, FSM_state3_done
0B20 C201       983            clr s_flag
0B22 1206D6     984            lcall Display_Data
0B25 E543       985            mov a, reflow_temp    ; set a to reflow temp
0B27 120881     986            lcall Compare_temp
0B2A 300006     987       jnb mf, FSM_state3_done
0B2D 753F00     988       mov seconds, #0x00     ; set time to 0
0B30 754B04     989       mov FSM_state, #4
0B33            990   FSM_state3_done:
0B33 020A0E     991       ljmp FSM
0B36            992       
0B36            993   intermediate_stop_jump:
0B36 020AA5     994            ljmp stop_state
0B39            995   
0B39            996   FSM_state4:;reflow
0B39 B4043D     997       cjne a, #4, FSM_state5
0B3C 754714     998       mov pwm, #20
0B3F C0E0       999            push acc
0B41 7401       999            mov a, #1
0B43 14         999            dec a
0B44 120142     999            lcall ?Set_Cursor_2 ; Select column and row
0B47 D0E0       999            pop acc
0B49 C083      1000            push dph
0B4B C082      1000            push dpl
0B4D C0E0      1000            push acc
0B4F 90007A    1000            mov dptr, #Reflow_display
0B52 120137    1000            lcall ?Send_Constant_String
0B55 D0E0      1000            pop acc
0B57 D082      1000            pop dpl
0B59 D083      1000            pop dph
0B5B C3        1001       clr c   ; ! i don't know what is c 
0B5C 1208B7    1002            lcall check_stop
0B5F 3008D4    1003       jnb start_stop_flag, intermediate_stop_jump; checks the flag if 0, then means stop was pressed, if 1 keep on going
0B62 300111    1004            jnb s_flag, FSM_state4_done
0B65 C201      1005            clr s_flag
0B67 1206D6    1006            lcall Display_Data
0B6A           1007            
0B6A E542      1008            mov a, reflow_time    ; set a to reflow time
0B6C 953F      1009       subb a, seconds    ; temp is our currect sec
0B6E 5006      1010       jnc FSM_state4_done
0B70 753F00    1011       mov seconds, #0x00     ; set time to 0
0B73 754B05    1012       mov FSM_state, #5
0B76           1013   FSM_state4_done:
0B76 020A0E    1014       ljmp FSM
0B79           1015   
0B79           1016   FSM_state5:;cooling
0B79 B40542    1017       cjne a, #5, FSM_state6
0B7C 754700    1018       mov pwm, #0
0B7F           1019       
0B7F C0E0      1020            push acc
0B81 7401      1020            mov a, #1
0B83 14        1020            dec a
0B84 120142    1020            lcall ?Set_Cursor_2 ; Select column and row
0B87 D0E0      1020            pop acc
0B89 C083      1021            push dph
0B8B C082      1021            push dpl
0B8D C0E0      1021            push acc
0B8F 900088    1021            mov dptr, #Cooling_display
0B92 120137    1021            lcall ?Send_Constant_String
0B95 D0E0      1021            pop acc
0B97 D082      1021            pop dpl
0B99 D083      1021            pop dph
0B9B C3        1022       clr c
0B9C 1208B7    1023            lcall check_stop
0B9F 300894    1024       jnb start_stop_flag, intermediate_stop_jump ; checks the flag if 0, then means stop was pressed, if 1 keep on going 
0BA2 300113    1025            jnb s_flag, FSM_state5_done
0BA5 C201      1026            clr s_flag
0BA7 1206D6    1027            lcall Display_Data
0BAA 743C      1028            mov a, #0x3C    ; set a to 60
0BAC 120881    1029            lcall Compare_temp
0BAF           1030   
0BAF 200006    1031       jb mf, FSM_state5_done
0BB2 753F00    1032       mov seconds, #0x00     ; set time to 0
0BB5 754B06    1033       mov FSM_state, #6
0BB8           1034   FSM_state5_done: 
0BB8 020A0E    1035       ljmp FSM
0BBB           1036   
0BBB           1037   intermediate_state_0:
0BBB 020A0E    1038            ljmp FSM
0BBE           1039            
0BBE           1040   FSM_state6:
0BBE B406FA    1041            cjne a, #6, intermediate_state_0
0BC1 C2CA      1042            clr TR2
0BC3 D28C      1043            setb TR0
0BC5 D2A9      1044            setb ET0
0BC7           1045   
0BC7 1208DE    1046       lcall Display_special_char1
0BCA 754D7C    1047            mov Melody_Reload+1, #high(B3_KEY)
0BCD 754CBD    1048            mov Melody_Reload+0, #low(B3_KEY)
0BD0 C002      1049            push AR2
0BD2 7A78      1049            mov R2, #120
0BD4 1200B5    1049            lcall ?Wait_Milli_Seconds
0BD7 D002      1049            pop AR2
0BD9           1050   
0BD9 754D6C    1051            mov Melody_Reload+1, #high(A3_KEY)
0BDC 754CA1    1052            mov Melody_Reload+0, #low(A3_KEY)
0BDF C002      1053            push AR2
0BE1 7A78      1053            mov R2, #120
0BE3 1200B5    1053            lcall ?Wait_Milli_Seconds
0BE6 D002      1053            pop AR2
0BE8           1054   
0BE8 754D63    1055            mov Melody_Reload+1, #high(Gs3_KEY)
0BEB 754CC0    1056            mov Melody_Reload+0, #low(Gs3_KEY)
0BEE C002      1057            push AR2
0BF0 7A78      1057            mov R2, #120
0BF2 1200B5    1057            lcall ?Wait_Milli_Seconds
0BF5 D002      1057            pop AR2
0BF7           1058            
0BF7 754D6C    1059            mov Melody_Reload+1, #high(A3_KEY)
0BFA 754CA1    1060            mov Melody_Reload+0, #low(A3_KEY)
0BFD C002      1061            push AR2
0BFF 7A78      1061            mov R2, #120
0C01 1200B5    1061            lcall ?Wait_Milli_Seconds
0C04 D002      1061            pop AR2
0C06           1062   
0C06 120962    1063            lcall clear_screen_func
0C09           1064   ;----------------------------------------
0C09 120920    1065            lcall Display_special_char2
0C0C           1066   
0C0C 754D84    1067            mov Melody_Reload+1, #high(C4_KEY)
0C0F 754C05    1068            mov Melody_Reload+0, #low(C4_KEY)
0C12 C002      1069            push AR2
0C14 7AF0      1069            mov R2, #240
0C16 1200B5    1069            lcall ?Wait_Milli_Seconds
0C19 D002      1069            pop AR2
0C1B C002      1070            push AR2
0C1D 7AF0      1070            mov R2, #240
0C1F 1200B5    1070            lcall ?Wait_Milli_Seconds
0C22 D002      1070            pop AR2
0C24           1071            
0C24 120962    1072       lcall clear_screen_func
0C27 1208DE    1073       lcall Display_special_char1
0C2A           1074       
0C2A 754D84    1075            mov Melody_Reload+1, #high(D4_KEY)
0C2D 754C05    1076            mov Melody_Reload+0, #low(D4_KEY)
0C30 C002      1077            push AR2
0C32 7A78      1077            mov R2, #120
0C34 1200B5    1077            lcall ?Wait_Milli_Seconds
0C37 D002      1077            pop AR2
0C39           1078   
0C39 754D84    1079            mov Melody_Reload+1, #high(C4_KEY)
0C3C 754C05    1080            mov Melody_Reload+0, #low(C4_KEY)
0C3F C002      1081            push AR2
0C41 7A78      1081            mov R2, #120
0C43 1200B5    1081            lcall ?Wait_Milli_Seconds
0C46 D002      1081            pop AR2
0C48           1082   
0C48 754DBE    1083            mov Melody_Reload+1, #high(B4_KEY)
0C4B 754C5F    1084            mov Melody_Reload+0, #low(B4_KEY)
0C4E C002      1085            push AR2
0C50 7A78      1085            mov R2, #120
0C52 1200B5    1085            lcall ?Wait_Milli_Seconds
0C55 D002      1085            pop AR2
0C57           1086   
0C57 754DC2    1087            mov Melody_Reload+1, #high(C5_KEY)
0C5A 754C12    1088            mov Melody_Reload+0, #low(C5_KEY)
0C5D C002      1089            push AR2
0C5F 7A78      1089            mov R2, #120
0C61 1200B5    1089            lcall ?Wait_Milli_Seconds
0C64 D002      1089            pop AR2
0C66           1090   
0C66 120962    1091            lcall clear_screen_func
0C69 120920    1092       lcall Display_special_char2
0C6C           1093            
0C6C 754DCE    1094            mov Melody_Reload+1, #high(E5_KEY)
0C6F 754CD7    1095            mov Melody_Reload+0, #low(E5_KEY)
0C72 C002      1096            push AR2
0C74 7AF0      1096            mov R2, #240
0C76 1200B5    1096            lcall ?Wait_Milli_Seconds
0C79 D002      1096            pop AR2
0C7B C002      1097            push AR2
0C7D 7AF0      1097            mov R2, #240
0C7F 1200B5    1097            lcall ?Wait_Milli_Seconds
0C82 D002      1097            pop AR2
0C84           1098   
0C84 120962    1099            lcall clear_screen_func
0C87 1208DE    1100       lcall Display_special_char1
0C8A           1101   ;-----------------------------------------
0C8A 754DD1    1102            mov Melody_Reload+1, #high(F5_KEY)
0C8D 754C96    1103            mov Melody_Reload+0, #low(F5_KEY)
0C90 C002      1104            push AR2
0C92 7A78      1104            mov R2, #120
0C94 1200B5    1104            lcall ?Wait_Milli_Seconds
0C97 D002      1104            pop AR2
0C99           1105   
0C99 754DCE    1106            mov Melody_Reload+1, #high(E5_KEY)
0C9C 754CD7    1107            mov Melody_Reload+0, #low(E5_KEY)
0C9F C002      1108            push AR2
0CA1 7A78      1108            mov R2, #120
0CA3 1200B5    1108            lcall ?Wait_Milli_Seconds
0CA6 D002      1108            pop AR2
0CA8           1109   
0CA8 754DCB    1110            mov Melody_Reload+1, #high(Ds5_KEY)
0CAB 754CEB    1111            mov Melody_Reload+0, #low(Ds5_KEY)
0CAE C002      1112            push AR2
0CB0 7A78      1112            mov R2, #120
0CB2 1200B5    1112            lcall ?Wait_Milli_Seconds
0CB5 D002      1112            pop AR2
0CB7           1113   
0CB7 754DCE    1114            mov Melody_Reload+1, #high(E5_KEY)
0CBA 754CD7    1115            mov Melody_Reload+0, #low(E5_KEY)
0CBD C002      1116            push AR2
0CBF 7A78      1116            mov R2, #120
0CC1 1200B5    1116            lcall ?Wait_Milli_Seconds
0CC4 D002      1116            pop AR2
0CC6           1117   
0CC6 120962    1118            lcall clear_screen_func
0CC9 120920    1119       lcall Display_special_char2
0CCC           1120   ;-----------------------------------------
0CCC 754DDF    1121            mov Melody_Reload+1, #high(B5_KEY)
0CCF 754C30    1122            mov Melody_Reload+0, #low(B5_KEY)
0CD2 C002      1123            push AR2
0CD4 7A78      1123            mov R2, #120
0CD6 1200B5    1123            lcall ?Wait_Milli_Seconds
0CD9 D002      1123            pop AR2
0CDB           1124   
0CDB 754DDB    1125            mov Melody_Reload+1, #high(A5_KEY)
0CDE 754C29    1126            mov Melody_Reload+0, #low(A5_KEY)
0CE1 C002      1127            push AR2
0CE3 7A78      1127            mov R2, #120
0CE5 1200B5    1127            lcall ?Wait_Milli_Seconds
0CE8 D002      1127            pop AR2
0CEA           1128   
0CEA 754DD8    1129            mov Melody_Reload+1, #high(Gs5_KEY)
0CED 754CF7    1130            mov Melody_Reload+0, #low(Gs5_KEY)
0CF0 C002      1131            push AR2
0CF2 7A78      1131            mov R2, #120
0CF4 1200B5    1131            lcall ?Wait_Milli_Seconds
0CF7 D002      1131            pop AR2
0CF9           1132   
0CF9 754DDB    1133            mov Melody_Reload+1, #high(A5_KEY)
0CFC 754C29    1134            mov Melody_Reload+0, #low(A5_KEY)
0CFF C002      1135            push AR2
0D01 7A78      1135            mov R2, #120
0D03 1200B5    1135            lcall ?Wait_Milli_Seconds
0D06 D002      1135            pop AR2
0D08           1136   
0D08 120962    1137            lcall clear_screen_func
0D0B 1208DE    1138       lcall Display_special_char1
0D0E           1139   ;--------------------------------------
0D0E 754DDF    1140            mov Melody_Reload+1, #high(B5_KEY)
0D11 754C30    1141            mov Melody_Reload+0, #low(B5_KEY)
0D14 C002      1142            push AR2
0D16 7A78      1142            mov R2, #120
0D18 1200B5    1142            lcall ?Wait_Milli_Seconds
0D1B D002      1142            pop AR2
0D1D           1143   
0D1D 754DDB    1144            mov Melody_Reload+1, #high(A5_KEY)
0D20 754C29    1145            mov Melody_Reload+0, #low(A5_KEY)
0D23 C002      1146            push AR2
0D25 7A78      1146            mov R2, #120
0D27 1200B5    1146            lcall ?Wait_Milli_Seconds
0D2A D002      1146            pop AR2
0D2C           1147   
0D2C 754DD8    1148            mov Melody_Reload+1, #high(Gs5_KEY)
0D2F 754CF7    1149            mov Melody_Reload+0, #low(Gs5_KEY)
0D32 C002      1150            push AR2
0D34 7A78      1150            mov R2, #120
0D36 1200B5    1150            lcall ?Wait_Milli_Seconds
0D39 D002      1150            pop AR2
0D3B           1151   
0D3B 754DDB    1152            mov Melody_Reload+1, #high(A5_KEY)
0D3E 754C29    1153            mov Melody_Reload+0, #low(A5_KEY)
0D41 C002      1154            push AR2
0D43 7A78      1154            mov R2, #120
0D45 1200B5    1154            lcall ?Wait_Milli_Seconds
0D48 D002      1154            pop AR2
0D4A           1155   
0D4A 120962    1156            lcall clear_screen_func
0D4D 120920    1157       lcall Display_special_char2
0D50           1158   
0D50 754DE1    1159            mov Melody_Reload+1, #high(C6_KEY)
0D53 754C05    1160            mov Melody_Reload+0, #low(C6_KEY)
0D56 C002      1161            push AR2
0D58 7AF0      1161            mov R2, #240
0D5A 1200B5    1161            lcall ?Wait_Milli_Seconds
0D5D D002      1161            pop AR2
0D5F C002      1162            push AR2
0D61 7AF0      1162            mov R2, #240
0D63 1200B5    1162            lcall ?Wait_Milli_Seconds
0D66 D002      1162            pop AR2
0D68           1163            
0D68 120962    1164            lcall clear_screen_func
0D6B 1208DE    1165       lcall Display_special_char1
0D6E           1166   ;----------------------------------------
0D6E 754DDB    1167            mov Melody_Reload+1, #high(A5_KEY)
0D71 754C29    1168            mov Melody_Reload+0, #low(A5_KEY)
0D74 C002      1169            push AR2
0D76 7AF0      1169            mov R2, #240
0D78 1200B5    1169            lcall ?Wait_Milli_Seconds
0D7B D002      1169            pop AR2
0D7D           1170   
0D7D 754DE1    1171            mov Melody_Reload+1, #high(C6_KEY)
0D80 754C05    1172            mov Melody_Reload+0, #low(C6_KEY)
0D83 C002      1173            push AR2
0D85 7AF0      1173            mov R2, #240
0D87 1200B5    1173            lcall ?Wait_Milli_Seconds
0D8A D002      1173            pop AR2
0D8C           1174   
0D8C 120962    1175            lcall clear_screen_func
0D8F 120920    1176       lcall Display_special_char2
0D92           1177   ;-----------------------------------------
0D92 754DDF    1178            mov Melody_Reload+1, #high(B5_KEY)
0D95 754C30    1179            mov Melody_Reload+0, #low(B5_KEY)
0D98 C002      1180            push AR2
0D9A 7AF0      1180            mov R2, #240
0D9C 1200B5    1180            lcall ?Wait_Milli_Seconds
0D9F D002      1180            pop AR2
0DA1           1181   
0DA1 754DDB    1182            mov Melody_Reload+1, #high(A5_KEY)
0DA4 754C29    1183            mov Melody_Reload+0, #low(A5_KEY)
0DA7 C002      1184            push AR2
0DA9 7AF0      1184            mov R2, #240
0DAB 1200B5    1184            lcall ?Wait_Milli_Seconds
0DAE D002      1184            pop AR2
0DB0           1185   
0DB0 120962    1186            lcall clear_screen_func
0DB3 1208DE    1187       lcall Display_special_char1
0DB6           1188   
0DB6 754DD6    1189            mov Melody_Reload+1, #high(G5_KEY)
0DB9 754C29    1190            mov Melody_Reload+0, #low(A5_KEY)
0DBC C002      1191            push AR2
0DBE 7AF0      1191            mov R2, #240
0DC0 1200B5    1191            lcall ?Wait_Milli_Seconds
0DC3 D002      1191            pop AR2
0DC5           1192   
0DC5 754DDB    1193            mov Melody_Reload+1, #high(A5_KEY)
0DC8 754C29    1194            mov Melody_Reload+0, #low(A5_KEY)
0DCB C002      1195            push AR2
0DCD 7AF0      1195            mov R2, #240
0DCF 1200B5    1195            lcall ?Wait_Milli_Seconds
0DD2 D002      1195            pop AR2
0DD4           1196   
0DD4 120962    1197            lcall clear_screen_func
0DD7 120920    1198       lcall Display_special_char2
0DDA           1199   ;-----------------------------------------
0DDA 754DDF    1200            mov Melody_Reload+1, #high(B5_KEY)
0DDD 754C30    1201            mov Melody_Reload+0, #low(B5_KEY)
0DE0 C002      1202            push AR2
0DE2 7AF0      1202            mov R2, #240
0DE4 1200B5    1202            lcall ?Wait_Milli_Seconds
0DE7 D002      1202            pop AR2
0DE9           1203   
0DE9 754DDB    1204            mov Melody_Reload+1, #high(A5_KEY)
0DEC 754C29    1205            mov Melody_Reload+0, #low(A5_KEY)
0DEF C002      1206            push AR2
0DF1 7AF0      1206            mov R2, #240
0DF3 1200B5    1206            lcall ?Wait_Milli_Seconds
0DF6 D002      1206            pop AR2
0DF8           1207   
0DF8 120962    1208            lcall clear_screen_func
0DFB 1208DE    1209       lcall Display_special_char1
0DFE           1210   
0DFE 754DD6    1211            mov Melody_Reload+1, #high(G5_KEY)
0E01 754C29    1212            mov Melody_Reload+0, #low(A5_KEY)
0E04 C002      1213            push AR2
0E06 7AF0      1213            mov R2, #240
0E08 1200B5    1213            lcall ?Wait_Milli_Seconds
0E0B D002      1213            pop AR2
0E0D           1214   
0E0D 754DDB    1215            mov Melody_Reload+1, #high(A5_KEY)
0E10 754C29    1216            mov Melody_Reload+0, #low(A5_KEY)
0E13 C002      1217            push AR2
0E15 7AF0      1217            mov R2, #240
0E17 1200B5    1217            lcall ?Wait_Milli_Seconds
0E1A D002      1217            pop AR2
0E1C           1218   
0E1C 120962    1219            lcall clear_screen_func
0E1F 120920    1220       lcall Display_special_char2
0E22           1221   ;-----------------------------------------
0E22 754DDF    1222            mov Melody_Reload+1, #high(B5_KEY)
0E25 754C30    1223            mov Melody_Reload+0, #low(B5_KEY)
0E28 C002      1224            push AR2
0E2A 7AF0      1224            mov R2, #240
0E2C 1200B5    1224            lcall ?Wait_Milli_Seconds
0E2F D002      1224            pop AR2
0E31           1225   
0E31 754DDB    1226            mov Melody_Reload+1, #high(A5_KEY)
0E34 754C29    1227            mov Melody_Reload+0, #low(A5_KEY)
0E37 C002      1228            push AR2
0E39 7AF0      1228            mov R2, #240
0E3B 1200B5    1228            lcall ?Wait_Milli_Seconds
0E3E D002      1228            pop AR2
0E40           1229   
0E40 120962    1230            lcall clear_screen_func
0E43 1208DE    1231       lcall Display_special_char1
0E46           1232   
0E46 754DD6    1233            mov Melody_Reload+1, #high(G5_KEY)
0E49 754C29    1234            mov Melody_Reload+0, #low(A5_KEY)
0E4C C002      1235            push AR2
0E4E 7AF0      1235            mov R2, #240
0E50 1200B5    1235            lcall ?Wait_Milli_Seconds
0E53 D002      1235            pop AR2
0E55           1236            
0E55 754DD4    1237            mov Melody_Reload+1, #high(Fs5_KEY)
0E58 754C30    1238            mov Melody_Reload+0, #low(Fs5_KEY)
0E5B C002      1239            push AR2
0E5D 7AF0      1239            mov R2, #240
0E5F 1200B5    1239            lcall ?Wait_Milli_Seconds
0E62 D002      1239            pop AR2
0E64           1240   
0E64 120962    1241            lcall clear_screen_func
0E67 120920    1242       lcall Display_special_char2
0E6A           1243   
0E6A 754DCE    1244            mov Melody_Reload+1, #high(E5_KEY)
0E6D 754CD7    1245            mov Melody_Reload+0, #low(E5_KEY)
0E70 C002      1246            push AR2
0E72 7AF0      1246            mov R2, #240
0E74 1200B5    1246            lcall ?Wait_Milli_Seconds
0E77 D002      1246            pop AR2
0E79 C002      1247            push AR2
0E7B 7AF0      1247            mov R2, #240
0E7D 1200B5    1247            lcall ?Wait_Milli_Seconds
0E80 D002      1247            pop AR2
0E82           1248   
0E82 120962    1249            lcall clear_screen_func
0E85 1208DE    1250       lcall Display_special_char1
0E88 02099B    1251       ljmp main
0E8B           1252   EN
