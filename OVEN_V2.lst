                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   
0000             20   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             21   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             22   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 1s
0000             27   TIMER2_RELOAD EQU ((65536-(CLK/(16*TIMER2_RATE))))
0000             28   
0000             29   ;---------------------------------;
0000             30   ; Key board                       ;
0000             31   ;---------------------------------;
0000             32   C3_RATE equ 262
0000             33   C3_KEY EQU ((65536-(CLK/C3_RATE)))
0000             34   D3_RATE equ 294
0000             35   D3_KEY EQU ((65536-(CLK/D3_RATE)))
0000             36   B3_RATE equ 494
0000             37   B3_KEY EQU ((65536-(CLK/B3_RATE)))
0000             38   Gs3_RATE equ 415
0000             39   Gs3_KEY EQU ((65536-(CLK/Gs3_RATE)))
0000             40   A3_RATE equ 440
0000             41   A3_KEY EQU ((65536-(CLK/A3_RATE)))
0000             42   
0000             43   C4_RATE equ 523
0000             44   C4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             45   D4_RATE equ 587
0000             46   D4_KEY EQU ((65536-(CLK/C4_RATE)))
0000             47   E4_RATE equ 479
0000             48   E4_KEY EQU ((65536-(CLK/E4_RATE)))
0000             49   Gs4_RATE equ 831
0000             50   Gs4_KEY EQU ((65536-(CLK/Gs4_RATE)))
0000             51   A4_RATE equ 880
0000             52   A4_KEY EQU ((65536-(CLK/A4_RATE)))
0000             53   B4_RATE equ 988
0000             54   B4_KEY EQU ((65536-(CLK/B4_RATE)))
0000             55   
0000             56   C5_RATE equ 1047
0000             57   C5_KEY EQU ((65536-(CLK/C5_RATE)))
0000             58   D5_RATE equ 1175
0000             59   D5_KEY EQU ((65536-(CLK/D5_RATE)))
0000             60   Ds5_RATE equ 1245
0000             61   Ds5_KEY EQU ((65536-(CLK/Ds5_RATE)))
0000             62   E5_RATE equ 1319
0000             63   E5_KEY EQU ((65536-(CLK/E5_RATE)))
0000             64   F5_RATE equ 1397
0000             65   F5_KEY EQU ((65536-(CLK/F5_RATE)))
0000             66   Fs5_RATE equ 1480
0000             67   Fs5_KEY EQU ((65536-(CLK/Fs5_RATE)))
0000             68   G5_RATE equ 1568
0000             69   G5_KEY EQU ((65536-(CLK/G5_RATE)))
0000             70   Gs5_RATE equ 1661
0000             71   Gs5_KEY EQU ((65536-(CLK/Gs5_RATE)))
0000             72   A5_RATE equ 1760
0000             73   A5_KEY EQU ((65536-(CLK/A5_RATE)))
0000             74   B5_RATE equ 1976
0000             75   B5_KEY EQU ((65536-(CLK/B5_RATE)))
0000             76   
0000             77   C6_RATE equ 2093
0000             78   C6_KEY EQU ((65536-(CLK/C6_RATE)))
0000             79   E6_RATE equ 2637
0000             80   E6_KEY EQU ((65536-(CLK/E6_RATE)))
0000             81   MUTE_KEY EQU 0
0000             82   ;----------------------------------
0000             83   ;---------------------------------;
0000             84   ; Define any buttons & pins here  ;
0000             85   ;---------------------------------;
0000             86   SOUND_OUT   EQU P1.7 ; speaker pin
0000             87   PWM_OUT    EQU P1.0 ; Logic 1 = oven on
0000             88   ;---------------------------------------------
0000             89   
0000             90   ORG 0x0000
0000 020629      91            ljmp main
0003             92   
0003             93   ; External interrupt 0 vector (not used in this code)
0003             94   org 0x0003
0003 32          95            reti
0004             96   
0004             97   ; Timer/Counter 0 overflow interrupt vector
000B             98   org 0x000B
000B 0204DA      99            ljmp Timer0_ISR
000E            100   
000E            101   ; External interrupt 1 vector (not used in this code)
0013            102   org 0x0013
0013 32         103            reti
0014            104   
0014            105   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B            106   org 0x001B
001B 32         107            reti
001C            108   
001C            109   ; Serial port receive/transmit interrupt vector (not used in this code)
0023            110   org 0x0023 
0023 32         111            reti
0024            112            
0024            113   ; Timer/Counter 2 overflow interrupt vector
0024            114   ;org 0x002B
0024            115   ;        ljmp Timer2_ISR
0024            116   
0024            117   ;---------------------------------;
0024            118   ; Define any constant string here ;
0024            119   ;---------------------------------;
0024            120   ;                          1234567890123456    <- This helps determine the location of the counter
0024 546F3D78   121   To_Message:        db 'To=xxxC Tj= 22C ', 0
     78784320
     546A3D20
     32324320
     00
0035 73787878   122   Time_temp_display:db 'sxxx,xx rxxx,xx ', 0 ; soak temp,time reflow temp,time
     2C787820
     72787878
     2C787820
     00
0046 52616D70   123   Ramp_to_soak:      db 'RampToSoak s=', 0 ; state 1 display
     546F536F
     616B2073
     3D00
0054 536F616B   124   Soak_display:      db 'Soak       s=', 0 ; state 2 display
     20202020
     20202073
     3D00
0062 52616D70   125   Ramp_to_peak:      db 'RampToPeak s=', 0 ; state 3 display
     546F5065
     616B2073
     3D00
0070 5265666C   126   Reflow_display:   db 'Reflow     s=', 0 ; state 4 display
     6F772020
     20202073
     3D00
007E 436F6F6C   127   Cooling_display:  db 'Cooling    s=', 0 ; state 5 display
     696E6720
     20202073
     3D00
008C 20202020   128   clear_screen:      db '                ', 0
     20202020
     20202020
     20202020
     00
009D 484F5400   129   Hot_temp: db 'HOT',0
00A1            130   ;---------------------------------------------
00A1            131   cseg
00A1            132   
00A1            133   LCD_RS equ P1.3
00A1            134   LCD_E  equ P1.4
00A1            135   LCD_D4 equ P0.0
00A1            136   LCD_D5 equ P0.1
00A1            137   LCD_D6 equ P0.2
00A1            138   LCD_D7 equ P0.3
00A1            139   
                141   $LIST
0173            143   
0173            144   ;---------------------------------;
0173            145   ; Define variables here           ;
0173            146   ;---------------------------------;
0173            147   ; These register definitions needed by 'math32.inc'
0030            148   DSEG at 30H
0030            149   x:   ds 4
0034            150   y:   ds 4
0038            151   bcd: ds 5   ;temperature variable for reading
003D            152   Count1ms:     ds 2 ; Used to determine when one second has passed
003F            153   seconds: ds 1
0040            154   VLED_ADC: ds 2
0042            155   reflow_time: ds 1 ; time parameter for reflow    
0043            156   reflow_temp: ds 1 ; temp parameter for reflow
0044            157   soak_time: ds 1 ; time parameter for soak
0045            158   soak_temp: ds 1 ; temp parameter for soak
0046            159   pwm_counter: ds 1 ; power counter
0047            160   pwm: ds 1 ; variable to count the power percentage
0048            161   temp: ds 3
004B            162   FSM_state: ds 1
004C            163   Melody_Reload: ds 2
004E            164   ;---------------------------------------------
004E            165   
004E            166   ;---------------------------------;
004E            167   ; Define flags here               ;
004E            168   ;---------------------------------;
0000            169   BSEG
0000            170   mf: dbit 1
0001            171   s_flag: dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0002            172   PB0: dbit 1      ; start/stop
0003            173   PB1: dbit 1      ; increment reflow time
0004            174   PB2: dbit 1      ; increment reflow temp
0005            175   PB3: dbit 1      ; increment soak time
0006            176   PB4: dbit 1      ; increment soak temp
0007            177   FSM_start_flag: dbit 1 ; once it starts the timer2 will start checking for stop pushbutton
0008            178   start_stop_flag: dbit 1 ; Set to one if button is pressed to start, press again to stop
0009            179   too_hot_flag: dbit 1 ; Check if the value is past 250
000A            180   ;---------------------------------------------
000A            181   
                546   $LIST
                183   $LIST
03E3            185   
03E3            186   ;---------------------------------;
03E3            187   ; Define special chars here       ;
03E3            188   ;---------------------------------;
03E3            189   fire:
03E3 7440       190            mov   A,#40H         ;Load the location where we want to store
03E5 1200F5     191       lcall ?WriteCommand    ;Send the command
03E8 7409       192       mov   A,#09H         ;Load row 1 data
03EA 1200F0     193       lcall ?WriteData   ;Send the data
03ED 7400       194       mov   A,#00H         ;Load row 2 data
03EF 1200F0     195       lcall ?WriteData   ;Send the data
03F2 7414       196       mov   A,#14H         ;Load row 3 data
03F4 1200F0     197       lcall ?WriteData   ;Send the data
03F7 7406       198       mov   A,#06H         ;Load row 4 data
03F9 1200F0     199       lcall ?WriteData   ;Send the data
03FC 740F       200       mov   A,#0FH         ;Load row 5 data
03FE 1200F0     201       lcall ?WriteData   ;Send the data
0401 741B       202       mov   A,#1BH         ;Load row 6 data
0403 1200F0     203       lcall ?WriteData   ;Send the data
0406 7411       204       mov   A,#11H         ;Load row 7 data
0408 11F0       205       acall ?WriteData   ;Send the data
040A 740E       206       mov   A,#0EH         ;Load row 8 data
040C 1200F0     207       lcall ?WriteData   ;Send the data
040F 22         208       ret                  ;Return from routine
0410            209   
0410            210   double_eighth:
0410 7448       211       mov   A,#48H         ;Load the location where we want to store
0412 1200F5     212       lcall ?WriteCommand    ;Send the command
0415 7400       213       mov   A,#00H         ;Load row 1 data
0417 1200F0     214       lcall ?WriteData   ;Send the data
041A 740F       215       mov   A,#0FH         ;Load row 2 data
041C 1200F0     216       lcall ?WriteData   ;Send the data
041F 7409       217       mov   A,#09H         ;Load row 3 data
0421 1200F0     218       lcall ?WriteData   ;Send the data
0424 7409       219       mov   A,#09H         ;Load row 4 data
0426 1200F0     220       lcall ?WriteData   ;Send the data
0429 741B       221       mov   A,#1BH         ;Load row 5 data
042B 1200F0     222       lcall ?WriteData   ;Send the data
042E 741B       223       mov   A,#1BH         ;Load row 6 data
0430 1200F0     224       lcall ?WriteData   ;Send the data
0433 7400       225       mov   A,#00H         ;Load row 7 data
0435 11F0       226       acall ?WriteData   ;Send the data
0437 7400       227       mov   A,#00H         ;Load row 8 data
0439 1200F0     228       lcall ?WriteData   ;Send the data
043C 22         229       ret                  ;Return from routine
043D            230       
043D            231   eighth:
043D 7450       232       mov   A,#50H         ;Load the location where we want to store
043F 1200F5     233       lcall ?WriteCommand    ;Send the command
0442 7404       234       mov   A,#04H         ;Load row 1 data
0444 1200F0     235       lcall ?WriteData   ;Send the data
0447 7406       236       mov   A,#06H         ;Load row 2 data
0449 1200F0     237       lcall ?WriteData   ;Send the data
044C 7405       238       mov   A,#05H         ;Load row 3 data
044E 1200F0     239       lcall ?WriteData   ;Send the data
0451 7404       240       mov   A,#04H         ;Load row 4 data
0453 1200F0     241       lcall ?WriteData   ;Send the data
0456 740C       242       mov   A,#0CH         ;Load row 5 data
0458 1200F0     243       lcall ?WriteData   ;Send the data
045B 7414       244       mov   A,#14H         ;Load row 6 data
045D 1200F0     245       lcall ?WriteData   ;Send the data
0460 7408       246       mov   A,#08H         ;Load row 7 data
0462 11F0       247       acall ?WriteData   ;Send the data
0464 7400       248       mov   A,#00H         ;Load row 8 data
0466 1200F0     249       lcall ?WriteData   ;Send the data
0469 22         250       ret                  ;Return from routine
046A            251   
046A            252   heart:
046A 7458       253       mov   A,#58H         ;Load the location where we want to store
046C 1200F5     254       lcall ?WriteCommand    ;Send the command
046F 7400       255       mov   A,#00H         ;Load row 1 data
0471 1200F0     256       lcall ?WriteData   ;Send the data
0474 740A       257       mov   A,#0AH         ;Load row 2 data
0476 1200F0     258       lcall ?WriteData   ;Send the data
0479 7415       259       mov   A,#15H         ;Load row 3 data
047B 1200F0     260       lcall ?WriteData   ;Send the data
047E 7411       261       mov   A,#11H         ;Load row 4 data
0480 1200F0     262       lcall ?WriteData   ;Send the data
0483 7411       263       mov   A,#11H         ;Load row 5 data
0485 1200F0     264       lcall ?WriteData   ;Send the data
0488 740A       265       mov   A,#0AH         ;Load row 6 data
048A 1200F0     266       lcall ?WriteData   ;Send the data
048D 7404       267       mov   A,#04H         ;Load row 7 data
048F 11F0       268       acall ?WriteData   ;Send the data
0491 7400       269       mov   A,#00H         ;Load row 8 data
0493 1200F0     270       lcall ?WriteData   ;Send the data
0496 22         271       ret                  ;Return from routine
0497            272   bell:
0497 7460       273       mov   A,#60H         ;Load the location where we want to store
0499 1200F5     274       lcall ?WriteCommand    ;Send the command
049C 7400       275       mov   A,#00H         ;Load row 1 data
049E 1200F0     276       lcall ?WriteData   ;Send the data
04A1 7404       277       mov   A,#04H          ;Load row 2 data
04A3 1200F0     278       lcall ?WriteData   ;Send the data
04A6 740E       279       mov   A,#0eH          ;Load row 3 data
04A8 1200F0     280       lcall ?WriteData   ;Send the data
04AB 740E       281       mov   A,#0eH         ;Load row 4 data
04AD 1200F0     282       lcall ?WriteData   ;Send the data
04B0 740E       283       mov   A,#0eH         ;Load row 5 data
04B2 1200F0     284       lcall ?WriteData   ;Send the data
04B5 741F       285       mov   A,#1fH         ;Load row 6 data
04B7 1200F0     286       lcall ?WriteData   ;Send the data
04BA 7400       287       mov   A,#00H         ;Load row 7 data
04BC 11F0       288       acall ?WriteData   ;Send the data
04BE 7404       289       mov   A,#04H         ;Load row 8 data
04C0 1200F0     290       lcall ?WriteData   ;Send the data
04C3 22         291       ret                  ;Return from routine
04C4            292   
04C4            293   ;---------------------------------;
04C4            294   ; Routine to initialize the ISR   ;
04C4            295   ; for timer 0                     ;
04C4            296   ;---------------------------------;
04C4            297   Timer0_Init:
04C4 438E08     298            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
04C7 E589       299            mov a, TMOD
04C9 54F0       300            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
04CB 4401       301            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
04CD F589       302            mov TMOD, a
04CF 758CF0     303            mov TH0, #high(TIMER0_RELOAD)
04D2 758A2C     304            mov TL0, #low(TIMER0_RELOAD)
04D5            305            ; Enable the timer and interrupts
04D5 D2A9       306       setb ET0  ; Enable timer 0 interrupt
04D7 D28C       307       setb TR0  ; Start timer 0
04D9 22         308            ret
04DA            309   
04DA            310   ;---------------------------------;
04DA            311   ; ISR for timer 0.  Set to execute;
04DA            312   ; every 1/4096Hz to generate a    ;
04DA            313   ; 2048 Hz wave at pin SOUND_OUT   ;
04DA            314   ;---------------------------------;
04DA            315   Timer0_ISR:
04DA            316            ;clr TF0  ; According to the data sheet this is done for us already.
04DA            317            ; Timer 0 doesn't have 16-bit auto-reload, so
04DA C28C       318            clr TR0
04DC 854D8C     319            mov TH0, Melody_Reload+1
04DF 854C8A     320            mov TL0, Melody_Reload+0
04E2 D28C       321            setb TR0
04E4 B297       322            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
04E6 32         323            reti
04E7            324   
04E7            325   ;---------------------------------;
04E7            326   ; Routine to initialize the ISR   ;
04E7            327   ; for timer 2                     ;
04E7            328   ;---------------------------------;
04E7            329   Timer2_Init:
04E7 75C800     330            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04EA 75CDD7     331            mov TH2, #high(TIMER2_RELOAD)
04ED 75CC79     332            mov TL2, #low(TIMER2_RELOAD)
04F0            333            ; Set the reload value
04F0 75C9A0     334            mov T2MOD, #0b1010_0000 ; Enable timer 2 autoreload, and clock divider is 16
04F3 75CBD7     335            mov RCMP2H, #high(TIMER2_RELOAD)
04F6 75CA79     336            mov RCMP2L, #low(TIMER2_RELOAD)
04F9            337            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
04F9 E4         338            clr a
04FA F53D       339            mov Count1ms+0, a
04FC F53E       340            mov Count1ms+1, a
04FE 754700     341            mov pwm, #0
0501            342            ; Enable the timer and interrupts
0501 439B80     343            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
0504 D2CA       344       setb TR2  ; Enable timer 2
0506 22         345            ret
0507            346   
0507            347   ;---------------------------------;
0507            348   ; ISR for timer 2 ;
0507            349   ;---------------------------------;
0507            350   Timer2_ISR:
0507 C2CF       351            clr TF2 ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR. It is bit addressable.
0509 B284       352            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
050B            353                    
050B            354            ; The two registers used in the ISR must be saved in the stack
050B C0D0       355            push psw
050D C0E0       356            push acc
050F 0546       357            inc pwm_counter
0511 C3         358            clr c
0512 E547       359            mov a, pwm
0514 9546       360            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0516 B3         361            cpl c
0517 9290       362            mov PWM_OUT, c
0519 E546       363            mov a, pwm_counter
051B            364   
051B B46407     365            cjne a, #100, Timer2_ISR_done
051E 754600     366            mov pwm_counter, #0
0521 053F       367            inc seconds
0523 D201       368            setb s_flag
0525            369            
0525            370   Timer2_ISR_done:
0525            371   
0525 D0E0       372            pop acc
0527 D0D0       373            pop psw
0529 32         374            reti
052A            375   
052A            376   
052A            377   ;---------------------------------;
052A            378   ; Temperature senseor function    ;
052A            379   ;---------------------------------;
052A            380   Init_All:
052A            381            ; Configure all the pins for biderectional I/O
052A 75AC00     382            mov     P3M1, #0x00
052D 75AD00     383            mov     P3M2, #0x00
0530 75B300     384            mov     P1M1, #0x00
0533 75B400     385            mov     P1M2, #0x00
0536 75B100     386            mov     P0M1, #0x00
0539 75B200     387            mov     P0M2, #0x00
053C            388            
053C 438E10     389            orl     CKCON, #0x10 ; CLK is the input for timer 1
053F 438780     390            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0542 759852     391            mov     SCON, #0x52
0545 53C4DF     392            anl     T3CON, #0b11011111
0548 53890F     393            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
054B 438920     394            orl     TMOD, #0x20 ; Timer 1 Mode 2
054E 758D70     395            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0551 D28E       396            setb TR1
0553            397            
0553            398            ; Using timer 0 for delay functions.  Initialize here:
0553            399            ;clr    TR0 ; Stop timer 0
0553 438E08     400            orl     CKCON,#0x08 ; CLK is the input for timer 0
0556 5389F0     401            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0559 438901     402            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
055C            403            
055C            404            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
055C            405            ;orl    P1M1, #0b10000010
055C            406            ;anl    P1M2, #0b01111101
055C            407            
055C            408            ; Initialize and start the ADC:
055C 53E8F0     409            anl ADCCON0, #0xF0
055F 43E807     410            orl ADCCON0, #0x07 ; Select channel 7
0562            411            ; AINDIDS select if some pins are analog inputs or digital I/O:
0562 75F600     412            mov AINDIDS, #0x00 ; Disable all analog inputs
0565 43F681     413            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0568 43E101     414            orl ADCCON1, #0x01 ; Enable ADC
056B            415            
056B 22         416            ret
056C            417   
056C            418   
056C            419   
056C            420   Display_special_char1:
056C 12046A     421            lcall heart
056F 7481       422            mov a, #0x81
0571 1200F5     423            lcall ?WriteCommand
0574 7403       424            mov a, #3H
0576 1200F0     425            lcall ?WriteData
0579            426   
0579 12043D     427            lcall eighth
057C 74C4       428            mov a, #0xC4
057E 1200F5     429            lcall ?WriteCommand
0581 7402       430            mov a, #2H
0583 1200F0     431            lcall ?WriteData
0586            432   
0586 120497     433            lcall bell
0589 7487       434            mov a, #0x87
058B 1200F5     435            lcall ?WriteCommand
058E 7404       436            mov a, #4H
0590 1200F0     437            lcall ?WriteData
0593            438   
0593 120410     439            lcall double_eighth
0596 74CA       440            mov a, #0xCA
0598 1200F5     441            lcall ?WriteCommand
059B 7401       442            mov a, #1H
059D 1200F0     443            lcall ?WriteData
05A0            444   
05A0 12046A     445            lcall heart
05A3 748D       446            mov a, #0x8D
05A5 1200F5     447            lcall ?WriteCommand
05A8 7403       448            mov a, #3H
05AA 1200F0     449            lcall ?WriteData
05AD 32         450            reti
05AE            451            
05AE            452   Display_special_char2:
05AE 12046A     453            lcall heart
05B1 74C0       454            mov a, #0xC0
05B3 1200F5     455            lcall ?WriteCommand
05B6 7403       456            mov a, #3H
05B8 1200F0     457            lcall ?WriteData
05BB            458   
05BB 12043D     459            lcall eighth
05BE 7483       460            mov a, #0x83
05C0 1200F5     461            lcall ?WriteCommand
05C3 7402       462            mov a, #2H
05C5 1200F0     463            lcall ?WriteData
05C8            464   
05C8 120497     465            lcall bell
05CB 74C7       466            mov a, #0xC7
05CD 1200F5     467            lcall ?WriteCommand
05D0 7404       468            mov a, #4H
05D2 1200F0     469            lcall ?WriteData
05D5            470   
05D5 120410     471            lcall double_eighth
05D8 748B       472            mov a, #0x8B
05DA 1200F5     473            lcall ?WriteCommand
05DD 7401       474            mov a, #1H
05DF 1200F0     475            lcall ?WriteData
05E2            476   
05E2 12046A     477            lcall heart
05E5 74CE       478            mov a, #0xCE
05E7 1200F5     479            lcall ?WriteCommand
05EA 7403       480            mov a, #3H
05EC 1200F0     481            lcall ?WriteData
05EF 32         482            reti
05F0            483   
05F0            484   clear_screen_func:
05F0            485       
05F0 C0E0       486            push acc
05F2 7401       486            mov a, #1
05F4 14         486            dec a
05F5 12013A     486            lcall ?Set_Cursor_1 ; Select column and row
05F8 D0E0       486            pop acc
05FA C083       487            push dph
05FC C082       487            push dpl
05FE C0E0       487            push acc
0600 90008C     487            mov dptr, #clear_screen
0603 12012D     487            lcall ?Send_Constant_String
0606 D0E0       487            pop acc
0608 D082       487            pop dpl
060A D083       487            pop dph
060C C0E0       488            push acc
060E 7401       488            mov a, #1
0610 14         488            dec a
0611 120138     488            lcall ?Set_Cursor_2 ; Select column and row
0614 D0E0       488            pop acc
0616 C083       489            push dph
0618 C082       489            push dpl
061A C0E0       489            push acc
061C 90008C     489            mov dptr, #clear_screen
061F 12012D     489            lcall ?Send_Constant_String
0622 D0E0       489            pop acc
0624 D082       489            pop dpl
0626 D083       489            pop dph
0628 32         490       reti
0629            491       
0629            492   main:
0629 75817F     493            mov sp, #0x7f
062C 75B100     494       mov P0M1, #0x00
062F 75B200     495       mov P0M2, #0x00
0632 75B300     496       mov P1M1, #0x00
0635 75B400     497       mov P1M2, #0x00
0638 75AD00     498       mov P3M2, #0x00
063B 75AD00     499       mov P3M2, #0x00
063E            500       
063E 12052A     501            lcall Init_All
0641 1200FA     502       lcall LCD_4BIT
0644 1204C4     503            lcall Timer0_Init
0647 1204E7     504       lcall Timer2_Init
064A            505            
064A D2AF       506       setb EA   ; Enable Global interrupts
064C 754B00     507       mov FSM_state,#0
064F 753F00     508            mov seconds, #0x00
0652 75458C     509            mov soak_temp, #0x8C ;140
0655 75443C     510            mov soak_time, #0x3C ; 60
0658 7543E6     511            mov reflow_temp, #0xE6 ; 230
065B 75421E     512            mov reflow_time, #0x1E ; 30
065E 753800     513            mov bcd,#0
0661 C2CA       514       clr TR2
0663 D2A9       515            setb ET0
0665            516   
0665 12056C     517       lcall Display_special_char1
0668 754D7C     518            mov Melody_Reload+1, #high(B3_KEY)
066B 754CBD     519            mov Melody_Reload+0, #low(B3_KEY)
066E C002       520            push AR2
0670 7A78       520            mov R2, #120
0672 1200AB     520            lcall ?Wait_Milli_Seconds
0675 D002       520            pop AR2
0677            521   
0677 754D6C     522            mov Melody_Reload+1, #high(A3_KEY)
067A 754CA1     523            mov Melody_Reload+0, #low(A3_KEY)
067D C002       524            push AR2
067F 7A78       524            mov R2, #120
0681 1200AB     524            lcall ?Wait_Milli_Seconds
0684 D002       524            pop AR2
0686            525   
0686 754D63     526            mov Melody_Reload+1, #high(Gs3_KEY)
0689 754CC0     527            mov Melody_Reload+0, #low(Gs3_KEY)
068C C002       528            push AR2
068E 7A78       528            mov R2, #120
0690 1200AB     528            lcall ?Wait_Milli_Seconds
0693 D002       528            pop AR2
0695            529            
0695 754D6C     530            mov Melody_Reload+1, #high(A3_KEY)
0698 754CA1     531            mov Melody_Reload+0, #low(A3_KEY)
069B C002       532            push AR2
069D 7A78       532            mov R2, #120
069F 1200AB     532            lcall ?Wait_Milli_Seconds
06A2 D002       532            pop AR2
06A4            533   
06A4 1205F0     534            lcall clear_screen_func
06A7            535   ;----------------------------------------
06A7 1205AE     536            lcall Display_special_char2
06AA            537   
06AA 754D84     538            mov Melody_Reload+1, #high(C4_KEY)
06AD 754C05     539            mov Melody_Reload+0, #low(C4_KEY)
06B0 C002       540            push AR2
06B2 7AF0       540            mov R2, #240
06B4 1200AB     540            lcall ?Wait_Milli_Seconds
06B7 D002       540            pop AR2
06B9 C002       541            push AR2
06BB 7AF0       541            mov R2, #240
06BD 1200AB     541            lcall ?Wait_Milli_Seconds
06C0 D002       541            pop AR2
06C2            542            
06C2 1205F0     543       lcall clear_screen_func
06C5 12056C     544       lcall Display_special_char1
06C8            545       
06C8 754D84     546            mov Melody_Reload+1, #high(D4_KEY)
06CB 754C05     547            mov Melody_Reload+0, #low(D4_KEY)
06CE C002       548            push AR2
06D0 7A78       548            mov R2, #120
06D2 1200AB     548            lcall ?Wait_Milli_Seconds
06D5 D002       548            pop AR2
06D7            549   
06D7 754D84     550            mov Melody_Reload+1, #high(C4_KEY)
06DA 754C05     551            mov Melody_Reload+0, #low(C4_KEY)
06DD C002       552            push AR2
06DF 7A78       552            mov R2, #120
06E1 1200AB     552            lcall ?Wait_Milli_Seconds
06E4 D002       552            pop AR2
06E6            553   
06E6 754DBE     554            mov Melody_Reload+1, #high(B4_KEY)
06E9 754C5F     555            mov Melody_Reload+0, #low(B4_KEY)
06EC C002       556            push AR2
06EE 7A78       556            mov R2, #120
06F0 1200AB     556            lcall ?Wait_Milli_Seconds
06F3 D002       556            pop AR2
06F5            557   
06F5 754DC2     558            mov Melody_Reload+1, #high(C5_KEY)
06F8 754C12     559            mov Melody_Reload+0, #low(C5_KEY)
06FB C002       560            push AR2
06FD 7A78       560            mov R2, #120
06FF 1200AB     560            lcall ?Wait_Milli_Seconds
0702 D002       560            pop AR2
0704            561   
0704 1205F0     562            lcall clear_screen_func
0707 1205AE     563       lcall Display_special_char2
070A            564            
070A 754DCE     565            mov Melody_Reload+1, #high(E5_KEY)
070D 754CD7     566            mov Melody_Reload+0, #low(E5_KEY)
0710 C002       567            push AR2
0712 7AF0       567            mov R2, #240
0714 1200AB     567            lcall ?Wait_Milli_Seconds
0717 D002       567            pop AR2
0719 C002       568            push AR2
071B 7AF0       568            mov R2, #240
071D 1200AB     568            lcall ?Wait_Milli_Seconds
0720 D002       568            pop AR2
0722            569   
0722 1205F0     570            lcall clear_screen_func
0725 12056C     571       lcall Display_special_char1
0728            572   ;-----------------------------------------
0728 754DD1     573            mov Melody_Reload+1, #high(F5_KEY)
072B 754C96     574            mov Melody_Reload+0, #low(F5_KEY)
072E C002       575            push AR2
0730 7A78       575            mov R2, #120
0732 1200AB     575            lcall ?Wait_Milli_Seconds
0735 D002       575            pop AR2
0737            576   
0737 754DCE     577            mov Melody_Reload+1, #high(E5_KEY)
073A 754CD7     578            mov Melody_Reload+0, #low(E5_KEY)
073D C002       579            push AR2
073F 7A78       579            mov R2, #120
0741 1200AB     579            lcall ?Wait_Milli_Seconds
0744 D002       579            pop AR2
0746            580   
0746 754DCB     581            mov Melody_Reload+1, #high(Ds5_KEY)
0749 754CEB     582            mov Melody_Reload+0, #low(Ds5_KEY)
074C C002       583            push AR2
074E 7A78       583            mov R2, #120
0750 1200AB     583            lcall ?Wait_Milli_Seconds
0753 D002       583            pop AR2
0755            584   
0755 754DCE     585            mov Melody_Reload+1, #high(E5_KEY)
0758 754CD7     586            mov Melody_Reload+0, #low(E5_KEY)
075B C002       587            push AR2
075D 7A78       587            mov R2, #120
075F 1200AB     587            lcall ?Wait_Milli_Seconds
0762 D002       587            pop AR2
0764            588   
0764 1205F0     589            lcall clear_screen_func
0767 1205AE     590       lcall Display_special_char2
076A            591   ;-----------------------------------------
076A 754DDF     592            mov Melody_Reload+1, #high(B5_KEY)
076D 754C30     593            mov Melody_Reload+0, #low(B5_KEY)
0770 C002       594            push AR2
0772 7A78       594            mov R2, #120
0774 1200AB     594            lcall ?Wait_Milli_Seconds
0777 D002       594            pop AR2
0779            595   
0779 754DDB     596            mov Melody_Reload+1, #high(A5_KEY)
077C 754C29     597            mov Melody_Reload+0, #low(A5_KEY)
077F C002       598            push AR2
0781 7A78       598            mov R2, #120
0783 1200AB     598            lcall ?Wait_Milli_Seconds
0786 D002       598            pop AR2
0788            599   
0788 754DD8     600            mov Melody_Reload+1, #high(Gs5_KEY)
078B 754CF7     601            mov Melody_Reload+0, #low(Gs5_KEY)
078E C002       602            push AR2
0790 7A78       602            mov R2, #120
0792 1200AB     602            lcall ?Wait_Milli_Seconds
0795 D002       602            pop AR2
0797            603   
0797 754DDB     604            mov Melody_Reload+1, #high(A5_KEY)
079A 754C29     605            mov Melody_Reload+0, #low(A5_KEY)
079D C002       606            push AR2
079F 7A78       606            mov R2, #120
07A1 1200AB     606            lcall ?Wait_Milli_Seconds
07A4 D002       606            pop AR2
07A6            607   
07A6 1205F0     608            lcall clear_screen_func
07A9 12056C     609       lcall Display_special_char1
07AC            610   ;--------------------------------------
07AC 754DDF     611            mov Melody_Reload+1, #high(B5_KEY)
07AF 754C30     612            mov Melody_Reload+0, #low(B5_KEY)
07B2 C002       613            push AR2
07B4 7A78       613            mov R2, #120
07B6 1200AB     613            lcall ?Wait_Milli_Seconds
07B9 D002       613            pop AR2
07BB            614   
07BB 754DDB     615            mov Melody_Reload+1, #high(A5_KEY)
07BE 754C29     616            mov Melody_Reload+0, #low(A5_KEY)
07C1 C002       617            push AR2
07C3 7A78       617            mov R2, #120
07C5 1200AB     617            lcall ?Wait_Milli_Seconds
07C8 D002       617            pop AR2
07CA            618   
07CA 754DD8     619            mov Melody_Reload+1, #high(Gs5_KEY)
07CD 754CF7     620            mov Melody_Reload+0, #low(Gs5_KEY)
07D0 C002       621            push AR2
07D2 7A78       621            mov R2, #120
07D4 1200AB     621            lcall ?Wait_Milli_Seconds
07D7 D002       621            pop AR2
07D9            622   
07D9 754DDB     623            mov Melody_Reload+1, #high(A5_KEY)
07DC 754C29     624            mov Melody_Reload+0, #low(A5_KEY)
07DF C002       625            push AR2
07E1 7A78       625            mov R2, #120
07E3 1200AB     625            lcall ?Wait_Milli_Seconds
07E6 D002       625            pop AR2
07E8            626   
07E8 1205F0     627            lcall clear_screen_func
07EB 1205AE     628       lcall Display_special_char2
07EE            629   
07EE 754DE1     630            mov Melody_Reload+1, #high(C6_KEY)
07F1 754C05     631            mov Melody_Reload+0, #low(C6_KEY)
07F4 C002       632            push AR2
07F6 7AF0       632            mov R2, #240
07F8 1200AB     632            lcall ?Wait_Milli_Seconds
07FB D002       632            pop AR2
07FD C002       633            push AR2
07FF 7AF0       633            mov R2, #240
0801 1200AB     633            lcall ?Wait_Milli_Seconds
0804 D002       633            pop AR2
0806            634            
0806 1205F0     635            lcall clear_screen_func
0809 12056C     636       lcall Display_special_char1
080C            637   ;----------------------------------------
080C 754DDB     638            mov Melody_Reload+1, #high(A5_KEY)
080F 754C29     639            mov Melody_Reload+0, #low(A5_KEY)
0812 C002       640            push AR2
0814 7AF0       640            mov R2, #240
0816 1200AB     640            lcall ?Wait_Milli_Seconds
0819 D002       640            pop AR2
081B            641   
081B 754DE1     642            mov Melody_Reload+1, #high(C6_KEY)
081E 754C05     643            mov Melody_Reload+0, #low(C6_KEY)
0821 C002       644            push AR2
0823 7AF0       644            mov R2, #240
0825 1200AB     644            lcall ?Wait_Milli_Seconds
0828 D002       644            pop AR2
082A            645   
082A 1205F0     646            lcall clear_screen_func
082D 1205AE     647       lcall Display_special_char2
0830            648   ;-----------------------------------------
0830 754DDF     649            mov Melody_Reload+1, #high(B5_KEY)
0833 754C30     650            mov Melody_Reload+0, #low(B5_KEY)
0836 C002       651            push AR2
0838 7AF0       651            mov R2, #240
083A 1200AB     651            lcall ?Wait_Milli_Seconds
083D D002       651            pop AR2
083F            652   
083F 754DDB     653            mov Melody_Reload+1, #high(A5_KEY)
0842 754C29     654            mov Melody_Reload+0, #low(A5_KEY)
0845 C002       655            push AR2
0847 7AF0       655            mov R2, #240
0849 1200AB     655            lcall ?Wait_Milli_Seconds
084C D002       655            pop AR2
084E            656   
084E 1205F0     657            lcall clear_screen_func
0851 12056C     658       lcall Display_special_char1
0854            659   
0854 754DD6     660            mov Melody_Reload+1, #high(G5_KEY)
0857 754C29     661            mov Melody_Reload+0, #low(A5_KEY)
085A C002       662            push AR2
085C 7AF0       662            mov R2, #240
085E 1200AB     662            lcall ?Wait_Milli_Seconds
0861 D002       662            pop AR2
0863            663   
0863 754DDB     664            mov Melody_Reload+1, #high(A5_KEY)
0866 754C29     665            mov Melody_Reload+0, #low(A5_KEY)
0869 C002       666            push AR2
086B 7AF0       666            mov R2, #240
086D 1200AB     666            lcall ?Wait_Milli_Seconds
0870 D002       666            pop AR2
0872            667   
0872 1205F0     668            lcall clear_screen_func
0875 1205AE     669       lcall Display_special_char2
0878            670   ;-----------------------------------------
0878 754DDF     671            mov Melody_Reload+1, #high(B5_KEY)
087B 754C30     672            mov Melody_Reload+0, #low(B5_KEY)
087E C002       673            push AR2
0880 7AF0       673            mov R2, #240
0882 1200AB     673            lcall ?Wait_Milli_Seconds
0885 D002       673            pop AR2
0887            674   
0887 754DDB     675            mov Melody_Reload+1, #high(A5_KEY)
088A 754C29     676            mov Melody_Reload+0, #low(A5_KEY)
088D C002       677            push AR2
088F 7AF0       677            mov R2, #240
0891 1200AB     677            lcall ?Wait_Milli_Seconds
0894 D002       677            pop AR2
0896            678   
0896 1205F0     679            lcall clear_screen_func
0899 12056C     680       lcall Display_special_char1
089C            681   
089C 754DD6     682            mov Melody_Reload+1, #high(G5_KEY)
089F 754C29     683            mov Melody_Reload+0, #low(A5_KEY)
08A2 C002       684            push AR2
08A4 7AF0       684            mov R2, #240
08A6 1200AB     684            lcall ?Wait_Milli_Seconds
08A9 D002       684            pop AR2
08AB            685   
08AB 754DDB     686            mov Melody_Reload+1, #high(A5_KEY)
08AE 754C29     687            mov Melody_Reload+0, #low(A5_KEY)
08B1 C002       688            push AR2
08B3 7AF0       688            mov R2, #240
08B5 1200AB     688            lcall ?Wait_Milli_Seconds
08B8 D002       688            pop AR2
08BA            689   
08BA 1205F0     690            lcall clear_screen_func
08BD 1205AE     691       lcall Display_special_char2
08C0            692   ;-----------------------------------------
08C0 754DDF     693            mov Melody_Reload+1, #high(B5_KEY)
08C3 754C30     694            mov Melody_Reload+0, #low(B5_KEY)
08C6 C002       695            push AR2
08C8 7AF0       695            mov R2, #240
08CA 1200AB     695            lcall ?Wait_Milli_Seconds
08CD D002       695            pop AR2
08CF            696   
08CF 754DDB     697            mov Melody_Reload+1, #high(A5_KEY)
08D2 754C29     698            mov Melody_Reload+0, #low(A5_KEY)
08D5 C002       699            push AR2
08D7 7AF0       699            mov R2, #240
08D9 1200AB     699            lcall ?Wait_Milli_Seconds
08DC D002       699            pop AR2
08DE            700   
08DE 1205F0     701            lcall clear_screen_func
08E1 12056C     702       lcall Display_special_char1
08E4            703   
08E4 754DD6     704            mov Melody_Reload+1, #high(G5_KEY)
08E7 754C29     705            mov Melody_Reload+0, #low(A5_KEY)
08EA C002       706            push AR2
08EC 7AF0       706            mov R2, #240
08EE 1200AB     706            lcall ?Wait_Milli_Seconds
08F1 D002       706            pop AR2
08F3            707            
08F3 754DD4     708            mov Melody_Reload+1, #high(Fs5_KEY)
08F6 754C30     709            mov Melody_Reload+0, #low(Fs5_KEY)
08F9 C002       710            push AR2
08FB 7AF0       710            mov R2, #240
08FD 1200AB     710            lcall ?Wait_Milli_Seconds
0900 D002       710            pop AR2
0902            711   
0902 1205F0     712            lcall clear_screen_func
0905 1205AE     713       lcall Display_special_char2
0908            714   
0908 754DCE     715            mov Melody_Reload+1, #high(E5_KEY)
090B 754CD7     716            mov Melody_Reload+0, #low(E5_KEY)
090E C002       717            push AR2
0910 7AF0       717            mov R2, #240
0912 1200AB     717            lcall ?Wait_Milli_Seconds
0915 D002       717            pop AR2
0917 C002       718            push AR2
0919 7AF0       718            mov R2, #240
091B 1200AB     718            lcall ?Wait_Milli_Seconds
091E D002       718            pop AR2
0920            719   
0920 1205F0     720            lcall clear_screen_func
0923 12056C     721       lcall Display_special_char1
0926            722   
0926            723   EN
