0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P1.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'CLEAR' push button connected to P1.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ;  N76E003 pinout:
0000             11   ;                               -------
0000             12   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             13   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             14   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             15   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             16   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             17   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             18   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             19   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             20   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             21   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             22   ;                               -------
0000             23   ;
0000             24   
0000             25   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             26   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             27   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             28   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             29   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             30   
0000             31   ;---------------------------------;
0000             32   ; Key board                       ;
0000             33   ;---------------------------------;
0000             34   note_B_4 equ 988
0000             35   note_A_4 equ 880
0000             36   note_G_s_4 equ 831
0000             37   note_C_5 equ 1047
0000             38   note_C_4 equ 523
0000             39   ;----------------------------------
0000             40   
0000             41   ;---------------------------------;
0000             42   ; Note Setting                    ;
0000             43   ;---------------------------------;
0000             44   note_length_1 equ 70
0000             45   note_length_2 equ 140
0000             46   ;----------------------------------
0000             47   
0000             48   CLEAR_BUTTON  equ P1.5
0000             49   UPDOWN        equ P1.6
0000             50   SOUND_OUT     equ P1.7
0000             51   
0000             52   ; Reset vector
0000             53   org 0x0000
0000 020153      54       ljmp main
0003             55   
0003             56   ; External interrupt 0 vector (not used in this code)
0003             57   org 0x0003
0003 32          58            reti
0004             59   
0004             60   ; Timer/Counter 0 overflow interrupt vector
000B             61   org 0x000B
000B 020105      62            ljmp Timer0_ISR
000E             63   
000E             64   ; External interrupt 1 vector (not used in this code)
0013             65   org 0x0013
0013 32          66            reti
0014             67   
0014             68   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             69   org 0x001B
001B 32          70            reti
001C             71   
001C             72   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             73   org 0x0023 
0023 32          74            reti
0024             75            
0024             76   ; Timer/Counter 2 overflow interrupt vector
002B             77   org 0x002B
002B 02012F      78            ljmp Timer2_ISR
002E             79   
002E             80   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             81   dseg at 0x30
0030             82   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             83   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             84   note_counter: ds 1
0034             85   timer_reload: ds 2
0036             86   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0036             87   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             88   bseg
0000             89   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             90   
002E             91   cseg
002E             92   ; These 'equ' must match the hardware wiring
002E             93   LCD_RS equ P1.3
002E             94   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             95   LCD_E  equ P1.4
002E             96   LCD_D4 equ P0.0
002E             97   LCD_D5 equ P0.1
002E             98   LCD_D6 equ P0.2
002E             99   LCD_D7 equ P0.3
002E            100   
                102   	$LIST
00E2            104   
00E2            105   ;                     1234567890123456    <- This helps determine the location of the counter
00E2 7E4D7573   106   Initial_Message:  db '~Music Test~', 0
     69632054
     6573747E
     00
00EF            107   
00EF            108   ;---------------------------------;
00EF            109   ; Routine to initialize the ISR   ;
00EF            110   ; for timer 0                     ;
00EF            111   ;---------------------------------;
00EF            112   Timer0_Init:
00EF 438E08     113            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
00F2 E589       114            mov a, TMOD
00F4 54F0       115            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
00F6 4401       116            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
00F8 F589       117            mov TMOD, a
00FA 758C10     118            mov TH0, #high(TIMER0_RATE)
00FD 758A00     119            mov TL0, #low(TIMER0_RATE)
0100            120            ; Enable the timer and interrupts
0100 D2A9       121            setb ET0  ; Enable timer 0 interrupt
0102            122       
0102 D28C       123       setb TR0  ; Start timer 0
0104 22         124            ret
0105            125   
0105            126   ;---------------------------------;
0105            127   ; ISR for timer 0.  Set to execute;
0105            128   ; every 1/4096Hz to enerate a    ;
0105            129   ; 2048 Hz wave at pin SOUND_OUT   ;
0105            130   ;---------------------------------;
0105            131   Timer0_ISR:
0105            132            ;clr TF0  ; According to the data sheet this is done for us already.
0105            133            ; Timer 0 doesn't have 16-bit auto-reload, so
0105 C28C       134            clr TR0
0107 85358C     135            mov TH0, timer_reload+1
010A 85348A     136            mov TL0, timer_reload+0
010D D28C       137            setb TR0
010F B297       138            cpl SOUND_OUT ; Connect speaker the pin assigned to 'SOUND_OUT'!
0111 32         139            reti
0112            140   
0112            141   ;---------------------------------;
0112            142   ; Routine to initialize the ISR   ;
0112            143   ; for timer 2                     ;
0112            144   ;---------------------------------;
0112            145   Timer2_Init:
0112 75C800     146            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0115 75CDBF     147            mov TH2, #high(TIMER2_RELOAD)
0118 75CC28     148            mov TL2, #low(TIMER2_RELOAD)
011B            149            ; Set the reload value
011B 43C980     150            orl T2MOD, #0x80 ; Enable timer 2 autoreload
011E 75CBBF     151            mov RCMP2H, #high(TIMER2_RELOAD)
0121 75CA28     152            mov RCMP2L, #low(TIMER2_RELOAD)
0124            153            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0124 E4         154            clr a
0125 F530       155            mov Count1ms+0, a
0127 F531       156            mov Count1ms+1, a
0129            157            ; Enable the timer and interrupts
0129 439B80     158            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
012C D2CA       159       setb TR2  ; Enable timer 2
012E 22         160            ret
012F            161   
012F            162   ;---------------------------------;
012F            163   ; ISR for timer 2                 ;
012F            164   ;---------------------------------;
012F            165   Timer2_ISR:
012F C2CF       166            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0131 B284       167            cpl P0.4 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0133            168            
0133            169            ; The two registers used in the ISR must be saved in the stack
0133 C0E0       170            push acc
0135 C0D0       171            push psw
0137            172            
0137            173            ; Increment the 16-bit one mili second counter
0137 0530       174            inc Count1ms+0    ; Increment the low 8-bits first
0139 E530       175            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013B 7002       176            jnz Inc_Done
013D 0531       177            inc Count1ms+1
013F            178   
013F            179   Inc_Done:
013F            180            ; Check if half second has passed
013F E530       181            mov a, Count1ms+0
0141 B4320A     182            cjne a, #low(50), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0144 E531       183            mov a, Count1ms+1
0146 B40005     184            cjne a, #high(50), Timer2_ISR_done
0149            185            
0149            186            ; 500 milliseconds have passed.  Set a flag so the main program knows
0149            187            ;setb half_seconds_flag ; Let the main program know half second had passed
0149            188   
0149            189            ;cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0149            190            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0149            191   
0149 E4         192            clr a
014A F530       193            mov Count1ms+0, a
014C F531       194            mov Count1ms+1, a
014E            195            ; Increment the BCD counter
014E            196   
014E            197   Timer2_ISR_done:
014E D0D0       198            pop psw
0150 D0E0       199            pop acc
0152 32         200            reti
0153            201   
0153            202   
0153            203   ;---------------------------------;
0153            204   ; Main program. Includes hardware ;
0153            205   ; initialization and 'forever'    ;
0153            206   ; loop.                           ;
0153            207   ;---------------------------------;
0153            208   main:
0153            209            
0153            210            ; Initialization
0153 75817F     211       mov SP, #0x7F
0156 75B100     212       mov P0M1, #0x00
0159 75B200     213       mov P0M2, #0x00
015C 75B300     214       mov P1M1, #0x00
015F 75B400     215       mov P1M2, #0x00
0162 75AD00     216       mov P3M2, #0x00
0165 75AD00     217       mov P3M2, #0x00
0168            218             
0168 1200EF     219       lcall Timer0_Init
016B 120112     220       lcall Timer2_Init
016E D2AF       221       setb EA   ; Enable Global interrupts
0170 120087     222       lcall LCD_4BIT
0173            223       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0173 C0E0       224            push acc
0175 7401       224            mov a, #1
0177 14         224            dec a
0178 1200C7     224            lcall ?Set_Cursor_1 ; Select column and row
017B D0E0       224            pop acc
017D C083       225            push dph
017F C082       225            push dpl
0181 C0E0       225            push acc
0183 9000E2     225            mov dptr, #Initial_Message
0186 1200BA     225            lcall ?Send_Constant_String
0189 D0E0       225            pop acc
018B D082       225            pop dpl
018D D083       225            pop dph
018F D200       226       setb half_seconds_flag
0191            227   
0191            228   start:
0191 C002       229            push AR2
0193 7AFA       229            mov R2, #250
0195 120038     229            lcall ?Wait_Milli_Seconds
0198 D002       229            pop AR2
019A 753503     230            mov timer_reload+1, #high(note_B_4)
019D 7534DC     231            mov timer_reload+0, #low(note_B_4)
01A0            232   play_music1:
01A0 C002       233            push AR2
01A2 7AFA       233            mov R2, #250
01A4 120038     233            lcall ?Wait_Milli_Seconds
01A7 D002       233            pop AR2
01A9 753503     234            mov timer_reload+1, #high(note_A_4)
01AC 753470     235            mov timer_reload+0, #low(note_A_4)
01AF            236   play_music2:
01AF C002       237            push AR2
01B1 7AFA       237            mov R2, #250
01B3 120038     237            lcall ?Wait_Milli_Seconds
01B6 D002       237            pop AR2
01B8 753503     238            mov timer_reload+1, #high(note_G_s_4)
01BB 75343F     239            mov timer_reload+0, #low(note_G_s_4)
01BE            240   play_music3:
01BE C002       241            push AR2
01C0 7AFA       241            mov R2, #250
01C2 120038     241            lcall ?Wait_Milli_Seconds
01C5 D002       241            pop AR2
01C7 753503     242            mov timer_reload+1, #high(note_A_4)
01CA 753470     243            mov timer_reload+0, #low(note_A_4)
01CD            244   play_music4:
01CD C002       245            push AR2
01CF 7AFA       245            mov R2, #250
01D1 120038     245            lcall ?Wait_Milli_Seconds
01D4 D002       245            pop AR2
01D6 753504     246            mov timer_reload+1, #high(note_C_5)
01D9 753417     247            mov timer_reload+0, #low(note_C_5)
01DC 020191     248            ljmp start
01DF            249   
01DF            250   
01DF            251   EN
