0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet and datasheets.
                  4   $LIST
0000              6   
0000              7   org 0000H
0000 020166       8       ljmp myprogram
0003              9   
0003             10   ;  N76E003 pinout:
0003             11   ;                               -------
0003             12   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0003             13   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0003             14   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0003             15   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0003             16   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0003             17   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0003             18   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0003             19   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0003             20   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0003             21   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0003             22   ;                               -------
0003             23   ;
0003             24   
0003             25   ; These 'equ' must match the hardware wiring
0003             26   LCD_RS equ P1.3
0003             27   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0003             28   LCD_E  equ P1.4
0003             29   LCD_D4 equ P0.0
0003             30   LCD_D5 equ P0.1
0003             31   LCD_D6 equ P0.2
0003             32   LCD_D7 equ P0.3
0003             33   
0003             34   
0003             35   ; When using a 16.6MHz oscillator in the N76E003
0003             36   ; one cycle takes 1.0/16.6MHz = 60.24 ns
0003             37   
0003             38   ;---------------------------------;
0003             39   ; Wait 40 microseconds            ;
0003             40   ;---------------------------------;
0003             41   Wait40uSec:
0003 C000        42       push AR0
0005 7885        43       mov R0, #133
0007             44   L0:
0007 00          45       nop
0008 D8FD        46       djnz R0, L0 ; 1+4 cycles->5*60.24ns*133=40us
000A D000        47       pop AR0
000C 22          48       ret
000D             49   
000D             50   ;---------------------------------;
000D             51   ; Wait 'R2' milliseconds          ;
000D             52   ;---------------------------------;
000D             53   WaitmilliSec:
000D C000        54       push AR0
000F C001        55       push AR1
0011 7928        56   L3: mov R1, #40
0013 7868        57   L2: mov R0, #104
0015 D8FE        58   L1: djnz R0, L1 ; 4 cycles->4*60.24ns*104=25.0us
0017 D9FA        59       djnz R1, L2 ; 25us*40=1.0ms
0019 DAF6        60       djnz R2, L3 ; number of millisecons to wait passed in R2
001B D001        61       pop AR1
001D D000        62       pop AR0
001F 22          63       ret
0020             64   
0020             65   ;---------------------------------;
0020             66   ; Toggles the LCD's 'E' pin       ;
0020             67   ;---------------------------------;
0020             68   LCD_pulse:
0020 D294        69       setb LCD_E
0022 120003      70       lcall Wait40uSec
0025 C294        71       clr LCD_E
0027 22          72       ret
0028             73   
0028             74   ;---------------------------------;
0028             75   ; Writes data to LCD              ;
0028             76   ;---------------------------------;
0028             77   WriteData:
0028 D293        78       setb LCD_RS
002A 020032      79       ljmp LCD_byte
002D             80   
002D             81   ;---------------------------------;
002D             82   ; Writes command to LCD           ;
002D             83   ;---------------------------------;
002D             84   WriteCommand:
002D C293        85       clr LCD_RS
002F 020032      86       ljmp LCD_byte
0032             87   
0032             88   ;---------------------------------;
0032             89   ; Writes acc to LCD in 4-bit mode ;
0032             90   ;---------------------------------;
0032             91   LCD_byte:
0032             92       ; Write high 4 bits first
0032 A2E7        93       mov c, ACC.7
0034 9283        94       mov LCD_D7, c
0036 A2E6        95       mov c, ACC.6
0038 9282        96       mov LCD_D6, c
003A A2E5        97       mov c, ACC.5
003C 9281        98       mov LCD_D5, c
003E A2E4        99       mov c, ACC.4
0040 9280       100       mov LCD_D4, c
0042 120020     101       lcall LCD_pulse
0045            102   
0045            103       ; Write low 4 bits next
0045 A2E3       104       mov c, ACC.3
0047 9283       105       mov LCD_D7, c
0049 A2E2       106       mov c, ACC.2
004B 9282       107       mov LCD_D6, c
004D A2E1       108       mov c, ACC.1
004F 9281       109       mov LCD_D5, c
0051 A2E0       110       mov c, ACC.0
0053 9280       111       mov LCD_D4, c
0055 120020     112       lcall LCD_pulse
0058 22         113       ret
0059            114   
0059            115   ;---------------------------------;
0059            116   ; Configure LCD in 4-bit mode     ;
0059            117   ;---------------------------------;
0059            118   LCD_4BIT:
0059 C294       119       clr LCD_E   ; Resting state of LCD's enable is zero
005B            120       ; clr LCD_RW  ; Not used, pin tied to GND
005B            121   
005B            122       ; After power on, wait for the LCD start up time before initializing
005B 7A28       123       mov R2, #40
005D 12000D     124       lcall WaitmilliSec
0060            125   
0060            126       ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0060 7433       127       mov a, #0x33
0062 12002D     128       lcall WriteCommand
0065 7433       129       mov a, #0x33
0067 12002D     130       lcall WriteCommand
006A 7432       131       mov a, #0x32 ; change to 4-bit mode
006C 12002D     132       lcall WriteCommand
006F            133   
006F            134       ; Configure the LCD
006F 7428       135       mov a, #0x28
0071 12002D     136       lcall WriteCommand
0074 740C       137       mov a, #0x0c
0076 12002D     138       lcall WriteCommand
0079 7401       139       mov a, #0x01 ;  Clear screen command (takes some time)
007B 12002D     140       lcall WriteCommand
007E            141   
007E            142       ;Wait for clear screen command to finish. Usually takes 1.52ms.
007E 7A02       143       mov R2, #2
0080 12000D     144       lcall WaitmilliSec
0083 22         145       ret
0084            146       
0084            147   ;---------------------------------;
0084            148   ;Creates a custom character(s)    ;
0084            149   ;and stores it in CGRAM           ;
0084            150   ;---------------------------------;
0084            151    customchar:
0084            152    ;a funny face
0084 7448       153            mov a, #48H
0086 12002D     154            lcall WriteCommand
0089 7404       155            mov a, #0x04
008B 120028     156            lcall WriteData
008E 7406       157            mov a, #0x06
0090 120028     158            lcall WriteData
0093 7405       159            mov a, #0x05
0095 120028     160            lcall WriteData
0098 7404       161            mov a, #0x04
009A 120028     162            lcall WriteData
009D 740C       163            mov a, #0x0c
009F 120028     164            lcall WriteData
00A2 7414       165            mov a, #0x14
00A4 120028     166            lcall WriteData
00A7 7408       167            mov a, #0x8
00A9 120028     168            lcall WriteData
00AC 7400       169            mov a, #0x0
00AE 120028     170       lcall WriteData 
00B1            171       
00B1            172   ;top pillar
00B1 7450       173            mov a, #50H
00B3 12002D     174            lcall WriteCommand
00B6 741F       175            mov a, #0x1f
00B8 120028     176            lcall WriteData
00BB 740A       177            mov a, #0xa
00BD 120028     178            lcall WriteData
00C0 740A       179            mov a, #0xa
00C2 120028     180            lcall WriteData
00C5 740A       181            mov a, #0xa
00C7 120028     182            lcall WriteData
00CA 740A       183            mov a, #0xa
00CC 120028     184            lcall WriteData
00CF 740A       185            mov a, #0xa
00D1 120028     186            lcall WriteData
00D4 740A       187            mov a, #0xa
00D6 120028     188            lcall WriteData
00D9 740A       189            mov a, #0xa
00DB 120028     190       lcall WriteData 
00DE            191       
00DE            192    ;bottom pillar
00DE 7458       193            mov a, #58H
00E0 12002D     194            lcall WriteCommand
00E3 740A       195            mov a, #0xa
00E5 120028     196            lcall WriteData
00E8 740A       197            mov a, #0xa
00EA 120028     198            lcall WriteData
00ED 740A       199            mov a, #0xa
00EF 120028     200            lcall WriteData
00F2 740A       201            mov a, #0xa
00F4 120028     202            lcall WriteData
00F7 740A       203            mov a, #0xa
00F9 120028     204            lcall WriteData
00FC 740E       205            mov a, #0xe
00FE 120028     206            lcall WriteData
0101 741F       207            mov a, #0x1f
0103 120028     208            lcall WriteData
0106 7400       209            mov a, #0x0
0108 120028     210            lcall WriteData
010B            211            
010B 22         212            ret
010C            213    ;custom character code derived from
010C            214    ;https://www.8051projects.net/lcd-interfacing/lcd-custom-character.php
010C            215    
010C 48757920   216    my_name: DB 'Huy Huynh' ,0 
     4875796E
     6800
0116 20202020   217    disappear: DB '             ',0  
     20202020
     20202020
     2000
0124 35303431   218    student_num: DB '50417435' ,0  
     37343335
     00
012D            219   ;---------------------------------;
012D            220   ; Prints the contents of a string ;
012D            221   ; onto a line                                  ;
012D            222   ;---------------------------------;
012D            223   PrintString:
012D 12000D     224            lcall WaitmilliSec
0130 EB         225       mov     a, r3
0131 93         226       movc    a, @a+dptr   ; Get character of the string
0132 6006       227       jz      Done         ; Jumps if a==0
0134 120028     228       lcall WriteData
0137 0B         229       inc     r3
0138 80F3       230       sjmp    PrintString
013A            231     
013A            232   Done:
013A 22         233       ret
013B            234   ;string code sample derived from 
013B            235   ;https://stackoverflow.com/questions/64343538/moving-strings-into-register-with-a-loop-8051-assembly     
013B            236   
013B            237   ;---------------------------------;
013B            238   ; Makes characters in the                  ;
013B            239   ; first line of the LCD disappear ;
013B            240   ; and reappear                    ;
013B            241   ;---------------------------------;
013B            242   LCD_flash:
013B            243            ;make name disappear
013B 7B00       244            mov r3, #0 ;reset r3
013D 7481       245            mov a, #0x81 ; Move cursor to line 1 column 2
013F 12002D     246       lcall WriteCommand
0142 900116     247       mov dptr, #disappear
0145 12012D     248       lcall PrintString
0148            249       
0148 12000D     250       lcall WaitmilliSec
014B            251       
014B            252       ;now make it reappear
014B 7B00       253       mov r3, #0 ;reset r3
014D 7481       254       mov a, #0x81 ; Move cursor to line 1 column 2
014F 12002D     255       lcall WriteCommand
0152 90010C     256       mov dptr, #my_name
0155 12012D     257       lcall PrintString
0158            258       
0158 22         259       ret
0159            260       
0159            261   ;---------------------------------;
0159            262   ;Makes characters in the first    ;
0159            263   ;line of the LCD scroll left      ;
0159            264   ;until r4 is decremented to 0     ;
0159            265   ;---------------------------------;
0159            266   LCD_scroll:
0159 12000D     267            lcall WaitmilliSec
015C 7418       268            mov a, #0x18 ;set LCD to scroll left
015E 12002D     269            lcall WriteCommand
0161 1C         270            dec r4
0162 BC00F4     271            cjne r4, #0, LCD_scroll
0165            272                    
0165            273            scroll_complete:
0165 22         274            ret
0166            275            
0166            276   ;---------------------------------;
0166            277   ; Main loop.  Initialize stack,   ;
0166            278   ; ports, LCD, and displays        ;
0166            279   ; letters on the LCD              ; 
0166            280   ;---------------------------------;
0166            281   myprogram:
0166 75817F     282       mov SP, #7FH
0169            283       ; Configure the pins as bi-directional so we can use them as input/output
0169 75B100     284       mov P0M1, #0x00
016C 75B200     285       mov P0M2, #0x00
016F 75B300     286       mov P1M1, #0x00
0172 75B400     287       mov P1M2, #0x00
0175 75AD00     288       mov P3M2, #0x00
0178 75AD00     289       mov P3M2, #0x00
017B            290       
017B 7AFF       291       mov r2, #255 ;set millisecond counter
017D 7B00       292       mov r3, #0 ;reset r3
017F 7C28       293       mov r4, #40 ;value of r4 determines how many times the LCD will scroll when LCD_scroll is called
0181 120059     294       lcall LCD_4BIT
0184            295       
0184            296       ;print the special characters
0184 120084     297       lcall customchar
0187 7480       298       mov a, #0x80 ;Move cursor to line 1 column 1
0189 12002D     299       lcall WriteCommand
018C 7402       300       mov a,#2H ; For pattern @50H
018E 120028     301       lcall WriteData 
0191            302       
0191 74C0       303       mov a, #0xC0 ;Move cursor to line 1 column 0
0193 12002D     304       lcall WriteCommand
0196 7403       305       mov a,#3H ; For pattern @58H
0198 120028     306       lcall WriteData 
019B            307       
019B 74CF       308       mov a, #0xCF ;Move cursor to line 2 column 16
019D 12002D     309       lcall WriteCommand
01A0 7403       310       mov a,#3H ; For pattern @58H
01A2 120028     311       lcall WriteData 
01A5            312       
01A5 748F       313       mov a, #0x8F ;Move cursor to line 1 column 16
01A7 12002D     314       lcall WriteCommand
01AA 7402       315       mov a,#2H ; For pattern @50H
01AC 120028     316       lcall WriteData 
01AF            317       
01AF 748B       318       mov a, #0x8B ;Move cursor to line 1 column 11
01B1 12002D     319       lcall WriteCommand
01B4 7401       320       mov a,#1H ; For pattern @48H
01B6 120028     321       lcall WriteData 
01B9            322       
01B9            323       ;Print name and student number
01B9 7481       324       mov a, #0x81 ; Move cursor to line 1 column 2
01BB 12002D     325       lcall WriteCommand
01BE 90010C     326       mov dptr, #my_name
01C1 12012D     327       lcall PrintString
01C4            328       
01C4 7B00       329       mov r3, #0 ;reset r3
01C6 74C1       330       mov a, #0xC1 ; Move cursor to line 2 column 1
01C8 12002D     331       lcall WriteCommand
01CB 900124     332       mov dptr, #student_num
01CE 12012D     333       lcall PrintString
01D1            334            
01D1 12013B     335            lcall LCD_flash
01D4 120159     336            lcall LCD_scroll
01D7            337            
01D7            338   forever:
01D7 80FE       339       sjmp forever
01D9            340     
01D9            341   END
