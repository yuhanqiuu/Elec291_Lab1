0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet and datasheets.
                  4   $LIST
0000              6   org 0000H
0000 02019A       7   ljmp myprogram
0003              8   ; N76E003 pinout:
0003              9   ; -------
0003             10   ; PWM2/IC6/T0/AIN4/P0.5 -|1 20|- P0.4/AIN5/STADC/PWM3/IC3
0003             11   ; TXD/AIN3/P0.6 -|2 19|- P0.3/PWM5/IC5/AIN6
0003             12   ; RXD/AIN2/P0.7 -|3 18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0003             13   ; RST/P2.0 -|4 17|- P0.1/PWM4/IC4/MISO
0003             14   ; INT0/OSCIN/AIN1/P3.0 -|5 16|- P0.0/PWM3/IC3/MOSI/T1
0003             15   ; INT1/AIN0/P1.7 -|6 15|- P1.0/PWM2/IC2/SPCLK
0003             16   ; GND -|7 14|- P1.1/PWM1/IC1/AIN7/CLO
0003             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8 13|- P1.2/PWM0/IC0
0003             18   ; VDD -|9 12|- P1.3/SCL/[STADC]
0003             19   ; PWM5/IC7/SS/P1.5 -|10 11|- P1.4/SDA/FB/PWM1
0003             20   ; -------
0003             21   ;
0003             22   ; These 'equ' must match the hardware wiring
0003             23   LCD_RS equ P1.3
0003             24   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0003             25   LCD_E equ P1.4
0003             26   LCD_D4 equ P0.0
0003             27   LCD_D5 equ P0.1
0003             28   LCD_D6 equ P0.2
0003             29   LCD_D7 equ P0.3
0003             30   
                 32   $LIST
00D5             34   
00D5 20202020    35   clear_screen:  db '                ', 0
     20202020
     20202020
     20202020
     00
00E6             36   
00E6             37   ;
00E6             38   ;for special character 
00E6             39   double_eighth:
00E6 7448        40       mov   A,#48H         ;Load the location where we want to store
00E8 120057      41       lcall ?WriteCommand    ;Send the command
00EB 7400        42       mov   A,#00H         ;Load row 1 data
00ED 120052      43       lcall ?WriteData   ;Send the data
00F0 740F        44       mov   A,#0FH         ;Load row 2 data
00F2 120052      45       lcall ?WriteData   ;Send the data
00F5 7409        46       mov   A,#09H         ;Load row 3 data
00F7 120052      47       lcall ?WriteData   ;Send the data
00FA 7409        48       mov   A,#09H         ;Load row 4 data
00FC 120052      49       lcall ?WriteData   ;Send the data
00FF 741B        50       mov   A,#1BH         ;Load row 5 data
0101 120052      51       lcall ?WriteData   ;Send the data
0104 741B        52       mov   A,#1BH         ;Load row 6 data
0106 120052      53       lcall ?WriteData   ;Send the data
0109 7400        54       mov   A,#00H         ;Load row 7 data
010B 1152        55       acall ?WriteData   ;Send the data
010D 7400        56       mov   A,#00H         ;Load row 8 data
010F 120052      57       lcall ?WriteData   ;Send the data
0112 22          58       ret                  ;Return from routine
0113             59       
0113             60   eighth:
0113 7450        61       mov   A,#50H         ;Load the location where we want to store
0115 120057      62       lcall ?WriteCommand    ;Send the command
0118 7404        63       mov   A,#04H         ;Load row 1 data
011A 120052      64       lcall ?WriteData   ;Send the data
011D 7406        65       mov   A,#06H         ;Load row 2 data
011F 120052      66       lcall ?WriteData   ;Send the data
0122 7405        67       mov   A,#05H         ;Load row 3 data
0124 120052      68       lcall ?WriteData   ;Send the data
0127 7404        69       mov   A,#04H         ;Load row 4 data
0129 120052      70       lcall ?WriteData   ;Send the data
012C 740C        71       mov   A,#0CH         ;Load row 5 data
012E 120052      72       lcall ?WriteData   ;Send the data
0131 7414        73       mov   A,#14H         ;Load row 6 data
0133 120052      74       lcall ?WriteData   ;Send the data
0136 7408        75       mov   A,#08H         ;Load row 7 data
0138 1152        76       acall ?WriteData   ;Send the data
013A 7400        77       mov   A,#00H         ;Load row 8 data
013C 120052      78       lcall ?WriteData   ;Send the data
013F 22          79       ret                  ;Return from routine
0140             80   
0140             81   heart:
0140 7458        82       mov   A,#58H         ;Load the location where we want to store
0142 120057      83       lcall ?WriteCommand    ;Send the command
0145 7400        84       mov   A,#00H         ;Load row 1 data
0147 120052      85       lcall ?WriteData   ;Send the data
014A 740A        86       mov   A,#0AH         ;Load row 2 data
014C 120052      87       lcall ?WriteData   ;Send the data
014F 7415        88       mov   A,#15H         ;Load row 3 data
0151 120052      89       lcall ?WriteData   ;Send the data
0154 7411        90       mov   A,#11H         ;Load row 4 data
0156 120052      91       lcall ?WriteData   ;Send the data
0159 7411        92       mov   A,#11H         ;Load row 5 data
015B 120052      93       lcall ?WriteData   ;Send the data
015E 740A        94       mov   A,#0AH         ;Load row 6 data
0160 120052      95       lcall ?WriteData   ;Send the data
0163 7404        96       mov   A,#04H         ;Load row 7 data
0165 1152        97       acall ?WriteData   ;Send the data
0167 7400        98       mov   A,#00H         ;Load row 8 data
0169 120052      99       lcall ?WriteData   ;Send the data
016C 22         100       ret                  ;Return from routine
016D            101   bell:
016D 7460       102       mov   A,#60H         ;Load the location where we want to store
016F 120057     103       lcall ?WriteCommand    ;Send the command
0172 7400       104       mov   A,#00H         ;Load row 1 data
0174 120052     105       lcall ?WriteData   ;Send the data
0177 7404       106       mov   A,#04H          ;Load row 2 data
0179 120052     107       lcall ?WriteData   ;Send the data
017C 740E       108       mov   A,#0eH          ;Load row 3 data
017E 120052     109       lcall ?WriteData   ;Send the data
0181 740E       110       mov   A,#0eH         ;Load row 4 data
0183 120052     111       lcall ?WriteData   ;Send the data
0186 740E       112       mov   A,#0eH         ;Load row 5 data
0188 120052     113       lcall ?WriteData   ;Send the data
018B 741F       114       mov   A,#1fH         ;Load row 6 data
018D 120052     115       lcall ?WriteData   ;Send the data
0190 7400       116       mov   A,#00H         ;Load row 7 data
0192 1152       117       acall ?WriteData   ;Send the data
0194 7404       118       mov   A,#04H         ;Load row 8 data
0196 120052     119       lcall ?WriteData   ;Send the data
0199 22         120       ret                  ;Return from routine
019A            121   
019A            122   ;---------------------------------;
019A            123   ; Main loop. Initialize stack, ;
019A            124   ; ports, LCD, and displays ;
019A            125   ; letters on the LCD ;
019A            126   ;---------------------------------;
019A            127   myprogram:
019A 75817F     128   mov SP, #7FH
019D            129   ; Configure the pins as bi-directional so we can use them as input/output
019D 75B100     130   mov P0M1, #0x00
01A0 75B200     131   mov P0M2, #0x00
01A3 75B300     132   mov P1M1, #0x00
01A6 75B400     133   mov P1M2, #0x00
01A9 75AD00     134   mov P3M2, #0x00
01AC 75AD00     135   mov P3M2, #0x00
01AF 12005C     136   lcall LCD_4BIT
01B2            137   
01B2            138   forever:
01B2 120140     139   lcall heart
01B5 7481       140   mov a, #0x81
01B7 120057     141   lcall ?WriteCommand
01BA 7403       142   mov a, #3H
01BC 120052     143   lcall ?WriteData
01BF            144   
01BF 120113     145   lcall eighth
01C2 74C4       146   mov a, #0xC4
01C4 120057     147   lcall ?WriteCommand
01C7 7402       148   mov a, #2H
01C9 120052     149   lcall ?WriteData
01CC            150   
01CC 12016D     151   lcall bell
01CF 7487       152   mov a, #0x87
01D1 120057     153   lcall ?WriteCommand
01D4 7404       154   mov a, #4H
01D6 120052     155   lcall ?WriteData
01D9            156   
01D9 1200E6     157   lcall double_eighth
01DC 74CA       158   mov a, #0xCA
01DE 120057     159   lcall ?WriteCommand
01E1 7401       160   mov a, #1H
01E3 120052     161   lcall ?WriteData
01E6            162   
01E6 120140     163   lcall heart
01E9 748D       164   mov a, #0x8D
01EB 120057     165   lcall ?WriteCommand
01EE 7403       166   mov a, #3H
01F0 120052     167   lcall ?WriteData
01F3            168   
01F3 C002       169            push AR2
01F5 7AFA       169            mov R2, #250
01F7 12000D     169            lcall ?Wait_Milli_Seconds
01FA D002       169            pop AR2
01FC C002       170            push AR2
01FE 7A46       170            mov R2, #70
0200 12000D     170            lcall ?Wait_Milli_Seconds
0203 D002       170            pop AR2
0205            171   
0205 C0E0       172            push acc
0207 7401       172            mov a, #1
0209 14         172            dec a
020A 12009C     172            lcall ?Set_Cursor_1 ; Select column and row
020D D0E0       172            pop acc
020F C083       173            push dph
0211 C082       173            push dpl
0213 C0E0       173            push acc
0215 9000D5     173            mov dptr, #clear_screen
0218 12008F     173            lcall ?Send_Constant_String
021B D0E0       173            pop acc
021D D082       173            pop dpl
021F D083       173            pop dph
0221 C0E0       174            push acc
0223 7401       174            mov a, #1
0225 14         174            dec a
0226 12009A     174            lcall ?Set_Cursor_2 ; Select column and row
0229 D0E0       174            pop acc
022B C083       175            push dph
022D C082       175            push dpl
022F C0E0       175            push acc
0231 9000D5     175            mov dptr, #clear_screen
0234 12008F     175            lcall ?Send_Constant_String
0237 D0E0       175            pop acc
0239 D082       175            pop dpl
023B D083       175            pop dph
023D            176   
023D 120140     177   lcall heart
0240 74C0       178   mov a, #0xC0
0242 120057     179   lcall ?WriteCommand
0245 7403       180   mov a, #3H
0247 120052     181   lcall ?WriteData
024A            182   
024A 120113     183   lcall eighth
024D 7483       184   mov a, #0x83
024F 120057     185   lcall ?WriteCommand
0252 7402       186   mov a, #2H
0254 120052     187   lcall ?WriteData
0257            188   
0257 12016D     189   lcall bell
025A 74C7       190   mov a, #0xC7
025C 120057     191   lcall ?WriteCommand
025F 7404       192   mov a, #4H
0261 120052     193   lcall ?WriteData
0264            194   
0264 1200E6     195   lcall double_eighth
0267 748B       196   mov a, #0x8B
0269 120057     197   lcall ?WriteCommand
026C 7401       198   mov a, #1H
026E 120052     199   lcall ?WriteData
0271            200   
0271 120140     201   lcall heart
0274 74CE       202   mov a, #0xCE
0276 120057     203   lcall ?WriteCommand
0279 7403       204   mov a, #3H
027B 120052     205   lcall ?WriteData
027E            206   
027E C002       207            push AR2
0280 7AFA       207            mov R2, #250
0282 12000D     207            lcall ?Wait_Milli_Seconds
0285 D002       207            pop AR2
0287 C002       208            push AR2
0289 7A46       208            mov R2, #70
028B 12000D     208            lcall ?Wait_Milli_Seconds
028E D002       208            pop AR2
0290 C0E0       209            push acc
0292 7401       209            mov a, #1
0294 14         209            dec a
0295 12009C     209            lcall ?Set_Cursor_1 ; Select column and row
0298 D0E0       209            pop acc
029A C083       210            push dph
029C C082       210            push dpl
029E C0E0       210            push acc
02A0 9000D5     210            mov dptr, #clear_screen
02A3 12008F     210            lcall ?Send_Constant_String
02A6 D0E0       210            pop acc
02A8 D082       210            pop dpl
02AA D083       210            pop dph
02AC C0E0       211            push acc
02AE 7401       211            mov a, #1
02B0 14         211            dec a
02B1 12009A     211            lcall ?Set_Cursor_2 ; Select column and row
02B4 D0E0       211            pop acc
02B6 C083       212            push dph
02B8 C082       212            push dpl
02BA C0E0       212            push acc
02BC 9000D5     212            mov dptr, #clear_screen
02BF 12008F     212            lcall ?Send_Constant_String
02C2 D0E0       212            pop acc
02C4 D082       212            pop dpl
02C6 D083       212            pop dph
02C8            213   
02C8 0201B2     214   ljmp forever
02CB            215   END
