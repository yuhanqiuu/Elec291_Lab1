0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet and datasheets.
                  4   $LIST
0000              6   org 0000H
0000 0201A2       7   ljmp myprogram
0003              8   ; N76E003 pinout:
0003              9   ; -------
0003             10   ; PWM2/IC6/T0/AIN4/P0.5 -|1 20|- P0.4/AIN5/STADC/PWM3/IC3
0003             11   ; TXD/AIN3/P0.6 -|2 19|- P0.3/PWM5/IC5/AIN6
0003             12   ; RXD/AIN2/P0.7 -|3 18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0003             13   ; RST/P2.0 -|4 17|- P0.1/PWM4/IC4/MISO
0003             14   ; INT0/OSCIN/AIN1/P3.0 -|5 16|- P0.0/PWM3/IC3/MOSI/T1
0003             15   ; INT1/AIN0/P1.7 -|6 15|- P1.0/PWM2/IC2/SPCLK
0003             16   ; GND -|7 14|- P1.1/PWM1/IC1/AIN7/CLO
0003             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8 13|- P1.2/PWM0/IC0
0003             18   ; VDD -|9 12|- P1.3/SCL/[STADC]
0003             19   ; PWM5/IC7/SS/P1.5 -|10 11|- P1.4/SDA/FB/PWM1
0003             20   ; -------
0003             21   ;
0003             22   ; These 'equ' must match the hardware wiring
0003             23   LCD_RS equ P1.3
0003             24   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0003             25   LCD_E equ P1.4
0003             26   LCD_D4 equ P0.0
0003             27   LCD_D5 equ P0.1
0003             28   LCD_D6 equ P0.2
0003             29   LCD_D7 equ P0.3
0003             30   
                 32   $LIST
00D5             34   
00D5 20202020    35   clear_screen:  db '                ', 0
     20202020
     20202020
     20202020
     00
00E6             36   
00E6             37   ;
00E6             38   ;for special character 
00E6             39   double_eighth:
00E6 7448        40       mov   A,#48H         ;Load the location where we want to store
00E8 120057      41       lcall ?WriteCommand    ;Send the command
00EB 7400        42       mov   A,#00H         ;Load row 1 data
00ED 120052      43       lcall ?WriteData   ;Send the data
00F0 740F        44       mov   A,#0FH         ;Load row 2 data
00F2 120052      45       lcall ?WriteData   ;Send the data
00F5 7409        46       mov   A,#09H         ;Load row 3 data
00F7 120052      47       lcall ?WriteData   ;Send the data
00FA 7409        48       mov   A,#09H         ;Load row 4 data
00FC 120052      49       lcall ?WriteData   ;Send the data
00FF 741B        50       mov   A,#1BH         ;Load row 5 data
0101 120052      51       lcall ?WriteData   ;Send the data
0104 741B        52       mov   A,#1BH         ;Load row 6 data
0106 120052      53       lcall ?WriteData   ;Send the data
0109 7400        54       mov   A,#00H         ;Load row 7 data
010B 1152        55       acall ?WriteData   ;Send the data
010D 7400        56       mov   A,#00H         ;Load row 8 data
010F 120052      57       lcall ?WriteData   ;Send the data
0112 22          58       ret                  ;Return from routine
0113             59       
0113             60   eighth:
0113 7450        61       mov   A,#50H         ;Load the location where we want to store
0115 120057      62       lcall ?WriteCommand    ;Send the command
0118 7404        63       mov   A,#04H         ;Load row 1 data
011A 120052      64       lcall ?WriteData   ;Send the data
011D 7406        65       mov   A,#06H         ;Load row 2 data
011F 120052      66       lcall ?WriteData   ;Send the data
0122 7405        67       mov   A,#05H         ;Load row 3 data
0124 120052      68       lcall ?WriteData   ;Send the data
0127 7404        69       mov   A,#04H         ;Load row 4 data
0129 120052      70       lcall ?WriteData   ;Send the data
012C 740C        71       mov   A,#0CH         ;Load row 5 data
012E 120052      72       lcall ?WriteData   ;Send the data
0131 7414        73       mov   A,#14H         ;Load row 6 data
0133 120052      74       lcall ?WriteData   ;Send the data
0136 7408        75       mov   A,#08H         ;Load row 7 data
0138 1152        76       acall ?WriteData   ;Send the data
013A 7400        77       mov   A,#00H         ;Load row 8 data
013C 120052      78       lcall ?WriteData   ;Send the data
013F 22          79       ret                  ;Return from routine
0140             80   
0140             81   heart:
0140 7458        82       mov   A,#58H         ;Load the location where we want to store
0142 120057      83       lcall ?WriteCommand    ;Send the command
0145 7400        84       mov   A,#00H         ;Load row 1 data
0147 120052      85       lcall ?WriteData   ;Send the data
014A 740A        86       mov   A,#0AH         ;Load row 2 data
014C 120052      87       lcall ?WriteData   ;Send the data
014F 7415        88       mov   A,#15H         ;Load row 3 data
0151 120052      89       lcall ?WriteData   ;Send the data
0154 7411        90       mov   A,#11H         ;Load row 4 data
0156 120052      91       lcall ?WriteData   ;Send the data
0159 7411        92       mov   A,#11H         ;Load row 5 data
015B 120052      93       lcall ?WriteData   ;Send the data
015E 740A        94       mov   A,#0AH         ;Load row 6 data
0160 120052      95       lcall ?WriteData   ;Send the data
0163 7404        96       mov   A,#04H         ;Load row 7 data
0165 1152        97       acall ?WriteData   ;Send the data
0167 7400        98       mov   A,#00H         ;Load row 8 data
0169 120052      99       lcall ?WriteData   ;Send the data
016C 22         100       ret                  ;Return from routine
016D            101   bell:
016D 7460       102       mov   A,#60H         ;Load the location where we want to store
016F 120057     103       lcall ?WriteCommand    ;Send the command
0172 7400       104       mov   A,#00H         ;Load row 1 data
0174 120052     105       lcall ?WriteData   ;Send the data
0177 7404       106       mov   A,#04H          ;Load row 2 data
0179 120052     107       lcall ?WriteData   ;Send the data
017C 740E       108       mov   A,#0eH          ;Load row 3 data
017E 120052     109       lcall ?WriteData   ;Send the data
0181 740E       110       mov   A,#0eH         ;Load row 4 data
0183 120052     111       lcall ?WriteData   ;Send the data
0186 740E       112       mov   A,#0eH         ;Load row 5 data
0188 120052     113       lcall ?WriteData   ;Send the data
018B 741F       114       mov   A,#1fH         ;Load row 6 data
018D 120052     115       lcall ?WriteData   ;Send the data
0190 7400       116       mov   A,#00H         ;Load row 7 data
0192 1152       117       acall ?WriteData   ;Send the data
0194 7404       118       mov   A,#04H         ;Load row 8 data
0196 120052     119       lcall ?WriteData   ;Send the data
0199 22         120       ret                  ;Return from routine
019A            121   
019A            122   clear_bit:
019A 120057     123       lcall ?WriteCommand
019D 7420       124       mov a, #' '
019F 120052     125       lcall ?WriteData
01A2            126   ;---------------------------------;
01A2            127   ; Main loop. Initialize stack, ;
01A2            128   ; ports, LCD, and displays ;
01A2            129   ; letters on the LCD ;
01A2            130   ;---------------------------------;
01A2            131   myprogram:
01A2 75817F     132   mov SP, #7FH
01A5            133   ; Configure the pins as bi-directional so we can use them as input/output
01A5 75B100     134   mov P0M1, #0x00
01A8 75B200     135   mov P0M2, #0x00
01AB 75B300     136   mov P1M1, #0x00
01AE 75B400     137   mov P1M2, #0x00
01B1 75AD00     138   mov P3M2, #0x00
01B4 75AD00     139   mov P3M2, #0x00
01B7 12005C     140   lcall LCD_4BIT
01BA            141   ; mov a, #0x80 ; Move cursor to line 1 column 1
01BA            142   ; lcall WriteCommand
01BA            143   ; mov dptr, #name
01BA            144   ; lcall Display_String
01BA            145   
01BA            146   ; mov a, #0xC0 ; Move cursor to line 2 column 1
01BA            147   ; lcall WriteCommand
01BA            148   ; mov dptr, #student_number
01BA            149   ; lcall Display_String
01BA            150   
01BA            151   
01BA            152   ;lcall scroll
01BA            153   
01BA            154   ; scroll:
01BA            155   ; mov a, #0x18
01BA            156   ; lcall WriteCommand
01BA            157   ; mov a, #0x10
01BA            158   ; lcall WriteCommand
01BA            159   ; lcall WaitmilliSec
01BA            160   ; sjmp scroll
01BA            161   
01BA            162   forever:
01BA 120140     163   lcall heart
01BD 7481       164   mov a, #0x81
01BF 120057     165   lcall ?WriteCommand
01C2 7401       166   mov a, #0x01
01C4 120052     167   lcall ?WriteData
01C7            168   
01C7 120113     169   lcall eighth
01CA 74C5       170   mov a, #0xC5
01CC 120057     171   lcall ?WriteCommand
01CF 7402       172   mov a, #2H
01D1 120052     173   lcall ?WriteData
01D4            174   
01D4 12016D     175   lcall bell
01D7 7488       176   mov a, #0x88
01D9 120057     177   lcall ?WriteCommand
01DC 7403       178   mov a, #3H
01DE 120052     179   lcall ?WriteData
01E1            180   
01E1 1200E6     181   lcall double_eighth
01E4 74CB       182   mov a, #0xCB
01E6 120057     183   lcall ?WriteCommand
01E9 7404       184   mov a, #4H
01EB 120052     185   lcall ?WriteData
01EE            186   
01EE 120140     187   lcall heart
01F1 748E       188   mov a, #0x8E
01F3 120057     189   lcall ?WriteCommand
01F6 7405       190   mov a, #5H
01F8 120052     191   lcall ?WriteData
01FB            192   
01FB C002       193            push AR2
01FD 7AFA       193            mov R2, #250
01FF 12000D     193            lcall ?Wait_Milli_Seconds
0202 D002       193            pop AR2
0204            194   
0204 C0E0       195            push acc
0206 7401       195            mov a, #1
0208 14         195            dec a
0209 12009C     195            lcall ?Set_Cursor_1 ; Select column and row
020C D0E0       195            pop acc
020E C083       196            push dph
0210 C082       196            push dpl
0212 C0E0       196            push acc
0214 9000D5     196            mov dptr, #clear_screen
0217 12008F     196            lcall ?Send_Constant_String
021A D0E0       196            pop acc
021C D082       196            pop dpl
021E D083       196            pop dph
0220 C0E0       197            push acc
0222 7401       197            mov a, #1
0224 14         197            dec a
0225 12009A     197            lcall ?Set_Cursor_2 ; Select column and row
0228 D0E0       197            pop acc
022A C083       198            push dph
022C C082       198            push dpl
022E C0E0       198            push acc
0230 9000D5     198            mov dptr, #clear_screen
0233 12008F     198            lcall ?Send_Constant_String
0236 D0E0       198            pop acc
0238 D082       198            pop dpl
023A D083       198            pop dph
023C            199   
023C 120140     200   lcall heart
023F 74C2       201   mov a, #0xC2
0241 120057     202   lcall ?WriteCommand
0244 7401       203   mov a, #0x01
0246 120052     204   lcall ?WriteData
0249            205   
0249 120113     206   lcall eighth
024C 7485       207   mov a, #0x85
024E 120057     208   lcall ?WriteCommand
0251 7402       209   mov a, #2H
0253 120052     210   lcall ?WriteData
0256            211   
0256 12016D     212   lcall bell
0259 74C8       213   mov a, #0xC8
025B 120057     214   lcall ?WriteCommand
025E 7403       215   mov a, #3H
0260 120052     216   lcall ?WriteData
0263            217   
0263 1200E6     218   lcall double_eighth
0266 748B       219   mov a, #0x8B
0268 120057     220   lcall ?WriteCommand
026B 7404       221   mov a, #4H
026D 120052     222   lcall ?WriteData
0270            223   
0270 120140     224   lcall heart
0273 74CE       225   mov a, #0xCE
0275 120057     226   lcall ?WriteCommand
0278 7405       227   mov a, #5H
027A 120052     228   lcall ?WriteData
027D            229   
027D C002       230            push AR2
027F 7AFA       230            mov R2, #250
0281 12000D     230            lcall ?Wait_Milli_Seconds
0284 D002       230            pop AR2
0286            231   
0286 C0E0       232            push acc
0288 7401       232            mov a, #1
028A 14         232            dec a
028B 12009C     232            lcall ?Set_Cursor_1 ; Select column and row
028E D0E0       232            pop acc
0290 C083       233            push dph
0292 C082       233            push dpl
0294 C0E0       233            push acc
0296 9000D5     233            mov dptr, #clear_screen
0299 12008F     233            lcall ?Send_Constant_String
029C D0E0       233            pop acc
029E D082       233            pop dpl
02A0 D083       233            pop dph
02A2 C0E0       234            push acc
02A4 7401       234            mov a, #1
02A6 14         234            dec a
02A7 12009A     234            lcall ?Set_Cursor_2 ; Select column and row
02AA D0E0       234            pop acc
02AC C083       235            push dph
02AE C082       235            push dpl
02B0 C0E0       235            push acc
02B2 9000D5     235            mov dptr, #clear_screen
02B5 12008F     235            lcall ?Send_Constant_String
02B8 D0E0       235            pop acc
02BA D082       235            pop dpl
02BC D083       235            pop dph
02BE            236   
02BE 0201BA     237   ljmp forever
02C1            238   END
