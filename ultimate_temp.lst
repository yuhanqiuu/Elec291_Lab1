0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   
                  4   $LIST
0000              6   
0000              7   ;  N76E003 pinout:
0000              8   ;                               -------
0000              9   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             10   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             11   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             12   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             13   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             14   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             15   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             16   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             17   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             18   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             19   ;                               -------
0000             20   ;
0000             21   
0000             22   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             23   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             24   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             25   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             26   
0000             27   CtoF                       equ P1.5
0000             28   
0000             29   ORG 0x0000
0000 02042F      30            ljmp main
0003             31   
0003             32   ;                     1234567890123456    <- This helps determine the location of the counter
0003 2A205465    33   test_message:     db '* Temp (deg x) *', 0
     6D702028
     64656720
     7829202A
     00
0014 54203D20    34   value_message:    db 'T =      ', 0
     20202020
     2000
001E 4300        35   celcius:                   db 'C', 0
0020 4600        36   fahren:                    db 'F', 0
0022             37   cseg
0022             38   ; These 'equ' must match the hardware wiring
0022             39   LCD_RS equ P1.3
0022             40   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0022             41   LCD_E  equ P1.4
0022             42   LCD_D4 equ P0.0
0022             43   LCD_D5 equ P0.1
0022             44   LCD_D6 equ P0.2
0022             45   LCD_D7 equ P0.3
0022             46   
                 48   	$LIST
00D6             50   
00D6             51   ; These register definitions needed by 'math32.inc'
0030             52   DSEG at 30H
0030             53   x:   ds 4
0034             54   y:   ds 4
0038             55   bcd: ds 5
003D             56   
0000             57   BSEG
0000             58   mf: dbit 1
0001             59   deg: dbit 1 ;deg flag set to 1 for celcius, 0 for fahrenheit
0002             60   
                546   $LIST
                 62   $LIST
0346             64   
0346             65   
0346             66   Init_All:
0346             67            ; Configure all the pins for biderectional I/O
0346 75AC00      68            mov     P3M1, #0x00
0349 75AD00      69            mov     P3M2, #0x00
034C 75B300      70            mov     P1M1, #0x00
034F 75B400      71            mov     P1M2, #0x00
0352 75B100      72            mov     P0M1, #0x00
0355 75B200      73            mov     P0M2, #0x00
0358             74            
0358 438E10      75            orl     CKCON, #0x10 ; CLK is the input for timer 1
035B 438780      76            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
035E 759852      77            mov     SCON, #0x52
0361 53C4DF      78            anl     T3CON, #0b11011111
0364 53890F      79            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0367 438920      80            orl     TMOD, #0x20 ; Timer 1 Mode 2
036A 758DF7      81            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
036D D28E        82            setb TR1
036F             83            
036F             84            ; Using timer 0 for delay functions.  Initialize here:
036F C28C        85            clr     TR0 ; Stop timer 0
0371 438E08      86            orl     CKCON,#0x08 ; CLK is the input for timer 0
0374 5389F0      87            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0377 438901      88            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
037A             89            
037A             90            ; Initialize the pin used by the ADC (P1.1) as input.
037A 43B302      91            orl     P1M1, #0b00000010
037D 53B4FD      92            anl     P1M2, #0b11111101
0380             93            
0380             94            ; Initialize and start the ADC:
0380 53E8F0      95            anl ADCCON0, #0xF0
0383 43E807      96            orl ADCCON0, #0x07 ; Select channel 7
0386             97            ; AINDIDS select if some pins are analog inputs or digital I/O:
0386 75F600      98            mov AINDIDS, #0x00 ; Disable all analog inputs
0389 43F680      99            orl AINDIDS, #0b10000000 ; P1.1 is analog input
038C 43E101     100            orl ADCCON1, #0x01 ; Enable ADC
038F            101            
038F 22         102            ret
0390            103            
0390            104   wait_1ms:
0390 C28C       105            clr     TR0 ; Stop timer 0
0392 C28D       106            clr     TF0 ; Clear overflow flag
0394 758CBF     107            mov     TH0, #high(TIMER0_RELOAD_1MS)
0397 758A28     108            mov     TL0,#low(TIMER0_RELOAD_1MS)
039A D28C       109            setb TR0
039C 308DFD     110            jnb     TF0, $ ; Wait for overflow
039F 22         111            ret
03A0            112   
03A0            113   ; Wait the number of miliseconds in R2
03A0            114   waitms:
03A0 120390     115            lcall wait_1ms
03A3 DAFB       116            djnz R2, waitms
03A5 22         117            ret
                118   send_BCD mac
                119   	push ar0
                120   	mov r0, %0
                121   	lcall ?send_BCD
                122   	pop ar0
                123   endmac
03A6            124   
03A6            125   ?send_BCD:
03A6 C0E0       126            push acc
03A8            127            ; Write most significant digit
03A8 E8         128            mov a, r0
03A9 C4         129            swap a
03AA 540F       130            anl a, #0fh
03AC 4430       131            orl a, #30h
03AE 120427     132            lcall putchar
03B1            133            ; write least significant digit
03B1 E8         134            mov a, r0
03B2 540F       135            anl a, #0fh
03B4 4430       136            orl a, #30h
03B6 120427     137            lcall putchar
03B9 D0E0       138            pop acc
03BB 22         139            ret
03BC            140   
03BC            141   ; We can display a number any way we want.  In this case with
03BC            142   ; four decimal places.
03BC            143   Display_formated_BCD:
03BC C0E0       144            push acc
03BE 7405       144            mov a, #5
03C0 14         144            dec a
03C1 1200B9     144            lcall ?Set_Cursor_2 ; Select column and row
03C4 D0E0       144            pop acc
03C6 C000       145            push ar0
03C8 A83B       145            mov r0, bcd+3
03CA 1200C0     145            lcall ?Display_BCD
03CD D000       145            pop ar0 ;this is just in case temperatures exceed 100C and we're in deg F
03CF C000       146            push ar0
03D1 A83A       146            mov r0, bcd+2
03D3 1200C0     146            lcall ?Display_BCD
03D6 D000       146            pop ar0
03D8 C0E0       147            push acc
03DA 742E       147            mov a, #'.'
03DC 120071     147            lcall ?WriteData
03DF D0E0       147            pop acc
03E1 C000       148            push ar0
03E3 A839       148            mov r0, bcd+1
03E5 1200C0     148            lcall ?Display_BCD
03E8 D000       148            pop ar0
03EA C000       149            push ar0
03EC A838       149            mov r0, bcd+0
03EE 1200C0     149            lcall ?Display_BCD
03F1 D000       149            pop ar0
03F3 C0E0       150            push acc
03F5 740D       150            mov a, #13
03F7 14         150            dec a
03F8 1200BB     150            lcall ?Set_Cursor_1 ; Select column and row
03FB D0E0       150            pop acc
03FD 300114     151            jnb deg, printfah
0400 C083       152            push dph
0402 C082       152            push dpl
0404 C0E0       152            push acc
0406 90001E     152            mov dptr, #celcius
0409 1200AE     152            lcall ?Send_Constant_String
040C D0E0       152            pop acc
040E D082       152            pop dpl
0410 D083       152            pop dph
0412 8012       153            sjmp printcel
0414            154   printfah:
0414 C083       155            push dph
0416 C082       155            push dpl
0418 C0E0       155            push acc
041A 900020     155            mov dptr, #fahren
041D 1200AE     155            lcall ?Send_Constant_String
0420 D0E0       155            pop acc
0422 D082       155            pop dpl
0424 D083       155            pop dph
0426            156   printcel:
0426 22         157            ret
0427            158            
0427            159   putchar:
0427 3099FD     160   jnb TI, putchar
042A C299       161   clr TI
042C F599       162   mov SBUF, a
042E 22         163   ret
042F            164            
042F            165   main:
042F 75817F     166            mov sp, #0x7f
0432 120346     167            lcall Init_All
0435 12007B     168       lcall LCD_4BIT
0438 D201       169       setb deg ; degree flag set to celcius by default
043A            170       
043A            171       ; initial messages in LCD
043A C0E0       172            push acc
043C 7401       172            mov a, #1
043E 14         172            dec a
043F 1200BB     172            lcall ?Set_Cursor_1 ; Select column and row
0442 D0E0       172            pop acc
0444 C083       173            push dph
0446 C082       173            push dpl
0448 C0E0       173            push acc
044A 900003     173            mov dptr, #test_message
044D 1200AE     173            lcall ?Send_Constant_String
0450 D0E0       173            pop acc
0452 D082       173            pop dpl
0454 D083       173            pop dph
0456 C0E0       174            push acc
0458 7401       174            mov a, #1
045A 14         174            dec a
045B 1200B9     174            lcall ?Set_Cursor_2 ; Select column and row
045E D0E0       174            pop acc
0460 C083       175            push dph
0462 C082       175            push dpl
0464 C0E0       175            push acc
0466 900014     175            mov dptr, #value_message
0469 1200AE     175            lcall ?Send_Constant_String
046C D0E0       175            pop acc
046E D082       175            pop dpl
0470 D083       175            pop dph
0472            176            
0472            177   Forever:
0472            178   
0472            179       ; Button for switching from celcius to fahrenheit
0472 209519     180       jb CtoF, deg_complete
0475 C002       181            push AR2
0477 7A32       181            mov R2, #50
0479 12002C     181            lcall ?Wait_Milli_Seconds
047C D002       181            pop AR2
047E 20950D     182            jb CtoF, deg_complete
0481 3095FD     183            jnb CtoF, $
0484            184            
0484            185            ;if degree is 1 (celcius) jump to setF and set to 0 (fahrenheit)
0484 200105     186            jb deg, setF
0487            187            
0487            188            ;otherwise deg is 0 and needs to be set to 1
0487 D201       189            setb deg
0489 02048E     190            ljmp deg_complete
048C            191            
048C            192   setF:
048C C201       193            clr deg
048E            194            
048E            195   deg_complete:
048E C2EF       196            clr ADCF
0490 D2EE       197            setb ADCS ;  ADC start trigger signal
0492 30EFFD     198       jnb ADCF, $ ; Wait for conversion complete
0495            199       
0495            200       ; Read the ADC result and store in [R1, R0]
0495 E5C3       201       mov a, ADCRH   
0497 C4         202       swap a
0498 C0E0       203       push acc
049A 540F       204       anl a, #0x0f
049C F9         205       mov R1, a
049D D0E0       206       pop acc
049F 54F0       207       anl a, #0xf0
04A1 45C2       208       orl a, ADCRL
04A3 F8         209       mov R0, A
04A4            210       
04A4            211       ; Convert to voltage
04A4 8830       212            mov x+0, R0
04A6 8931       213            mov x+1, R1
04A8 753200     214            mov x+2, #0
04AB 753300     215            mov x+3, #0
04AE 7534EC     216            mov y+0, #low (49900 % 0x10000) 
04B1 7535C2     216            mov y+1, #high(49900 % 0x10000) 
04B4 753600     216            mov y+2, #low (49900 / 0x10000) 
04B7 753700     216            mov y+3, #high(49900 / 0x10000)  ; VCC voltage measured (equals 4.99V)
04BA 120250     217            lcall mul32 ;multiplying ADC * Vref
04BD 7534FF     218            mov y+0, #low (4095 % 0x10000) 
04C0 75350F     218            mov y+1, #high(4095 % 0x10000) 
04C3 753600     218            mov y+2, #low (4095 / 0x10000) 
04C6 753700     218            mov y+3, #high(4095 / 0x10000)  ; 2^12-1
04C9 1202DD     219            lcall div32 ;now doing (ADC*Vref)/(4095)
04CC            220            
04CC            221            ;convert to temperature
04CC 7534A4     222            mov y+0, #low (27300 % 0x10000) 
04CF 75356A     222            mov y+1, #high(27300 % 0x10000) 
04D2 753600     222            mov y+2, #low (27300 / 0x10000) 
04D5 753700     222            mov y+3, #high(27300 / 0x10000)  ;first load y = 2.73V
04D8 1201BC     223            lcall sub32 ;do vout-2.73
04DB 753464     224            mov y+0, #low (100 % 0x10000) 
04DE 753500     224            mov y+1, #high(100 % 0x10000) 
04E1 753600     224            mov y+2, #low (100 / 0x10000) 
04E4 753700     224            mov y+3, #high(100 / 0x10000) ;load y = 100
04E7 120250     225            lcall mul32 ;finish temp calculation by multiplying x by 100
04EA            226            
04EA            227            ;now check deg flag and convert if needed
04EA 20012D     228            jb deg, celc
04ED            229            
04ED 753409     230            mov y+0, #low (9 % 0x10000) 
04F0 753500     230            mov y+1, #high(9 % 0x10000) 
04F3 753600     230            mov y+2, #low (9 / 0x10000) 
04F6 753700     230            mov y+3, #high(9 / 0x10000) 
04F9 120250     231            lcall mul32
04FC 753405     232            mov y+0, #low (5 % 0x10000) 
04FF 753500     232            mov y+1, #high(5 % 0x10000) 
0502 753600     232            mov y+2, #low (5 / 0x10000) 
0505 753700     232            mov y+3, #high(5 / 0x10000) 
0508 1202DD     233            lcall div32
050B 753400     234            mov y+0, #low (320000 % 0x10000) 
050E 7535E2     234            mov y+1, #high(320000 % 0x10000) 
0511 753604     234            mov y+2, #low (320000 / 0x10000) 
0514 753700     234            mov y+3, #high(320000 / 0x10000)  ;y=32
0517 12019B     235       lcall add32
051A            236            
051A            237            
051A            238   ; Convert to BCD and display
051A            239   celc:
051A 1200D6     240            lcall hex2bcd
051D 1203BC     241            lcall Display_formated_BCD
0520            242            
0520            243            ;send the BCD value to the MATLAB script
0520 C000       244            push ar0
0522 A83A       244            mov r0, bcd+2
0524 1203A6     244            lcall ?send_BCD
0527 D000       244            pop ar0
0529 C000       245            push ar0
052B A839       245            mov r0, bcd+1
052D 1203A6     245            lcall ?send_BCD
0530 D000       245            pop ar0
0532 C000       246            push ar0
0534 A838       246            mov r0, bcd
0536 1203A6     246            lcall ?send_BCD
0539 D000       246            pop ar0
053B 740D       247            mov a, #'\r'
053D 120427     248            lcall putchar
0540 740A       249            mov a, #'\n'
0542 120427     250            lcall putchar
0545            251            
0545            252            ; Wait 500 ms between conversions
0545 7AFA       253            mov R2, #250
0547 1203A0     254            lcall waitms
054A 7AFA       255            mov R2, #250
054C 1203A0     256            lcall waitms
054F 7AFA       257            mov R2, #250
0551 1203A0     258            lcall waitms
0554 7AFA       259            mov R2, #250
0556 1203A0     260            lcall waitms
0559 B297       261            cpl P1.7 ; Blinking LED...
055B            262   
055B 020472     263            ljmp Forever
055E            264            
055E            265   END
